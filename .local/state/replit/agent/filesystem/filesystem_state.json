{"file_contents":{"README.md":{"content":"# Bake Sewa Management System\n\nA comprehensive bakery management system built with React, TypeScript, and PostgreSQL.\n\n## üç∞ Features\n\n### Core Management\n- **Dashboard** - Real-time overview of sales, orders, and production\n- **Products** - Manage bakery items with categories and pricing\n- **Inventory** - Track ingredients and raw materials\n- **Orders** - Process customer orders and track status\n- **Production** - Schedule and manage baking operations\n\n### Business Operations\n- **Sales** - Record and track sales transactions\n- **Purchases** - Manage supplier purchases and inventory restocking\n- **Customers** - Customer relationship management\n- **Parties/Suppliers** - Vendor and supplier management\n- **Expenses** - Track business expenses and costs\n- **Assets** - Equipment and asset management\n\n### Advanced Features\n- **Category Management** - Organize products, inventory, and transactions\n- **Push Notifications** - Real-time alerts for admins, supervisors, and managers\n- **Reports & Analytics** - Comprehensive business insights\n- **User Management** - Role-based access control\n- **Responsive Design** - Works on desktop, tablet, and mobile\n\n## üöÄ Quick Start\n\n### Default Login Credentials\n\nThe system comes with pre-configured users:\n\n| Role | Email | Password | Access Level |\n|------|-------|----------|--------------|\n| Admin | admin@bakery.com | password123 | Full system access |\n| Manager | manager@bakery.com | password123 | Management features |\n| Staff | staff@bakery.com | password123 | Basic operations |\n\n### Getting Started\n\n1. Open the application in your browser\n2. Use any of the default login credentials above\n3. Explore the different sections through the sidebar navigation\n4. The database is pre-populated with sample data for testing\n\n## üí∞ Currency\n\nAll monetary values are displayed in Rupees (Rs.) throughout the system.\n\n## üì± Responsive Design\n\nThe sidebar automatically adapts to your screen size:\n- **Desktop**: Fixed sidebar with collapsible sections\n- **Tablet/Mobile**: Overlay sidebar with touch-friendly navigation\n\n## üîî Notification System\n\n- Available for Admin, Supervisor, and Manager roles\n- Configurable alerts for low stock, new orders, and production reminders\n- Browser-based push notifications with daily limits\n\n## üèóÔ∏è Database Schema\n\nThe system includes the following main entities:\n- Users (with role-based permissions)\n- Categories, Products, Inventory Items\n- Orders, Sales, Purchases\n- Production Schedule, Customers, Suppliers\n- Assets, Expenses, Analytics\n\n## üéØ Usage Tips\n\n1. **Start with Categories** - Set up product and inventory categories first\n2. **Add Inventory** - Input your raw materials and ingredients\n3. **Create Products** - Add your bakery items with ingredient relationships\n4. **Process Orders** - Use the order management system for customer requests\n5. **Track Production** - Schedule baking activities and monitor progress\n6. **Monitor Analytics** - Use the dashboard and reports for business insights\n\nThe system is designed to be intuitive and user-friendly, with all necessary sample data already populated for immediate use.#\u0000 \u0000b\u0000a\u0000k\u0000e\u0000d\u0000l\u0000i\u0000n\u0000k\u0000\r\u0000\n\u0000","size_bytes":3165},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Bake Sewa Management System\n\n## Overview\n\nA comprehensive bakery management system built with React, TypeScript, and PostgreSQL. The application provides complete business management functionality for bakeries including product management, inventory tracking, order processing, production scheduling, and financial operations.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query (React Query) for server state\n- **UI Library**: Shadcn/ui components with Radix UI primitives\n- **Styling**: Tailwind CSS with custom bakery theme\n- **Forms**: React Hook Form with Zod validation\n- **Build Tool**: Vite for fast development and optimized builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Language**: TypeScript with ES modules\n- **Authentication**: Passport.js with local strategy and bcrypt\n- **Session Management**: Express session with PostgreSQL store\n- **API Design**: RESTful endpoints with role-based access control\n\n### Database Layer\n- **Database**: PostgreSQL with Drizzle ORM\n- **Schema Management**: Drizzle migrations with version control\n- **Connection**: Neon serverless PostgreSQL or standard PostgreSQL\n- **Session Storage**: connect-pg-simple for Express sessions\n\n## Key Components\n\n### Core Management Modules\n1. **Dashboard**: Real-time analytics, sales metrics, and operational overview\n2. **Products**: Product catalog with categories, pricing, and cost calculation\n3. **Inventory**: Raw materials tracking with stock levels and alerts\n4. **Orders**: Customer order processing with status tracking\n5. **Production**: Scheduling and batch production management\n6. **Sales**: Transaction recording and revenue tracking\n7. **Purchases**: Supplier management and inventory restocking\n\n### Business Operations\n1. **Customer Management**: CRM functionality for customer relationships\n2. **Supplier/Party Management**: Vendor and supplier database\n3. **Asset Management**: Equipment and business asset tracking\n4. **Expense Tracking**: Business cost monitoring and categorization\n5. **Billing**: Invoice generation and payment processing\n\n### Advanced Features\n1. **User Management**: Role-based access (Super Admin, Admin, Manager, Staff)\n2. **Category Management**: Hierarchical organization system\n3. **Currency Support**: Multi-currency with formatting utilities\n4. **Notifications**: Push notification system for alerts\n5. **Reports & Analytics**: Business intelligence and insights\n6. **Theme Customization**: Dynamic color theming system\n7. **Unit Conversion System**: Advanced unit conversion with cost calculations\n8. **Cost Calculation Engine**: Automatic product cost calculation based on ingredient units\n9. **Interactive Table Sorting**: Comprehensive column sorting with visual indicators across all listing pages\n\n## Data Flow\n\n### Authentication Flow\n1. User credentials validated against bcrypt-hashed passwords\n2. Passport.js creates authenticated session\n3. Session stored in PostgreSQL with automatic expiration\n4. Role-based route protection via middleware\n\n### Data Management Flow\n1. Client components use TanStack Query for server state\n2. API requests routed through Express.js endpoints\n3. Drizzle ORM handles database operations with type safety\n4. Real-time updates via query invalidation and optimistic updates\n\n### Production Workflow\n1. Products defined with ingredient relationships\n2. Production schedules created with target quantities\n3. Inventory automatically updated based on production consumption\n4. Cost calculations based on ingredient prices and overhead\n\n## External Dependencies\n\n### Core Dependencies\n- **@tanstack/react-query**: Server state management\n- **drizzle-orm**: Type-safe database operations\n- **@neondatabase/serverless**: Serverless PostgreSQL client\n- **passport**: Authentication middleware\n- **bcrypt**: Password hashing\n- **express-session**: Session management\n\n### UI Dependencies\n- **@radix-ui/***: Primitive UI components\n- **tailwindcss**: Utility-first CSS framework\n- **react-hook-form**: Form state management\n- **zod**: Schema validation\n- **date-fns**: Date manipulation utilities\n\n### Development Dependencies\n- **vite**: Build tool and dev server\n- **typescript**: Type checking\n- **drizzle-kit**: Database migration tools\n- **esbuild**: Production bundling\n\n## Deployment Strategy\n\n### Development Environment\n- Vite dev server with HMR for frontend\n- tsx for TypeScript execution in development\n- Automatic database initialization with default users\n- Replit-specific optimizations and error handling\n\n### Production Build\n1. Vite builds optimized client bundle to `dist/public`\n2. esbuild bundles server code to `dist/index.js`\n3. Express serves static files in production mode\n4. Database migrations run automatically on startup\n\n### Environment Configuration\n- **DATABASE_URL**: PostgreSQL connection string (required)\n- **SESSION_SECRET**: Session encryption key\n- **NODE_ENV**: Environment flag (development/production)\n- **PORT**: Server port (default: 5000)\n\n### Default User Accounts\n- **Admin**: admin@sweetreats.com / admin123 (Full access)\n- **Manager**: manager@sweetreats.com / manager123 (Management features)\n- **Staff**: staff@sweetreats.com / staff123 (Basic operations)\n\nChangelog:\n- June 24, 2025. Initial setup\n- July 9, 2025. Implemented comprehensive theme color system with database integration\n- July 9, 2025. Added login tracking system with IP address, location, and device tracking\n- July 9, 2025. Enhanced UI/UX with consistent theme color application across all components\n- July 9, 2025. Added theme-aware badge system and improved user interface consistency\n- July 11, 2025. Added unit conversion system with database tables and API endpoints\n- July 11, 2025. Implemented cost calculation system for products based on unit conversions\n- July 11, 2025. Enhanced super admin role with full access to all system resources\n- July 11, 2025. Added reusable SearchBar component across all 17 pages\n- July 25, 2025. Implemented comprehensive interactive table sorting functionality across all listing pages with clickable column headers, ascending/descending toggle, and visual sort indicators\n- July 29, 2025. Successfully migrated from Replit Agent to standard Replit environment with PostgreSQL database provisioning, schema migrations, and unit system fixes\n- August 28, 2025. Completed full migration to Replit environment - resolved all 137 TypeScript diagnostics, fixed staff management system, added missing storage methods (getAssetById, getPartyById), corrected authentication interfaces, and ensured all 6 staff management subcategories are fully operational\n\nUser Preferences:\nPreferred communication style: Simple, everyday language.\nTheme system: Dynamic theme colors from database with comprehensive UI integration.","size_bytes":6903},"tailwind.config.js":{"content":"\nimport type { Config } from \"tailwindcss\";\n\nexport default {\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2605},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL not found. Make sure the database is provisioned and environment variable is set\",\n  );\n}\n\nconsole.log('üîå Connecting to database...');\n\nconst client = postgres(process.env.DATABASE_URL, {\n  prepare: false,\n  max: 10,\n  idle_timeout: 20,\n  connect_timeout: 10,\n});\n\nexport const db = drizzle(client);\n\n// Test database connection\nexport async function testDatabaseConnection(): Promise<boolean> {\n  try {\n    await client`SELECT 1`;\n    return true;\n  } catch (error) {\n    console.warn(\"‚ö†Ô∏è Database connection failed:\", error.message);\n    return false;\n  }\n}","size_bytes":721},"server/index.ts":{"content":"import express from \"express\";\nimport fileUpload from \"express-fileupload\";\nimport { createServer } from \"http\";\nimport { setupVite, serveStatic } from \"./vite\";\nimport { setupAuth } from \"./localAuth\";\nimport { initializeDatabase } from \"./init-db\";\nimport { registerRoutes } from \"./routes\";\nimport { initializeUnits } from \"./init-units\"; // Import initializeUnits\nimport { securityMonitor } from \"./securityMonitor\";\nimport { alertService } from \"./alertService\";\n\nconst app = express();\n\n// Trust proxy for production\napp.set(\"trust proxy\", 1);\n\n// Parse JSON bodies\napp.use(express.json({ limit: \"10mb\" }));\napp.use(express.urlencoded({ extended: true, limit: \"10mb\" }));\n\n// File upload middleware\napp.use(\n  fileUpload({\n    limits: { fileSize: 5 * 1024 * 1024 }, // 5MB limit\n    useTempFiles: true,\n    tempFileDir: \"/tmp/\",\n    createParentPath: true,\n  }),\n);\n\nasync function startServer() {\n  try {\n    let dbConnected = false;\n    let retryCount = 0;\n    const maxRetries = 3;\n\n    // Retry database connection\n    while (!dbConnected && retryCount < maxRetries) {\n      try {\n        await initializeDatabase();\n        dbConnected = true;\n      } catch (error) {\n        retryCount++;\n        if (retryCount < maxRetries) {\n          await new Promise((resolve) => setTimeout(resolve, 5000));\n        }\n      }\n    }\n\n    if (!dbConnected) {\n      console.error(\"‚ùå Database connection failed - starting in limited mode\");\n    }\n\n    // Initialize default units only if database is connected\n    if (dbConnected) {\n      try {\n        await initializeUnits();\n        console.log(\"‚úÖ Units initialized successfully\");\n      } catch (error) {\n        console.warn(\"‚ö†Ô∏è Unit initialization failed:\", (error as Error).message);\n      }\n    }\n\n    // Initialize security monitoring\n    if (dbConnected) {\n      try {\n        // Connect security monitor to alert service\n        securityMonitor.onAlert(async (alert) => {\n          await alertService.sendAlert(alert);\n        });\n        console.log(\"üõ°Ô∏è Security monitoring initialized\");\n      } catch (error) {\n        console.warn(\"‚ö†Ô∏è Security monitoring initialization failed:\", (error as Error).message);\n      }\n    }\n\n    // Setup authentication\n    await setupAuth(app);\n\n    // Register routes\n    const server = await registerRoutes(app);\n\n    const port = parseInt(process.env.PORT || \"5000\");\n\n    if (process.env.NODE_ENV === \"development\") {\n      await setupVite(app, server);\n    } else {\n      serveStatic(app);\n    }\n\n    server.listen(port, \"0.0.0.0\", () => {\n      console.log(`‚úÖ Server running on http://0.0.0.0:${port}`);\n    });\n  } catch (error) {\n    console.error(\"‚ùå Failed to start server:\", error);\n    process.exit(1);\n  }\n}\n\nstartServer();\n","size_bytes":2750},"server/init-db.ts":{"content":"import { testDatabaseConnection } from \"./db.js\";\nimport { storage } from \"./lib/storage.js\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL environment variable is required. Please create a PostgreSQL database in Replit.\",\n  );\n}\n\nexport async function initializeDatabase() {\n  try {\n    console.log(\"üîÑ Initializing database...\");\n\n    // Test database connection first\n    const isConnected = await testDatabaseConnection();\n    if (!isConnected) {\n      console.warn(\n        \"‚ö†Ô∏è Database connection failed. Running in offline mode with limited functionality.\",\n      );\n      return;\n    }\n\n    // Only initialize if database is connected\n    await storage.ensureDefaultAdmin();\n\n    // Initialize permissions\n    await storage.initializeDefaultPermissions();\n    \n    console.log(\"\\n\" + \"=\".repeat(60));\n    console.log(\"üîë SYSTEM LOGIN CREDENTIALS\");\n    console.log(\"=\".repeat(60));\n    console.log(\"üìß Super Admin: superadmin@bakesewa.com\");\n    console.log(\"üîê Password: superadmin123\");\n    console.log(\"---\");\n    console.log(\"üìß Admin: admin@bakesewa.com\");\n    console.log(\"üîê Password: admin123\");\n    console.log(\"---\");\n    console.log(\"üìß Manager: manager@bakesewa.com\");\n    console.log(\"üîê Password: manager123\");\n    console.log(\"---\");\n    console.log(\"üìß Staff: staff@bakesewa.com\");\n    console.log(\"üîê Password: staff123\");\n    console.log(\"=\".repeat(60));\n\n  } catch (error) {\n    console.error(\"‚ùå Database initialization failed:\", error);\n  }\n}\n\n// Run initialization if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  initializeDatabase().catch(console.error);\n}\n","size_bytes":1681},"server/init-units.ts":{"content":"import { db } from \"./db\";\nimport { units } from \"@shared/schema\";\n\nasync function initializeUnits() {\n  const defaultUnits = [\n    { name: \"Kilograms\", abbreviation: \"kg\", type: \"weight\" },\n    { name: \"Grams\", abbreviation: \"g\", type: \"weight\" },\n    { name: \"Pounds\", abbreviation: \"lbs\", type: \"weight\" },\n    { name: \"Liters\", abbreviation: \"L\", type: \"volume\" },\n    { name: \"Milliliters\", abbreviation: \"ml\", type: \"volume\" },\n    { name: \"Tablespoons\", abbreviation: \"tbsp\", type: \"volume\" },\n    { name: \"Teaspoons\", abbreviation: \"tsp\", type: \"volume\" },\n    { name: \"Pieces\", abbreviation: \"pcs\", type: \"count\" },\n    { name: \"Packets\", abbreviation: \"pkt\", type: \"count\" },\n    { name: \"Boxes\", abbreviation: \"box\", type: \"count\" },\n    { name: \"Bags\", abbreviation: \"bag\", type: \"count\" },\n  ];\n\n  try {\n    // Check if units already exist\n    const existingUnits = await db.select().from(units);\n    if (existingUnits.length > 0) {\n      return;\n    }\n\n    // Insert default units\n    await db.insert(units).values(defaultUnits);\n  } catch (error) {\n    console.error(\"‚ùå Error initializing units:\", error);\n    throw error;\n  }\n}\n\n// Run if this file is executed directly (ESM-safe check)\nif (import.meta.url === process.argv[1]) {\n  initializeUnits()\n    .then(() => process.exit(0))\n    .catch((error) => {\n      console.error(error);\n      process.exit(1);\n    });\n}\n\nexport { initializeUnits };\n","size_bytes":1415},"server/localAuth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./lib/storage\";\nimport bcrypt from \"bcrypt\";\nimport { db } from \"./db\";\nimport { loginLogs } from \"../shared/schema\";\n\n// Utility function to log login attempts\nasync function logLoginAttempt(userId: string, email: string, ipAddress: string, userAgent: string | undefined, status: 'success' | 'failed', location?: string) {\n  try {\n    const deviceType = userAgent ? detectDeviceType(userAgent) : 'Unknown';\n\n    await db.insert(loginLogs).values({\n      userId,\n      email,\n      ipAddress,\n      userAgent: userAgent || null,\n      status,\n      location: location || null,\n      deviceType,\n    });\n  } catch (error) {\n    console.error('Failed to log login attempt:', error);\n  }\n}\n\n// Simple device detection from user agent\nfunction detectDeviceType(userAgent: string): string {\n  if (userAgent.includes('Mobile')) return 'Mobile';\n  if (userAgent.includes('Tablet')) return 'Tablet';\n  if (userAgent.includes('Windows')) return 'Desktop - Windows';\n  if (userAgent.includes('Mac')) return 'Desktop - Mac';\n  if (userAgent.includes('Linux')) return 'Desktop - Linux';\n  return 'Unknown';\n}\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || \"bakery-management-secret-key-2024\",\n    store: sessionStore,\n    resave: true,\n    saveUninitialized: false,\n    rolling: true,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to false for development\n      maxAge: sessionTtl,\n      sameSite: 'lax'\n    },\n    name: 'bakery.sid'\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  try {\n    console.log(\"üîß Setting up authentication...\");\n\n    app.use(getSession());\n    app.use(passport.initialize());\n    app.use(passport.session());\n\n    // Configure local strategy\n    passport.use(new LocalStrategy({\n      usernameField: 'email',\n      passwordField: 'password',\n      passReqToCallback: true\n    }, async (req, email, password, done) => {\n      try {\n        const user = await storage.getUserByEmail(email);\n        if (!user) {\n          // Log failed login attempt\n          const clientIP = (Array.isArray(req.headers['x-forwarded-for']) \n                          ? req.headers['x-forwarded-for'][0] \n                          : req.headers['x-forwarded-for']?.split(',')[0]) ||\n                          req.headers['x-real-ip'] ||\n                          req.connection.remoteAddress ||\n                          req.socket.remoteAddress ||\n                          '127.0.0.1';\n          const userAgent = req.get('User-Agent') || '';\n          const location = clientIP === '127.0.0.1' || clientIP === '::1' ||\n                          clientIP.startsWith('192.168.') || clientIP.startsWith('10.') ||\n                          clientIP.startsWith('172.') ? 'Local Network' : 'External';\n\n          await logLoginAttempt('unknown', email, clientIP, userAgent, 'failed', location);\n\n          console.warn('üö® Failed Login Attempt:', {\n            email,\n            ip: clientIP,\n            userAgent: userAgent,\n            timestamp: new Date().toISOString(),\n          });\n\n          return done(null, false, { message: 'Invalid email or password' });\n        }\n\n        if (!user.password) {\n          // Log failed login attempt\n          const clientIP = (Array.isArray(req.headers['x-forwarded-for']) \n                          ? req.headers['x-forwarded-for'][0] \n                          : req.headers['x-forwarded-for']?.split(',')[0]) ||\n                          req.headers['x-real-ip'] ||\n                          req.connection.remoteAddress ||\n                          req.socket.remoteAddress ||\n                          '127.0.0.1';\n          const userAgent = req.get('User-Agent') || '';\n          const location = clientIP === '127.0.0.1' || clientIP === '::1' ||\n                          clientIP.startsWith('192.168.') || clientIP.startsWith('10.') ||\n                          clientIP.startsWith('172.') ? 'Local Network' : 'External';\n\n          await logLoginAttempt(user.id, email, clientIP, userAgent, 'failed', location);\n\n          console.warn('üö® Failed Login Attempt:', {\n            email,\n            ip: clientIP,\n            userAgent: userAgent,\n            timestamp: new Date().toISOString(),\n          });\n\n          return done(null, false, { message: 'Invalid email or password' });\n        }\n\n        const isValidPassword = await bcrypt.compare(password, user.password);\n        if (!isValidPassword) {\n          // Log failed login attempt\n          const clientIP = (Array.isArray(req.headers['x-forwarded-for']) \n                          ? req.headers['x-forwarded-for'][0] \n                          : req.headers['x-forwarded-for']?.split(',')[0]) ||\n                          req.headers['x-real-ip'] ||\n                          req.connection.remoteAddress ||\n                          req.socket.remoteAddress ||\n                          '127.0.0.1';\n          const userAgent = req.get('User-Agent') || '';\n          const location = clientIP === '127.0.0.1' || clientIP === '::1' ||\n                          clientIP.startsWith('192.168.') || clientIP.startsWith('10.') ||\n                          clientIP.startsWith('172.') ? 'Local Network' : 'External';\n\n          await logLoginAttempt(user.id, email, clientIP, userAgent, 'failed', location);\n\n          console.warn('üö® Failed Login Attempt:', {\n            email,\n            ip: clientIP,\n            userAgent: userAgent,\n            timestamp: new Date().toISOString(),\n          });\n\n          return done(null, false, { message: 'Invalid email or password' });\n        }\n\n        // Enhanced login logging with geolocation and device tracking\n        try {\n          const clientIP = (Array.isArray(req.headers['x-forwarded-for']) \n                          ? req.headers['x-forwarded-for'][0] \n                          : req.headers['x-forwarded-for']?.split(',')[0]) ||\n                          req.headers['x-real-ip'] ||\n                          req.connection.remoteAddress ||\n                          req.socket.remoteAddress ||\n                          '127.0.0.1';\n\n          // Enhanced device detection\n          const userAgent = req.get('User-Agent') || '';\n\n          // Basic geolocation (in production, use proper IP geolocation service)\n          const location = clientIP === '127.0.0.1' || clientIP === '::1' ||\n                          clientIP.startsWith('192.168.') || clientIP.startsWith('10.') ||\n                          clientIP.startsWith('172.') ? 'Local Network' : 'External';\n\n          await logLoginAttempt(user?.id || 'unknown', email, clientIP, userAgent, user ? 'success' : 'failed', location);\n\n          // Log security events for failed attempts\n          if (!user) {\n            console.warn('üö® Failed Login Attempt:', {\n              email,\n              ip: clientIP,\n              userAgent: userAgent,\n              timestamp: new Date().toISOString(),\n            });\n          }\n        } catch (logError) {\n          console.error('Failed to log login attempt:', logError);\n        }\n        return done(null, user);\n      } catch (error) {\n        console.error('‚ùå Login error:', error);\n        return done(error);\n      }\n    }));\n\n    // Serialize user for session\n    passport.serializeUser((user: any, done) => {\n      console.log('Serializing user:', user.id);\n      done(null, user.id);\n    });\n\n    // Deserialize user from session\n    passport.deserializeUser(async (id: string, done) => {\n      try {\n        console.log('Deserializing user ID:', id);\n        const user = await storage.getUserById(id);\n        if (user) {\n          console.log('User found:', user.email);\n          done(null, user);\n        } else {\n          console.log('User not found for ID:', id);\n          done(null, false);\n        }\n      } catch (error) {\n        console.error('Deserialization error:', error);\n        done(error);\n      }\n    });\n\n    // Login route\n    app.post(\"/api/auth/login\", (req, res, next) => {\n        console.log('Login attempt for:', req.body.email);\n        \n        passport.authenticate('local', (err: any, user: any, info: any) => {\n          if (err) {\n            console.error('Authentication error:', err);\n            return res.status(500).json({ message: 'Authentication failed' });\n          }\n          \n          if (!user) {\n            console.log('Authentication failed:', info?.message);\n            return res.status(401).json({ message: info?.message || 'Invalid credentials' });\n          }\n\n          // Log the user in\n          req.logIn(user, (err) => {\n            if (err) {\n              console.error('Login error:', err);\n              return res.status(500).json({ message: 'Login failed' });\n            }\n\n            console.log('User logged in successfully:', user.email);\n            \n            // Set session data\n            (req.session as any).userId = user.id;\n            (req.session as any).user = user;\n            \n            // Save session explicitly\n            req.session.save((err) => {\n              if (err) {\n                console.error('Session save error:', err);\n                return res.status(500).json({ message: 'Session creation failed' });\n              }\n              \n              console.log('Session saved successfully for user:', user.email);\n              \n              // Return user data (excluding password)\n              const { password: _, ...userWithoutPassword } = user;\n              res.json({ user: userWithoutPassword });\n            });\n          });\n        })(req, res, next);\n      });\n\n    // Logout route\n    app.post(\"/api/auth/logout\", async (req, res) => {\n        const user = req.user;\n        const clientIP = req.headers['x-forwarded-for']?.toString().split(',')[0] ||\n                        req.headers['x-real-ip']?.toString() ||\n                        req.connection.remoteAddress ||\n                        req.socket.remoteAddress ||\n                        '127.0.0.1';\n\n        try {\n          // Log logout before destroying session\n          if (user) {\n            await storage.logLogout((user as any).id, (user as any).email, `${(user as any).firstName || ''} ${(user as any).lastName || ''}`.trim(), clientIP);\n          }\n\n          req.logout((err) => {\n            if (err) {\n              console.error(\"Logout error:\", err);\n              return res.status(500).json({ message: \"Logout failed\" });\n            }\n            \n            req.session.destroy((err) => {\n              if (err) {\n                console.error(\"Session destroy error:\", err);\n                return res.status(500).json({ message: \"Logout failed\" });\n              }\n              \n              res.clearCookie('connect.sid');\n              res.json({ message: \"Logged out successfully\" });\n            });\n          });\n        } catch (error) {\n          console.error(\"Logout error:\", error);\n          res.status(500).json({ message: \"Logout failed\" });\n        }\n      });\n\n  } catch (error) {\n    console.error(\"‚ùå Authentication setup failed:\", error);\n    throw error;\n  }\n}\n\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  console.log('Checking authentication:', {\n    isAuthenticated: req.isAuthenticated(),\n    sessionID: req.sessionID,\n    userId: (req.session as any)?.userId,\n    user: req.user ? 'present' : 'absent'\n  });\n  \n  if (req.isAuthenticated() && req.user) {\n    return next();\n  }\n  \n  console.log('Authentication failed - redirecting to login');\n  res.status(401).json({ message: 'Authentication required' });\n};","size_bytes":12083},"server/notifications.ts":{"content":"export interface OrderNotification {\n  orderNumber: string;\n  customerName: string;\n  customerEmail: string;\n  customerPhone: string;\n  totalAmount: number;\n  deliveryDate: string;\n  itemCount: number;\n}\n\nexport interface LowStockNotification {\n  itemName: string;\n  currentStock: number;\n  minLevel: number;\n  unit: string;\n  supplier?: string;\n}\n\nexport interface ProductionNotification {\n  productName: string;\n  scheduledDate: string;\n  targetAmount: number;\n  unit: string;\n  priority: string;\n  assignedTo?: string;\n}\n\n// In-memory notification storage (in production, use database)\nconst notificationSubscriptions = new Map<string, any>();\nconst notificationSettings = new Map<string, any>();\n\nexport async function notifyNewPublicOrder(orderData: {\n  orderNumber: string;\n  orderId?: number;\n  customerName: string;\n  customerEmail: string;\n  customerPhone: string;\n  totalAmount: number;\n  deliveryDate: string;\n  itemCount: number;\n  attachmentCount?: number;\n  source?: string;\n  submissionTime?: string;\n}): Promise<void> {\n  try {\n    console.log(\"üìß Sending enhanced notifications for new public order:\", orderData.orderNumber);\n\n    // Enhanced notification details\n    const notificationData = {\n      orderNumber: orderData.orderNumber,\n      orderId: orderData.orderId,\n      customerName: orderData.customerName,\n      customerEmail: orderData.customerEmail,\n      customerPhone: orderData.customerPhone,\n      totalAmount: orderData.totalAmount,\n      deliveryDate: orderData.deliveryDate,\n      itemCount: orderData.itemCount,\n      attachmentCount: orderData.attachmentCount || 0,\n      source: orderData.source || 'Website',\n      submissionTime: orderData.submissionTime || new Date().toISOString(),\n      priority: orderData.totalAmount > 500 ? 'high' : 'medium',\n      requiresReview: orderData.attachmentCount > 0 || orderData.totalAmount > 1000\n    };\n\n    console.log(\"üö® NEW PUBLIC ORDER ALERT üö®\");\n    console.log(\"================================\");\n    console.log(`üìã Order: ${notificationData.orderNumber}`);\n    console.log(`üë§ Customer: ${notificationData.customerName}`);\n    console.log(`üìß Email: ${notificationData.customerEmail}`);\n    console.log(`üì± Phone: ${notificationData.customerPhone}`);\n    console.log(`üí∞ Total: $${notificationData.totalAmount}`);\n    console.log(`üõçÔ∏è Items: ${notificationData.itemCount}`);\n    console.log(`üìé Attachments: ${notificationData.attachmentCount}`);\n    console.log(`üöö Delivery: ${notificationData.deliveryDate}`);\n    console.log(`üåê Source: ${notificationData.source}`);\n    console.log(`‚è∞ Submitted: ${notificationData.submissionTime}`);\n    console.log(`‚ö° Priority: ${notificationData.priority.toUpperCase()}`);\n    if (notificationData.requiresReview) {\n      console.log(`‚ö†Ô∏è REQUIRES MANUAL REVIEW`);\n    }\n    console.log(\"================================\");\n\n    // In production, integrate with your notification services:\n    // - Email service (SendGrid, Mailgun, AWS SES)\n    // - SMS service (Twilio, AWS SNS)\n    // - Slack/Discord webhooks\n    // - Push notifications\n    // - WhatsApp Business API\n\n    // Simulate notification sending with different priorities\n    await new Promise(resolve => setTimeout(resolve, 100));\n\n    return Promise.resolve({\n      success: true,\n      notificationsSent: [\n        'email_to_admin',\n        'sms_to_manager',\n        'slack_to_sales_team',\n        'dashboard_notification'\n      ],\n      orderData: notificationData\n    });\n\n  } catch (error) {\n    console.error('Error sending order notifications:', error);\n  }\n}\n\nexport async function notifyLowStock(stockData: LowStockNotification): Promise<void> {\n  try {\n    console.log('‚ö†Ô∏è LOW STOCK ALERT');\n    console.log('==================');\n    console.log(`Item: ${stockData.itemName}`);\n    console.log(`Current Stock: ${stockData.currentStock} ${stockData.unit}`);\n    console.log(`Minimum Level: ${stockData.minLevel} ${stockData.unit}`);\n    console.log(`Supplier: ${stockData.supplier || 'Not specified'}`);\n    console.log('==================');\n\n    await sendBrowserNotification('low_stock', {\n      title: `Low Stock Alert: ${stockData.itemName}`,\n      message: `Only ${stockData.currentStock} ${stockData.unit} remaining (Min: ${stockData.minLevel})`,\n      icon: '‚ö†Ô∏è',\n      data: stockData\n    });\n\n  } catch (error) {\n    console.error('Error sending low stock notifications:', error);\n  }\n}\n\nexport async function notifyProductionSchedule(productionData: ProductionNotification): Promise<void> {\n  try {\n    console.log('üìÖ PRODUCTION SCHEDULE NOTIFICATION');\n    console.log('===================================');\n    console.log(`Product: ${productionData.productName}`);\n    console.log(`Scheduled: ${productionData.scheduledDate}`);\n    console.log(`Target: ${productionData.targetAmount} ${productionData.unit}`);\n    console.log(`Priority: ${productionData.priority}`);\n    console.log(`Assigned To: ${productionData.assignedTo || 'Unassigned'}`);\n    console.log('===================================');\n\n    await sendBrowserNotification('production_reminder', {\n      title: `Production Scheduled: ${productionData.productName}`,\n      message: `${productionData.targetAmount} ${productionData.unit} scheduled for ${new Date(productionData.scheduledDate).toLocaleDateString()}`,\n      icon: 'üè≠',\n      data: productionData\n    });\n\n  } catch (error) {\n    console.error('Error sending production notifications:', error);\n  }\n}\n\nasync function sendBrowserNotification(type: string, notification: any): Promise<void> {\n  try {\n    // Get all subscribed users with permission for this notification type\n    const recipients = await getNotificationRecipients();\n\n    for (const recipient of recipients) {\n      const subscription = notificationSubscriptions.get(recipient.id);\n      const settings = notificationSettings.get(recipient.id) || getDefaultSettings();\n\n      // Check if user has this notification type enabled\n      const typeEnabled = getNotificationTypeEnabled(settings, type);\n\n      if (subscription && typeEnabled) {\n        // In a real implementation, you would use web-push library here\n        console.log(`üì± Sending ${type} notification to user ${recipient.id}:`, notification.title);\n\n        // Simulate browser notification\n        if (typeof window !== 'undefined' && 'Notification' in window) {\n          new Notification(notification.title, {\n            body: notification.message,\n            icon: notification.icon,\n            data: notification.data\n          });\n        }\n      }\n    }\n  } catch (error) {\n    console.error('Error sending browser notifications:', error);\n  }\n}\n\nfunction getDefaultSettings() {\n  return {\n    low_stock: { enabled: true, dailyLimit: true },\n    new_order: { enabled: true, dailyLimit: false },\n    production_reminder: { enabled: true, dailyLimit: true }\n  };\n}\n\nfunction getNotificationTypeEnabled(settings: any, type: string): boolean {\n  return settings[type]?.enabled !== false;\n}\n\n// Function to get admin users for notifications\nexport async function getNotificationRecipients(): Promise<any[]> {\n  try {\n    // This would typically query the database for admin/manager users\n    // For now, return a mock list\n    return [\n      { id: 'admin_default', role: 'admin' },\n      { id: 'manager_default', role: 'manager' }\n    ];\n  } catch (error) {\n    console.error('Error getting notification recipients:', error);\n    return [];\n  }\n}\n\n// Storage functions for notification preferences\nexport function saveNotificationSubscription(userId: string, subscription: any): void {\n  notificationSubscriptions.set(userId, subscription);\n}\n\nexport function removeNotificationSubscription(userId: string): void {\n  notificationSubscriptions.delete(userId);\n}\n\nexport function saveNotificationSettings(userId: string, settings: any): void {\n  notificationSettings.set(userId, settings);\n}\n\nexport function getNotificationSettings(userId: string): any {\n  return notificationSettings.get(userId) || getDefaultSettings();\n}\n\n// Check for low stock items periodically\nexport async function checkLowStockItems(storage: any): Promise<void> {\n  try {\n    const lowStockItems = await storage.getLowStockItems();\n\n    for (const item of lowStockItems) {\n      await notifyLowStock({\n        itemName: item.name,\n        currentStock: parseFloat(item.currentStock || 0),\n        minLevel: parseFloat(item.minLevel || 0),\n        unit: item.unit,\n        supplier: item.supplier\n      });\n    }\n  } catch (error) {\n    console.error('Error checking low stock items:', error);\n  }\n}","size_bytes":8600},"server/permissionMiddleware.ts":{"content":"\nimport type { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"./lib/storage\";\n\ninterface AuthenticatedRequest extends Request {\n  user?: {\n    id: string;\n    email: string;\n    role: string;\n  };\n  filterSuperAdmin?: boolean;\n}\n\nexport function requirePermission(resource: string, action: 'read' | 'write' | 'read_write') {\n  return async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      // Super admin always has access to everything\n      if (req.user.role === 'super_admin') {\n        return next();\n      }\n\n      // Admin has access to most things but never to superadmin-related functionality\n      if (req.user.role === 'admin' && resource !== 'super_admin') {\n        return next();\n      }\n\n      const hasPermission = await storage.checkUserPermission(req.user.id, resource, action);\n      \n      if (!hasPermission) {\n        return res.status(403).json({ \n          message: \"Insufficient permissions\",\n          required: `${action} access to ${resource}` \n        });\n      }\n\n      next();\n    } catch (error) {\n      console.error(\"Permission check error:\", error);\n      res.status(500).json({ message: \"Permission check failed\" });\n    }\n  };\n}\n\nexport function requireRead(resource: string) {\n  return requirePermission(resource, 'read');\n}\n\nexport function requireWrite(resource: string) {\n  return requirePermission(resource, 'write');\n}\n\nexport function requireReadWrite(resource: string) {\n  return requirePermission(resource, 'read_write');\n}\n\nexport function requireSuperAdmin() {\n  return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    if (req.user.role !== 'super_admin') {\n      return res.status(403).json({ \n        message: \"Super admin access required\" \n      });\n    }\n\n    next();\n  };\n}\n\nexport function filterSuperAdminUsers() {\n  return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n    // Add a flag to indicate we need to filter superadmin users\n    req.filterSuperAdmin = req.user?.role !== 'super_admin';\n    next();\n  };\n}\n","size_bytes":2288},"server/rateLimiter.ts":{"content":"\n// Rate limiting utilities for enhanced security\nexport const rateLimitStore = new Map<string, number>();\n\nexport function rateLimitKey(ip: string, identifier?: string): string {\n  return identifier ? `${ip}:${identifier}` : ip;\n}\n\nexport function submissionStart(): number {\n  return Date.now();\n}\n\nexport function submissionTimestamp(): string {\n  return new Date().toISOString();\n}\n\nexport function clientIP(req: any): string {\n  return req.headers['x-forwarded-for']?.split(',')[0] || \n         req.headers['x-real-ip'] || \n         req.connection.remoteAddress || \n         req.socket.remoteAddress ||\n         '127.0.0.1';\n}\n\nexport function userAgent(req: any): string {\n  return req.get('User-Agent') || '';\n}\n\nexport function referenceId(): string {\n  return `REF-${Date.now()}-${Math.random().toString(36).substr(2, 5).toUpperCase()}`;\n}\n\nexport function formVersion(): string {\n  return '1.0';\n}\n\nexport function attachments(files: File[] = []): any[] {\n  return files.map(file => ({\n    name: file.name,\n    size: file.size,\n    type: file.type,\n    lastModified: file.lastModified\n  }));\n}\n\n// Rate limiting check\nexport function checkRateLimit(key: string, windowMs: number = 60000, maxRequests: number = 5): boolean {\n  const now = Date.now();\n  const windowStart = now - windowMs;\n  \n  // Clean old entries\n  for (const [k, timestamp] of rateLimitStore.entries()) {\n    if (timestamp < windowStart) {\n      rateLimitStore.delete(k);\n    }\n  }\n  \n  // Count requests in current window\n  let requestCount = 0;\n  for (const [k, timestamp] of rateLimitStore.entries()) {\n    if (k.startsWith(key) && timestamp >= windowStart) {\n      requestCount++;\n    }\n  }\n  \n  if (requestCount >= maxRequests) {\n    return false; // Rate limit exceeded\n  }\n  \n  rateLimitStore.set(`${key}:${now}`, now);\n  return true;\n}\n","size_bytes":1822},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport multer from \"multer\";\nimport bcrypt from \"bcrypt\";\nimport { eq, desc, count, sql, isNotNull, and } from \"drizzle-orm\";\n\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./lib/storage\";\nimport { securityMonitor } from \"./securityMonitor\";\nimport { alertService } from \"./alertService\";\nimport { setupAuth, isAuthenticated } from \"./localAuth\";\n\n// Enhanced rate limiting and sanitization utilities\nimport {\n  rateLimitStore,\n  rateLimitKey,\n  submissionStart,\n  submissionTimestamp,\n  clientIP,\n  userAgent,\n  referenceId,\n  formVersion,\n  attachments,\n  checkRateLimit,\n} from \"./rateLimiter\";\n\n// Input sanitization utility\nfunction sanitizeInput(input: string): string {\n  if (!input) return \"\";\n  return input\n    .replace(/<script[^>]*>.*?<\\/script>/gi, \"\")\n    .replace(/<[^>]*>/g, \"\")\n    .trim()\n    .substring(0, 1000); // Limit length\n}\n\n// Define authenticated request interface\ninterface AuthenticatedRequest extends Request {\n  user?: {\n    id: number;\n    email: string;\n    role: string;\n    firstName?: string;\n    lastName?: string;\n  };\n}\nimport {\n  insertCategorySchema,\n  insertProductSchema,\n  insertInventoryItemSchema,\n  insertOrderSchema,\n  insertProductionScheduleItemSchema,\n  insertCustomerSchema,\n  insertPartySchema,\n  insertAssetSchema,\n  insertExpenseSchema,\n  loginLogs,\n  ledgerTransactions,\n  auditLogs,\n  products,\n  productionSchedule,\n} from \"@shared/schema\";\nimport {\n  notifyNewPublicOrder,\n  getNotificationRecipients,\n} from \"./notifications\";\nimport { format } from \"date-fns\";\nimport { db } from \"./db\";\nimport {\n  requirePermission,\n  requireRead,\n  requireWrite,\n  requireReadWrite,\n  requireSuperAdmin,\n} from \"./permissionMiddleware\";\nimport { unitConverter } from \"./lib/unitConversion\";\n\n// Enhanced audit logging middleware with complete coverage\nconst auditLogger = (action: string, resource: string) => {\n  return async (req: any, res: any, next: any) => {\n    const startTime = Date.now();\n    const originalSend = res.send;\n    const originalJson = res.json;\n\n    let responseData: any;\n    let oldValues: any;\n    let errorMessage: string | null = null;\n\n    // Capture old values for updates\n    if (action === \"UPDATE\" && req.params.id) {\n      try {\n        const resourceId = parseInt(req.params.id);\n        switch (resource) {\n          case \"staff\":\n            oldValues = await storage.getStaffById(resourceId);\n            break;\n          case \"product\":\n            oldValues = await storage.getProductById(resourceId);\n            break;\n          case \"customer\":\n            oldValues = await storage.getCustomerById(resourceId);\n            break;\n          case \"party\":\n            oldValues = await storage.getPartyById(resourceId);\n            break;\n          case \"inventory\":\n            oldValues = await storage.getInventoryItemById(resourceId);\n            break;\n          case \"order\":\n            oldValues = await storage.getOrderById(resourceId);\n            break;\n          case \"asset\":\n            oldValues = await storage.getAssetById(resourceId);\n            break;\n          // Add more resources as needed\n        }\n      } catch (error) {\n        console.warn(\"Failed to capture old values for audit log:\", error);\n      }\n    }\n\n    // Override response methods to capture response data and errors\n    res.send = function (data: any) {\n      responseData = data;\n      if (res.statusCode >= 400) {\n        errorMessage =\n          typeof data === \"string\" ? data : data?.message || \"Unknown error\";\n      }\n      return originalSend.call(this, data);\n    };\n\n    res.json = function (data: any) {\n      responseData = data;\n      if (res.statusCode >= 400) {\n        errorMessage = data?.message || data?.error || \"Unknown error\";\n      }\n      return originalJson.call(this, data);\n    };\n\n    // Continue with the request\n    res.on(\"finish\", async () => {\n      try {\n        const endTime = Date.now();\n        const duration = endTime - startTime;\n\n        // Enhanced geolocation detection\n        const getLocationFromIP = (ip: string) => {\n          // Basic geolocation logic - in production, use a service like MaxMind GeoIP\n          if (\n            ip === \"127.0.0.1\" ||\n            ip === \"::1\" ||\n            ip.startsWith(\"192.168.\") ||\n            ip.startsWith(\"10.\") ||\n            ip.startsWith(\"172.\")\n          ) {\n            return \"Local Network\";\n          }\n          return \"External\"; // In production, integrate with IP geolocation service\n        };\n\n        // Extract device information from User-Agent\n        const getUserAgentInfo = (userAgent: string) => {\n          if (!userAgent)\n            return { browser: \"Unknown\", os: \"Unknown\", device: \"Unknown\" };\n\n          const browser = userAgent.includes(\"Chrome\")\n            ? \"Chrome\"\n            : userAgent.includes(\"Firefox\")\n              ? \"Firefox\"\n              : userAgent.includes(\"Safari\")\n                ? \"Safari\"\n                : userAgent.includes(\"Edge\")\n                  ? \"Edge\"\n                  : \"Other\";\n\n          const os = userAgent.includes(\"Windows\")\n            ? \"Windows\"\n            : userAgent.includes(\"Mac\")\n              ? \"macOS\"\n              : userAgent.includes(\"Linux\")\n                ? \"Linux\"\n                : userAgent.includes(\"Android\")\n                  ? \"Android\"\n                  : userAgent.includes(\"iOS\")\n                    ? \"iOS\"\n                    : \"Other\";\n\n          const device = userAgent.includes(\"Mobile\")\n            ? \"Mobile\"\n            : userAgent.includes(\"Tablet\")\n              ? \"Tablet\"\n              : \"Desktop\";\n\n          return { browser, os, device };\n        };\n\n        const clientIP =\n          req.headers[\"x-forwarded-for\"]?.split(\",\")[0] ||\n          req.headers[\"x-real-ip\"] ||\n          req.connection.remoteAddress ||\n          req.socket.remoteAddress ||\n          \"127.0.0.1\";\n\n        const userAgentInfo = getUserAgentInfo(req.get(\"User-Agent\"));\n        const location = getLocationFromIP(clientIP);\n\n        // Log all activities, including anonymous/failed attempts\n        const auditLogData = {\n          userId: req.user?.id || \"anonymous\",\n          userEmail: req.user?.email || \"anonymous\",\n          userName: req.user\n            ? `${req.user.firstName || \"\"} ${req.user.lastName || \"\"}`.trim() ||\n              \"Unknown User\"\n            : \"Anonymous\",\n          action,\n          resource,\n          resourceId:\n            req.params.id ||\n            (responseData?.id ? responseData.id.toString() : null),\n          details: {\n            method: req.method,\n            url: req.originalUrl,\n            body:\n              action !== \"READ\" && req.body\n                ? sanitizeBody(req.body)\n                : undefined,\n            query: req.query,\n            headers: {\n              \"user-agent\": req.get(\"User-Agent\"),\n              referer: req.get(\"Referer\"),\n              \"content-type\": req.get(\"Content-Type\"),\n            },\n            duration,\n            statusCode: res.statusCode,\n            browser: userAgentInfo.browser,\n            os: userAgentInfo.os,\n            device: userAgentInfo.device,\n            location,\n          },\n          oldValues: oldValues || null,\n          newValues:\n            action !== \"DELETE\" && res.statusCode < 400 ? responseData : null,\n          ipAddress: clientIP,\n          userAgent: req.get(\"User-Agent\") || null,\n          status: res.statusCode < 400 ? \"success\" : \"failed\",\n          errorMessage: errorMessage,\n        };\n\n        await storage.createAuditLog(auditLogData);\n\n        // Log critical security events separately\n        if (res.statusCode === 401 || res.statusCode === 403) {\n          console.warn(\"üö® Security Event:\", {\n            type: \"ACCESS_DENIED\",\n            user: req.user?.email || \"anonymous\",\n            ip: clientIP,\n            resource: `${req.method} ${req.originalUrl}`,\n            timestamp: new Date().toISOString(),\n          });\n        }\n      } catch (error) {\n        console.error(\"Failed to create audit log:\", error);\n      }\n    });\n\n    next();\n  };\n};\n\n// Sanitize request body to remove sensitive information\nconst sanitizeBody = (body: any) => {\n  if (!body || typeof body !== \"object\") return body;\n\n  const sanitized = { ...body };\n  const sensitiveFields = [\n    \"password\",\n    \"token\",\n    \"secret\",\n    \"key\",\n    \"authorization\",\n  ];\n\n  Object.keys(sanitized).forEach((key) => {\n    if (sensitiveFields.some((field) => key.toLowerCase().includes(field))) {\n      sanitized[key] = \"[REDACTED]\";\n    }\n  });\n\n  return sanitized;\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  console.log(\"üîß Setting up routes...\");\n\n  // Database test endpoint (remove in production)\n  app.get(\"/api/test/db\", async (req, res) => {\n    try {\n      console.log(\"üîç Testing database connection...\");\n\n      // Test database connection\n      const testUsers = await storage.getAllUsers();\n      console.log(\"‚úÖ Database connected. Found\", testUsers.length, \"users\");\n\n      // Ensure default users exist\n      await storage.ensureDefaultAdmin();\n\n      res.json({\n        success: true,\n        message: \"Database is working\",\n        userCount: testUsers.length,\n        users: testUsers.map((u) => ({\n          id: u.id,\n          email: u.email,\n          role: u.role,\n        })),\n      });\n    } catch (error) {\n      console.error(\"‚ùå Database test failed:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Database test failed\",\n        error: (error as Error).message,\n      });\n    }\n  });\n\n  // Auth routes\n  app.get(\"/api/auth/user\", isAuthenticated, async (req: any, res) => {\n    try {\n      console.log('Fetching user data for:', req.user?.email);\n      const user = req.user;\n      if (!user) {\n        return res.status(401).json({ message: \"User not found in session\" });\n      }\n      \n      // Return user without password\n      const { password: _, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Media management routes\n  app.get(\"/api/media\", isAuthenticated, async (req, res) => {\n    try {\n      const images = await storage.getMediaItems();\n      res.json(images);\n    } catch (error) {\n      console.error(\"Error fetching media:\", error);\n      res.status(500).json({ message: \"Failed to fetch media\" });\n    }\n  });\n\n  app.post(\"/api/media/upload\", isAuthenticated, async (req, res) => {\n    try {\n      if (!req.files || !req.files.image) {\n        return res.status(400).json({ message: \"No image file provided\" });\n      }\n\n      const file = Array.isArray(req.files.image)\n        ? req.files.image[0]\n        : req.files.image;\n\n      // Validate file type\n      if (!file.mimetype.startsWith(\"image/\")) {\n        return res.status(400).json({ message: \"File must be an image\" });\n      }\n\n      // Validate file size (5MB limit)\n      if (file.size > 5 * 1024 * 1024) {\n        return res\n          .status(400)\n          .json({ message: \"File size must be less than 5MB\" });\n      }\n\n      const mediaItem = await storage.uploadMedia(file, req.user.id);\n      res.json(mediaItem);\n    } catch (error) {\n      console.error(\"Error uploading media:\", error);\n      res.status(500).json({ message: \"Failed to upload image\" });\n    }\n  });\n\n  app.delete(\"/api/media/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = req.params.id;\n      await storage.deleteMedia(id);\n      res.json({ message: \"Image deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting media:\", error);\n      res.status(500).json({ message: \"Failed to delete image\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", isAuthenticated, async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Recent orders for dashboard\n  app.get(\"/api/dashboard/recent-orders\", isAuthenticated, async (req, res) => {\n    try {\n      const orders = await storage.getRecentOrders(5);\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching recent orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch recent orders\" });\n    }\n  });\n\n  // Today's production schedule\n  app.get(\n    \"/api/dashboard/production-schedule\",\n    isAuthenticated,\n    async (req, res) => {\n      try {\n        const schedule = await storage.getTodayProductionSchedule();\n        res.json(schedule);\n      } catch (error) {\n        console.error(\"Error fetching production schedule:\", error);\n        res\n          .status(500)\n          .json({ message: \"Failed to fetch production schedule\" });\n      }\n    },\n  );\n\n  // Get production schedule by date\n  app.get(\"/api/production-schedule\", isAuthenticated, async (req, res) => {\n    try {\n      const { date } = req.query;\n      let schedule;\n\n      if (date) {\n        schedule = await storage.getProductionScheduleByDate(date as string);\n      } else {\n        schedule = await storage.getProductionSchedule();\n      }\n\n      res.json(schedule);\n    } catch (error) {\n      console.error(\"Error fetching production schedule:\", error);\n      res.status(500).json({ message: \"Failed to fetch production schedule\" });\n    }\n  });\n\n  // Low stock items\n  app.get(\"/api/dashboard/low-stock\", isAuthenticated, async (req, res) => {\n    try {\n      const items = await storage.getLowStockItems();\n      res.json(items);\n    } catch (error) {\n      console.error(\"Error fetching low stock items:\", error);\n      res.status(500).json({ message: \"Failed to fetch low stock items\" });\n    }\n  });\n\n  // Categories\n  app.get(\"/api/categories\", isAuthenticated, async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post(\"/api/categories\", isAuthenticated, async (req, res) => {\n    try {\n      // Validate required fields\n      if (!req.body.name) {\n        return res.status(400).json({ message: \"Category name is required\" });\n      }\n\n      // Transform the data\n      const transformedData = {\n        name: req.body.name.trim(),\n        description: req.body.description ? req.body.description.trim() : null,\n      };\n\n      console.log(\"Creating category with data:\", transformedData);\n      const category = await storage.createCategory(transformedData);\n      console.log(\"Category created successfully:\", category);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error creating category:\", error);\n      res.status(500).json({\n        message: \"Failed to create category\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  });\n\n  // Products\n  app.get(\"/api/products\", isAuthenticated, async (req, res) => {\n    try {\n      const products = await storage.getProductsWithIngredients();\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const product = await storage.getProductById(id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      const ingredients = await storage.getProductIngredients(id);\n      res.json({ ...product, ingredients });\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", isAuthenticated, async (req, res) => {\n    try {\n      const { ingredients, ...productData } = req.body;\n\n      // Ensure required fields are present\n      if (!productData.name) {\n        return res.status(400).json({ message: \"Product name is required\" });\n      }\n\n      if (!productData.price || isNaN(parseFloat(productData.price))) {\n        return res.status(400).json({ message: \"Valid price is required\" });\n      }\n\n      if (!productData.cost || isNaN(parseFloat(productData.cost))) {\n        return res.status(400).json({ message: \"Valid cost is required\" });\n      }\n\n      if (!productData.margin || isNaN(parseFloat(productData.margin))) {\n        return res.status(400).json({ message: \"Valid margin is required\" });\n      }\n\n      // Transform the data\n      const transformedData = {\n        name: productData.name.trim(),\n        description: productData.description || null,\n        categoryId: productData.categoryId || null,\n        price: parseFloat(productData.price).toString(),\n        cost: parseFloat(productData.cost).toString(),\n        margin: parseFloat(productData.margin).toString(),\n        sku: productData.sku || null,\n        isActive: true,\n      };\n\n      console.log(\"Creating product with data:\", transformedData);\n\n      const product = await storage.createProduct(transformedData);\n\n      // Add ingredients if provided\n      if (ingredients && ingredients.length > 0) {\n        for (const ingredient of ingredients) {\n          await storage.createProductIngredient({\n            productId: product.id,\n            inventoryItemId: ingredient.inventoryItemId,\n            quantity: ingredient.quantity,\n          });\n        }\n      }\n\n      console.log(\"Product created successfully:\", product);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(500).json({\n        message: \"Failed to create product\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  });\n\n  app.put(\"/api/products/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { ingredients, ...productData } = req.body;\n\n      const product = await storage.updateProduct(id, productData);\n\n      // Update ingredients if provided\n      if (ingredients) {\n        await storage.deleteProductIngredients(id);\n        for (const ingredient of ingredients) {\n          await storage.createProductIngredient({\n            productId: id,\n            inventoryItemId: ingredient.inventoryItemId,\n            quantity: ingredient.quantity,\n          });\n        }\n      }\n\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteProduct(id);\n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Calculate product cost with unit conversions\n  app.get(\n    \"/api/products/:id/calculate-cost\",\n    isAuthenticated,\n    async (req, res) => {\n      try {\n        const productId = parseInt(req.params.id);\n        const costCalculation =\n          await unitConverter.calculateProductCost(productId);\n        res.json(costCalculation);\n      } catch (error) {\n        console.error(\"Error calculating product cost:\", error);\n        res.status(500).json({ message: \"Failed to calculate product cost\" });\n      }\n    },\n  );\n\n  // Update product cost automatically\n  app.post(\n    \"/api/products/:id/update-cost\",\n    isAuthenticated,\n    async (req, res) => {\n      try {\n        const productId = parseInt(req.params.id);\n        await unitConverter.updateProductCost(productId);\n        res.json({ message: \"Product cost updated successfully\" });\n      } catch (error) {\n        console.error(\"Error updating product cost:\", error);\n        res.status(500).json({ message: \"Failed to update product cost\" });\n      }\n    },\n  );\n\n  // Units\n  app.get(\"/api/units\", isAuthenticated, async (req, res) => {\n    try {\n      const units = await storage.getUnits();\n      // Ensure we always return an array with proper structure\n      const unitsArray = Array.isArray(units) ? units : [];\n      console.log(\"Fetched units:\", unitsArray.length, \"units\");\n\n      // Return consistent response format\n      res.json({\n        success: true,\n        data: unitsArray,\n        count: unitsArray.length,\n      });\n    } catch (error) {\n      console.error(\"Error fetching units:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Failed to fetch units\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        data: [],\n      });\n    }\n  });\n\n  app.post(\"/api/units\", isAuthenticated, async (req, res) => {\n    try {\n      if (!req.body.name?.trim()) {\n        return res.status(400).json({ message: \"Unit name is required\" });\n      }\n      if (!req.body.abbreviation?.trim()) {\n        return res\n          .status(400)\n          .json({ message: \"Unit abbreviation is required\" });\n      }\n      if (!req.body.type?.trim()) {\n        return res.status(400).json({ message: \"Unit type is required\" });\n      }\n\n      const transformedData = {\n        name: req.body.name.trim(),\n        abbreviation: req.body.abbreviation.trim(),\n        type: req.body.type.trim(),\n        isActive: true,\n      };\n\n      // Check if unit with same name or abbreviation already exists\n      const existingUnits = await storage.getUnits();\n      const duplicateName = existingUnits.find(\n        (unit: any) =>\n          unit.name.toLowerCase() === transformedData.name.toLowerCase(),\n      );\n      const duplicateAbbr = existingUnits.find(\n        (unit: any) =>\n          unit.abbreviation.toLowerCase() ===\n          transformedData.abbreviation.toLowerCase(),\n      );\n\n      if (duplicateName) {\n        return res.status(400).json({\n          message: `Unit name \"${transformedData.name}\" already exists`,\n        });\n      }\n      if (duplicateAbbr) {\n        return res.status(400).json({\n          message: `Unit abbreviation \"${transformedData.abbreviation}\" already exists`,\n        });\n      }\n\n      const unit = await storage.createUnit(transformedData);\n      console.log(\"Unit created successfully:\", unit);\n      res.status(201).json(unit);\n    } catch (error) {\n      console.error(\"Error creating unit:\", error);\n      if (\n        error.message?.includes(\"duplicate key\") ||\n        error.message?.includes(\"unique constraint\")\n      ) {\n        res.status(400).json({\n          message: \"A unit with this name or abbreviation already exists\",\n        });\n      } else {\n        res.status(500).json({\n          message: \"Failed to create unit\",\n          error: error instanceof Error ? error.message : \"Unknown error\",\n        });\n      }\n    }\n  });\n\n  app.put(\"/api/units/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n\n      // If only updating isActive status\n      if (\n        req.body.hasOwnProperty(\"isActive\") &&\n        Object.keys(req.body).length === 1\n      ) {\n        const transformedData = {\n          isActive: req.body.isActive,\n        };\n        const unit = await storage.updateUnit(id, transformedData);\n        res.json(unit);\n        return;\n      }\n\n      // Full unit update validation\n      if (!req.body.name) {\n        return res.status(400).json({ message: \"Unit name is required\" });\n      }\n      if (!req.body.abbreviation) {\n        return res\n          .status(400)\n          .json({ message: \"Unit abbreviation is required\" });\n      }\n      if (!req.body.type) {\n        return res.status(400).json({ message: \"Unit type is required\" });\n      }\n\n      const transformedData = {\n        name: req.body.name.trim(),\n        abbreviation: req.body.abbreviation.trim(),\n        type: req.body.type.trim(),\n        isActive: req.body.isActive !== undefined ? req.body.isActive : true,\n      };\n\n      const unit = await storage.updateUnit(id, transformedData);\n      res.json(unit);\n    } catch (error) {\n      console.error(\"Error updating unit:\", error);\n      res.status(500).json({ message: \"Failed to update unit\" });\n    }\n  });\n\n  app.delete(\"/api/units/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid unit ID\" });\n      }\n      \n      await storage.deleteUnit(id);\n      res.json({ message: \"Unit deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting unit:\", error);\n      \n      // Check if it's a foreign key constraint error\n      if (error instanceof Error && error.message.includes(\"Cannot delete unit: it is being used\")) {\n        return res.status(409).json({ \n          message: error.message,\n          type: \"FOREIGN_KEY_CONSTRAINT\"\n        });\n      }\n      \n      res.status(500).json({ \n        message: \"Failed to delete unit\",\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Inventory Categories\n  app.get(\"/api/inventory-categories\", isAuthenticated, async (req, res) => {\n    try {\n      const categories = await storage.getInventoryCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching inventory categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch inventory categories\" });\n    }\n  });\n\n  app.post(\"/api/inventory-categories\", isAuthenticated, async (req, res) => {\n    try {\n      if (!req.body.name) {\n        return res.status(400).json({ message: \"Category name is required\" });\n      }\n\n      const transformedData = {\n        name: req.body.name.trim(),\n        description: req.body.description ? req.body.description.trim() : null,\n      };\n\n      const category = await storage.createInventoryCategory(transformedData);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error creating inventory category:\", error);\n      res.status(500).json({ message: \"Failed to create inventory category\" });\n    }\n  });\n\n  app.put(\n    \"/api/inventory-categories/:id\",\n    isAuthenticated,\n    async (req, res) => {\n      try {\n        const id = parseInt(req.params.id);\n\n        if (!req.body.name) {\n          return res.status(400).json({ message: \"Category name is required\" });\n        }\n\n        const transformedData = {\n          name: req.body.name.trim(),\n          description: req.body.description\n            ? req.body.description.trim()\n            : null,\n        };\n\n        const category = await storage.updateInventoryCategory(\n          id,\n          transformedData,\n        );\n        res.json(category);\n      } catch (error) {\n        console.error(\"Error updating inventory category:\", error);\n        res\n          .status(500)\n          .json({ message: \"Failed to update inventory category\" });\n      }\n    },\n  );\n\n  app.delete(\n    \"/api/inventory-categories/:id\",\n    isAuthenticated,\n    async (req, res) => {\n      try {\n        const id = parseInt(req.params.id);\n        await storage.deleteInventoryCategory(id);\n        res.json({ message: \"Inventory category deleted successfully\" });\n      } catch (error) {\n        console.error(\"Error deleting inventory category:\", error);\n        res\n          .status(500)\n          .json({ message: \"Failed to delete inventory category\" });\n      }\n    },\n  );\n\n  // Unit Conversions\n  app.get(\"/api/unit-conversions\", isAuthenticated, async (req, res) => {\n    try {\n      const conversions = await storage.getUnitConversions();\n      res.json(conversions);\n    } catch (error) {\n      console.error(\"Error fetching unit conversions:\", error);\n      res.status(500).json({ message: \"Failed to fetch unit conversions\" });\n    }\n  });\n\n  app.post(\"/api/unit-conversions\", isAuthenticated, async (req, res) => {\n    try {\n      if (\n        !req.body.fromUnitId ||\n        !req.body.toUnitId ||\n        !req.body.conversionFactor\n      ) {\n        return res.status(400).json({\n          message: \"From unit, to unit, and conversion factor are required\",\n        });\n      }\n\n      const transformedData = {\n        fromUnitId: parseInt(req.body.fromUnitId),\n        toUnitId: parseInt(req.body.toUnitId),\n        conversionFactor: req.body.conversionFactor.toString(),\n        formula: req.body.formula || null,\n        isActive: true,\n      };\n\n      const conversion = await storage.createUnitConversion(transformedData);\n      res.json(conversion);\n    } catch (error) {\n      console.error(\"Error creating unit conversion:\", error);\n      res.status(500).json({\n        message: \"Failed to create unit conversion\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  });\n\n  app.put(\"/api/unit-conversions/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const transformedData = {\n        fromUnitId: parseInt(req.body.fromUnitId),\n        toUnitId: parseInt(req.body.toUnitId),\n        conversionFactor: req.body.conversionFactor.toString(),\n        formula: req.body.formula || null,\n        isActive: req.body.isActive ?? true,\n      };\n\n      const conversion = await storage.updateUnitConversion(\n        id,\n        transformedData,\n      );\n      res.json(conversion);\n    } catch (error) {\n      console.error(\"Error updating unit conversion:\", error);\n      res.status(500).json({ message: \"Failed to update unit conversion\" });\n    }\n  });\n\n  app.delete(\"/api/unit-conversions/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteUnitConversion(id);\n      res.json({ message: \"Unit conversion deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting unit conversion:\", error);\n      res.status(500).json({ message: \"Failed to delete unit conversion\" });\n    }\n  });\n\n  // Inventory\n  // Get inventory items with pagination\n  app.get(\"/api/inventory\", async (req, res) => {\n    try {\n      console.log(\"üì¶ Fetching inventory items with params:\", req.query);\n      \n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 50; // Increase default limit\n      const search = req.query.search as string || \"\";\n      const group = req.query.group as string || \"all\";\n\n      const result = await storage.getInventoryItems({\n        page,\n        limit,\n        search,\n        group,\n      });\n\n      console.log(`‚úÖ Returning ${result.items.length} items out of ${result.totalCount} total`);\n      res.json(result);\n    } catch (error) {\n      console.error(\"‚ùå Error fetching inventory items:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch inventory items\",\n        message: error.message,\n        items: [],\n        totalCount: 0,\n        totalPages: 0,\n        currentPage: 1,\n        itemsPerPage: 50\n      });\n    }\n  });\n\n  // Get all inventory items (for dropdowns, etc.)\n  app.get(\"/api/inventory/all\", async (req, res) => {\n    try {\n      const items = await storage.getAllInventoryItems();\n      res.json(items);\n    } catch (error) {\n      console.error(\"Error fetching all inventory items:\", error);\n      res.status(500).json({ error: \"Failed to fetch inventory items\" });\n    }\n  });\n\n  // Ingredients (filtered inventory items suitable for recipes)\n  app.get(\"/api/ingredients\", isAuthenticated, async (req, res) => {\n    try {\n      const ingredients = await storage.getIngredients();\n      res.json(ingredients);\n    } catch (error) {\n      console.error(\"Error fetching ingredients:\", error);\n      res.status(500).json({ message: \"Failed to fetch ingredients\" });\n    }\n  });\n\n  app.post(\"/api/inventory\", isAuthenticated, async (req, res) => {\n    try {\n      // Validate required fields\n      if (!req.body.name || !req.body.name.trim()) {\n        return res.status(400).json({ message: \"Item name is required\" });\n      }\n\n      if (!req.body.openingStock && !req.body.currentStock) {\n        return res\n          .status(400)\n          .json({ message: \"Valid opening stock is required\" });\n      }\n\n      if (!req.body.minLevel || isNaN(parseFloat(req.body.minLevel))) {\n        return res\n          .status(400)\n          .json({ message: \"Valid minimum level is required\" });\n      }\n\n      if (!req.body.unitId) {\n        return res.status(400).json({ message: \"Unit is required\" });\n      }\n\n      if (!req.body.costPerUnit || isNaN(parseFloat(req.body.costPerUnit))) {\n        return res\n          .status(400)\n          .json({ message: \"Valid cost per unit is required\" });\n      }\n\n      if (req.body.conversionRate && parseFloat(req.body.conversionRate) <= 0) {\n        return res\n          .status(400)\n          .json({ message: \"Conversion rate must be greater than 0\" });\n      }\n\n      // Get unit information for the item\n      const selectedUnit = await storage.getUnitById(parseInt(req.body.unitId));\n      if (!selectedUnit) {\n        return res.status(400).json({ message: \"Invalid unit selected\" });\n      }\n\n      // Generate inventory code if not provided\n      const invCode = req.body.invCode || `INV-${Date.now().toString().slice(-6)}`;\n\n      // Calculate stock values\n      const openingStock = parseFloat(req.body.openingStock || req.body.currentStock || 0);\n      const purchasedQuantity = parseFloat(req.body.purchasedQuantity || 0);\n      const consumedQuantity = parseFloat(req.body.consumedQuantity || 0);\n      const closingStock = req.body.closingStock ? parseFloat(req.body.closingStock) : openingStock + purchasedQuantity - consumedQuantity;\n\n      // Handle group field - convert string groups to proper categoryId or isIngredient flag\n      let categoryId = null;\n      let isIngredient = false;\n      \n      if (req.body.group) {\n        if (req.body.group === \"ingredients\") {\n          isIngredient = true;\n        } else if (!isNaN(parseInt(req.body.group))) {\n          categoryId = parseInt(req.body.group);\n        }\n      }\n      \n      if (req.body.categoryId && !isNaN(parseInt(req.body.categoryId))) {\n        categoryId = parseInt(req.body.categoryId);\n      }\n\n      // Transform the data - only allow specified fields\n      const transformedData = {\n        invCode: invCode,\n        name: req.body.name.trim(),\n        currentStock: closingStock.toString(),\n        openingStock: openingStock.toString(),\n        purchasedQuantity: purchasedQuantity.toString(),\n        consumedQuantity: consumedQuantity.toString(),\n        closingStock: closingStock.toString(),\n        minLevel: parseFloat(req.body.minLevel).toString(),\n        unit: selectedUnit.abbreviation,\n        unitId: parseInt(req.body.unitId),\n        secondaryUnitId: req.body.secondaryUnitId ? parseInt(req.body.secondaryUnitId) : null,\n        conversionRate: req.body.conversionRate ? parseFloat(req.body.conversionRate).toString() : null,\n        costPerUnit: parseFloat(req.body.costPerUnit).toString(),\n        supplier: req.body.supplier ? req.body.supplier.trim() : null,\n        categoryId: categoryId,\n        isIngredient: isIngredient || req.body.isIngredient || false,\n        notes: req.body.notes ? req.body.notes.trim() : null,\n        lastRestocked: new Date(),\n      };\n\n      console.log(\"Creating inventory item with data:\", transformedData);\n      const item = await storage.createInventoryItem(transformedData);\n      console.log(\"Inventory item created successfully:\", item);\n      res.json(item);\n    } catch (error) {\n      console.error(\"Error creating inventory item:\", error);\n\n      // Handle duplicate name error specifically\n      if (error.message?.includes(\"Item with this name already exists\")) {\n        return res.status(400).json({\n          message: error.message,\n          field: \"name\"\n        });\n      }\n\n      res.status(500).json({\n        message: \"Failed to create inventory item\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  });\n\n  // Sync stock levels from purchases\n  app.post(\"/api/inventory/sync-from-purchases\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.syncStockFromPurchases();\n      res.json({ message: \"Stock levels synced successfully\" });\n    } catch (error) {\n      console.error(\"Error syncing stock from purchases:\", error);\n      res.status(500).json({ message: \"Failed to sync stock levels\" });\n    }\n  });\n\n  // Get ingredients specifically\n  app.get(\"/api/ingredients/all\", isAuthenticated, async (req, res) => {\n    try {\n      const ingredients = await storage.getIngredients();\n      res.json(ingredients);\n    } catch (error) {\n      console.error(\"Error fetching ingredients:\", error);\n      res.status(500).json({ message: \"Failed to fetch ingredients\" });\n    }\n  });\n\n  app.put(\"/api/inventory/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      // Fetch the item to check stock levels before update\n      const item = await storage.getInventoryItemById(id);\n      if (!item) {\n        return res.status(404).json({ message: \"Inventory item not found\" });\n      }\n\n      const updateResult = await storage.updateInventoryItem(id, req.body);\n      const updatedItem = await storage.getInventoryItemById(id); // Re-fetch to get the latest data\n\n      // Check for low stock and trigger notification if needed\n      if (updatedItem) {\n        const newStock = parseFloat(updatedItem.currentStock);\n        const minLevel = parseFloat(updatedItem.minLevel || \"0\");\n        const criticalLevel = minLevel * 0.5; // Example: 50% of minLevel\n\n        if (newStock <= criticalLevel && newStock > 0) {\n          await storage.triggerBusinessNotification(\"critical_low_stock\", {\n            itemName: updatedItem.name,\n            currentStock: newStock,\n            minLevel: minLevel,\n            unit: updatedItem.unit,\n            criticalLevel: criticalLevel,\n          });\n        } else if (newStock <= minLevel && newStock > 0) {\n          await storage.triggerBusinessNotification(\"low_stock\", {\n            itemName: updatedItem.name,\n            currentStock: newStock,\n            minLevel: minLevel,\n            unit: updatedItem.unit,\n          });\n        } else if (newStock <= 0) {\n          await storage.triggerBusinessNotification(\"out_of_stock\", {\n            itemName: updatedItem.name,\n            currentStock: newStock,\n            unit: updatedItem.unit,\n          });\n        }\n      }\n\n      res.json(updateResult);\n    } catch (error) {\n      console.error(\"Error updating inventory item:\", error);\n      res.status(500).json({ message: \"Failed to update inventory item\" });\n    }\n  });\n\n  app.delete(\"/api/inventory/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteInventoryItem(id);\n      res.json({ message: \"Inventory item deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting inventory item:\", error);\n      res.status(500).json({ message: \"Failed to delete inventory item\" });\n    }\n  });\n\n  // Orders\n  app.get(\"/api/orders\", isAuthenticated, async (req, res) => {\n    try {\n      const orders = await storage.getOrders();\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.get(\"/api/orders/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const order = await storage.getOrderById(id);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      const items = await storage.getOrderItems(id);\n      res.json({ ...order, items });\n    } catch (error) {\n      console.error(\"Error fetching order:\", error);\n      res.status(500).json({ message: \"Failed to fetch order\" });\n    }\n  });\n\n  app.post(\"/api/orders\", isAuthenticated, async (req, res) => {\n    try {\n      const { items, ...orderData } = req.body;\n      const userId = req.user.id;\n\n      // Validate required fields\n      if (!orderData.customerName) {\n        return res.status(400).json({ message: \"Customer name is required\" });\n      }\n\n      if (!orderData.totalAmount || isNaN(parseFloat(orderData.totalAmount))) {\n        return res\n          .status(400)\n          .json({ message: \"Valid total amount is required\" });\n      }\n\n      if (!items || !Array.isArray(items) || items.length === 0) {\n        return res.status(400).json({ message: \"Order items are required\" });\n      }\n\n      // Generate order number\n      const orderNumber = `ORD-${Date.now()}`;\n\n      // Transform the data\n      const transformedData = {\n        orderNumber,\n        customerName: orderData.customerName.trim(),\n        customerEmail: orderData.customerEmail\n          ? orderData.customerEmail.trim()\n          : null,\n        customerPhone: orderData.customerPhone\n          ? orderData.customerPhone.trim()\n          : null,\n        status: orderData.status || \"pending\",\n        totalAmount: parseFloat(orderData.totalAmount).toString(),\n        paymentMethod: orderData.paymentMethod || \"cash\",\n        orderDate: orderData.orderDate\n          ? new Date(orderData.orderDate)\n          : new Date(),\n        dueDate: orderData.dueDate ? new Date(orderData.dueDate) : null,\n        notes: orderData.notes ? orderData.notes.trim() : null,\n        createdBy: userId,\n      };\n\n      console.log(\"Creating order with data:\", transformedData);\n      const order = await storage.createOrder(transformedData);\n\n      // Add order items with unit information\n      for (const item of items) {\n        if (!item.productId || !item.quantity || !item.unitPrice) {\n          throw new Error(\"Invalid order item data\");\n        }\n\n        // Get product details to fetch unit information\n        const product = await storage.getProductById(parseInt(item.productId));\n\n        await storage.createOrderItem({\n          orderId: order.id,\n          productId: parseInt(item.productId),\n          quantity: parseInt(item.quantity),\n          unit: product?.unit || item.unit || null,\n          unitId: product?.unitId || item.unitId || null,\n          unitPrice: parseFloat(item.unitPrice).toString(),\n          totalPrice: (\n            parseInt(item.quantity) * parseFloat(item.unitPrice)\n          ).toString(),\n        });\n      }\n\n      console.log(\"Order created successfully:\", order);\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error creating order:\", error);\n      res.status(500).json({\n        message: \"Failed to create order\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  });\n\n  app.put(\"/api/orders/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const order = await storage.updateOrder(id, req.body);\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error updating order:\", error);\n      res.status(500).json({ message: \"Failed to update order\" });\n    }\n  });\n\n  // Production schedule\n  app.get(\"/api/production\", isAuthenticated, async (req, res) => {\n    try {\n      const schedule = await storage.getProductionSchedule();\n      res.json(schedule);\n    } catch (error) {\n      console.error(\"Error fetching production schedule:\", error);\n      res.status(500).json({ message: \"Failed to fetch production schedule\" });\n    }\n  });\n\n  app.post(\"/api/production\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n\n      // Validate required fields\n      if (!req.body.productId) {\n        return res.status(400).json({ message: \"Product is required\" });\n      }\n\n      if (!req.body.quantity || isNaN(parseInt(req.body.quantity))) {\n        return res.status(400).json({ message: \"Valid quantity is required\" });\n      }\n\n      if (!req.body.scheduledDate) {\n        return res.status(400).json({ message: \"Scheduled date is required\" });\n      }\n\n      // Transform the data\n      const transformedData = {\n        productId: parseInt(req.body.productId),\n        quantity: parseInt(req.body.quantity),\n        scheduledDate: new Date(req.body.scheduledDate),\n        startTime: req.body.startTime ? new Date(req.body.startTime) : null,\n        endTime: req.body.endTime ? new Date(req.body.endTime) : null,\n        status: req.body.status || \"scheduled\",\n        assignedTo: req.body.assignedTo || userId,\n        notes: req.body.notes ? req.body.notes.trim() : null,\n      };\n\n      console.log(\n        \"Creating production schedule item with data:\",\n        transformedData,\n      );\n      const item = await storage.createProductionScheduleItem(transformedData);\n      console.log(\"Production schedule item created successfully:\", item);\n      res.json(item);\n    } catch (error) {\n      console.error(\"Error creating production schedule item:\", error);\n      res.status(500).json({\n        message: \"Failed to create production schedule item\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  });\n\n  app.put(\"/api/production/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const item = await storage.updateProductionScheduleItem(id, req.body);\n      res.json(item);\n    } catch (error) {\n      console.error(\"Error updating production schedule item:\", error);\n      res\n        .status(500)\n        .json({ message: \"Failed to update production schedule item\" });\n    }\n  });\n\n  // Analytics\n  app.get(\"/api/analytics/sales\", isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const start = startDate ? new Date(startDate as string) : undefined;\n      const end = endDate ? new Date(endDate as string) : undefined;\n\n      const analytics = await storage.getSalesAnalytics(start, end);\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching sales analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch sales analytics\" });\n    }\n  });\n\n  // Customer routes\n  app.get(\"/api/customers\", isAuthenticated, async (req, res) => {\n    try {\n      const customers = await storage.getCustomers();\n      res.json(customers);\n    } catch (error) {\n      console.error(\"Error fetching customers:\", error);\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  app.post(\"/api/customers\", isAuthenticated, async (req, res) => {\n    try {\n      // Validate required fields\n      if (!req.body.name || !req.body.name.trim()) {\n        return res.status(400).json({\n          message: \"Customer name is required\",\n          errors: { name: \"Customer name is required\" },\n        });\n      }\n\n      // Transform the data with proper field mapping\n      const transformedData = {\n        name: req.body.name.trim(),\n        email: req.body.email ? req.body.email.trim() : null,\n        phone: req.body.phone ? req.body.phone.trim() : null,\n        address: req.body.address ? req.body.address.trim() : null,\n        openingBalance:\n          req.body.openingBalance && !isNaN(parseFloat(req.body.openingBalance))\n            ? parseFloat(req.body.openingBalance).toString()\n            : \"0.00\",\n        currentBalance:\n          req.body.openingBalance && !isNaN(parseFloat(req.body.openingBalance))\n            ? parseFloat(req.body.openingBalance).toString()\n            : \"0.00\",\n        totalOrders: 0,\n        totalSpent: \"0.00\",\n        isActive: req.body.isActive !== undefined ? req.body.isActive : true,\n      };\n\n      console.log(\"Creating customer with data:\", transformedData);\n      const customer = await storage.createCustomer(transformedData);\n      console.log(\"Customer created successfully:\", customer);\n      res.status(201).json(customer);\n    } catch (error) {\n      console.error(\"Error creating customer:\", error);\n\n      // Handle specific database errors\n      if (\n        error.message?.includes(\"duplicate key\") ||\n        error.message?.includes(\"unique constraint\")\n      ) {\n        res.status(400).json({\n          message: \"A customer with this name or email already exists\",\n          error: \"Duplicate entry\",\n        });\n      } else if (error.message?.includes(\"not null constraint\")) {\n        res.status(400).json({\n          message: \"Required fields are missing\",\n          error: error.message,\n        });\n      } else {\n        res.status(500).json({\n          message: \"Failed to create customer\",\n          error: error instanceof Error ? error.message : \"Unknown error\",\n        });\n      }\n    }\n  });\n\n  app.put(\"/api/customers/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const customer = await storage.updateCustomer(id, req.body);\n      res.json(customer);\n    } catch (error) {\n      console.error(\"Error updating customer:\", error);\n      res.status(500).json({ message: \"Failed to update customer\" });\n    }\n  });\n\n  app.delete(\"/api/customers/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteCustomer(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting customer:\", error);\n      res.status(500).json({ message: \"Failed to delete customer\" });\n    }\n  });\n\n  // Party routes\n  app.get(\"/api/parties\", isAuthenticated, async (req, res) => {\n    try {\n      const parties = await storage.getParties();\n      res.json(parties);\n    } catch (error) {\n      console.error(\"Error fetching parties:\", error);\n      res.status(500).json({ message: \"Failed to fetch parties\" });\n    }\n  });\n\n  app.post(\"/api/parties\", isAuthenticated, async (req, res) => {\n    try {\n      // Validate required fields\n      if (!req.body.name || !req.body.name.trim()) {\n        return res.status(400).json({\n          message: \"Party name is required\",\n          errors: { name: \"Party name is required\" },\n        });\n      }\n\n      if (!req.body.type || !req.body.type.trim()) {\n        return res.status(400).json({\n          message: \"Party type is required\",\n          errors: { type: \"Party type is required\" },\n        });\n      }\n\n      // Transform the data with proper field mapping\n      const transformedData = {\n        name: req.body.name.trim(),\n        type: req.body.type.trim(),\n        contactPerson: req.body.contactPerson\n          ? req.body.contactPerson.trim()\n          : null,\n        email: req.body.email ? req.body.email.trim() : null,\n        phone: req.body.phone ? req.body.phone.trim() : null,\n        address: req.body.address ? req.body.address.trim() : null,\n        taxId: req.body.taxId ? req.body.taxId.trim() : null,\n        notes: req.body.notes ? req.body.notes.trim() : null,\n        openingBalance:\n          req.body.openingBalance && !isNaN(parseFloat(req.body.openingBalance))\n            ? parseFloat(req.body.openingBalance).toString()\n            : \"0.00\",\n        currentBalance:\n          req.body.openingBalance && !isNaN(parseFloat(req.body.openingBalance))\n            ? parseFloat(req.body.openingBalance).toString()\n            : \"0.00\",\n        isActive: req.body.isActive !== undefined ? req.body.isActive : true,\n      };\n\n      console.log(\"Creating party with data:\", transformedData);\n      const party = await storage.createParty(transformedData);\n      console.log(\"Party created successfully:\", party);\n      res.status(201).json(party);\n    } catch (error) {\n      console.error(\"Error creating party:\", error);\n\n      // Handle specific database errors\n      if (\n        error.message?.includes(\"duplicate key\") ||\n        error.message?.includes(\"unique constraint\")\n      ) {\n        res.status(400).json({\n          message: \"A party with this name already exists\",\n          error: \"Duplicate entry\",\n        });\n      } else if (error.message?.includes(\"not null constraint\")) {\n        res.status(400).json({\n          message: \"Required fields are missing\",\n          error: error.message,\n        });\n      } else {\n        res.status(500).json({\n          message: \"Failed to create party\",\n          error: error instanceof Error ? error.message : \"Unknown error\",\n        });\n      }\n    }\n  });\n\n  app.put(\"/api/parties/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const party = await storage.updateParty(id, req.body);\n      res.json(party);\n    } catch (error) {\n      console.error(\"Error updating party:\", error);\n      res.status(500).json({ message: \"Failed to update party\" });\n    }\n  });\n\n  app.delete(\"/api/parties/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteParty(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting party:\", error);\n      res.status(500).json({ message: \"Failed to delete party\" });\n    }\n  });\n\n  // Ledger Transaction Routes\n  app.get(\n    \"/api/ledger/:entityType/:entityId\",\n    isAuthenticated,\n    async (req, res) => {\n      try {\n        const { entityType, entityId } = req.params;\n\n        if (![\"customer\", \"party\"].includes(entityType)) {\n          return res.status(400).json({ message: \"Invalid entity type\" });\n        }\n\n        const transactions = await storage.getLedgerTransactions(\n          parseInt(entityId),\n          entityType as \"customer\" | \"party\",\n        );\n        res.json(transactions);\n      } catch (error) {\n        console.error(\"Error fetching ledger transactions:\", error);\n        res\n          .status(500)\n          .json({ message: \"Failed to fetch ledger transactions\" });\n      }\n    },\n  );\n\n  // Customer ledger endpoint for compatibility\n  app.get(\"/api/ledger/customer/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const entityId = parseInt(req.params.id);\n      const transactions = await storage.getLedgerTransactions(\n        entityId,\n        \"customer\",\n      );\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching customer ledger:\", error);\n      res.status(500).json({ message: \"Failed to fetch customer ledger\" });\n    }\n  });\n\n  // Party ledger endpoint for compatibility\n  app.get(\"/api/ledger/party/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const entityId = parseInt(req.params.id);\n      const transactions = await storage.getLedgerTransactions(\n        entityId,\n        \"party\",\n      );\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching party ledger:\", error);\n      res.status(500).json({ message: \"Failed to fetch party ledger\" });\n    }\n  });\n\n  app.post(\"/api/ledger\", isAuthenticated, async (req: any, res) => {\n    try {\n      const {\n        customerOrPartyId,\n        entityType,\n        transactionDate,\n        description,\n        referenceNumber,\n        debitAmount,\n        creditAmount,\n        transactionType,\n        paymentMethod,\n        notes,\n      } = req.body;\n\n      if (![\"customer\", \"party\"].includes(entityType)) {\n        return res.status(400).json({ message: \"Invalid entity type\" });\n      }\n\n      // Calculate running balance\n      const currentTransactions = await storage.getLedgerTransactions(\n        customerOrPartyId,\n        entityType,\n      );\n\n      const lastBalance =\n        currentTransactions.length > 0\n          ? parseFloat(\n              currentTransactions[currentTransactions.length - 1]\n                .runningBalance,\n            )\n          : 0;\n\n      const debit = parseFloat(debitAmount || \"0\");\n      const credit = parseFloat(creditAmount || \"0\");\n      const runningBalance = lastBalance + debit - credit;\n\n      const transactionData = {\n        customerOrPartyId,\n        entityType,\n        transactionDate: new Date(transactionDate),\n        description,\n        referenceNumber,\n        debitAmount: debit.toString(),\n        creditAmount: credit.toString(),\n        runningBalance: runningBalance.toString(),\n        transactionType,\n        paymentMethod,\n        notes,\n        createdBy: req.user?.id,\n      };\n\n      const transaction =\n        await storage.createLedgerTransaction(transactionData);\n\n      // Update entity's current balance\n      await storage.recalculateRunningBalance(customerOrPartyId, entityType);\n\n      res.json(transaction);\n    } catch (error) {\n      console.error(\"Error creating ledger transaction:\", error);\n      res.status(500).json({ message: \"Failed to create ledger transaction\" });\n    }\n  });\n\n  app.put(\"/api/ledger/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updateData = req.body;\n\n      const transaction = await storage.updateLedgerTransaction(id, updateData);\n\n      // Recalculate running balances for affected entity\n      if (transaction.length > 0) {\n        await storage.recalculateRunningBalance(\n          transaction[0].customerOrPartyId,\n          transaction[0].entityType as \"customer\" | \"party\",\n        );\n      }\n\n      res.json(transaction);\n    } catch (error) {\n      console.error(\"Error updating ledger transaction:\", error);\n      res.status(500).json({ message: \"Failed to update ledger transaction\" });\n    }\n  });\n\n  app.delete(\"/api/ledger/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n\n      // Get transaction details before deletion\n      const transactionToDelete = await db\n        .select()\n        .from(ledgerTransactions)\n        .where(eq(ledgerTransactions.id, id))\n        .limit(1);\n\n      if (transactionToDelete.length === 0) {\n        return res.status(404).json({ message: \"Transaction not found\" });\n      }\n\n      await storage.deleteLedgerTransaction(id);\n\n      // Recalculate running balances\n      await storage.recalculateRunningBalance(\n        transactionToDelete[0].customerOrPartyId,\n        transactionToDelete[0].entityType as \"customer\" | \"party\",\n      );\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting ledger transaction:\", error);\n      res.status(500).json({ message: \"Failed to delete ledger transaction\" });\n    }\n  });\n\n  // Assets\n  app.get(\"/api/assets\", isAuthenticated, async (req, res) => {\n    try {\n      const assets = await storage.getAssets();\n      res.json(assets);\n    } catch (error) {\n      console.error(\"Error fetching assets:\", error);\n      res.status(500).json({ message: \"Failed to fetch assets\" });\n    }\n  });\n\n  app.post(\"/api/assets\", isAuthenticated, async (req, res) => {\n    try {\n      const {\n        name,\n        category,\n        description,\n        location,\n        condition,\n        purchaseDate,\n        purchasePrice,\n        currentValue,\n      } = req.body;\n\n      if (!name || !category) {\n        return res\n          .status(400)\n          .json({ message: \"Name and category are required\" });\n      }\n\n      const assetData = {\n        name: name.trim(),\n        category: category.trim(),\n        description: description?.trim() || null,\n        location: location?.trim() || null,\n        condition: condition || \"good\",\n        purchaseDate: purchaseDate ? new Date(purchaseDate) : null,\n        purchasePrice: purchasePrice ? purchasePrice.toString() : null,\n        currentValue: currentValue ? currentValue.toString() : null,\n        isActive: true,\n      };\n\n      console.log(\"Creating asset with data:\", assetData);\n      const asset = await storage.createAsset(assetData);\n      console.log(\"Asset created successfully:\", asset);\n      res.json(asset);\n    } catch (error) {\n      console.error(\"Error creating asset:\", error);\n      res.status(500).json({\n        message: \"Failed to create asset\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  });\n\n  app.put(\"/api/assets/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const {\n        name,\n        category,\n        description,\n        location,\n        condition,\n        purchaseDate,\n        purchasePrice,\n        currentValue,\n      } = req.body;\n\n      const assetData = {\n        name: name?.trim(),\n        category: category?.trim(),\n        description: description?.trim() || null,\n        location: location?.trim() || null,\n        condition: condition || \"good\",\n        purchaseDate: purchaseDate ? new Date(purchaseDate) : null,\n        purchasePrice: purchasePrice ? purchasePrice.toString() : null,\n        currentValue: currentValue ? currentValue.toString() : null,\n      };\n\n      const asset = await storage.updateAsset(id, assetData);\n      res.json(asset);\n    } catch (error) {\n      console.error(\"Error updating asset:\", error);\n      res.status(500).json({ message: \"Failed to update asset\" });\n    }\n  });\n\n  app.delete(\"/api/assets/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteAsset(id);\n      res.json({ message: \"Asset deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting asset:\", error);\n      res.status(500).json({ message: \"Failed to delete asset\" });\n    }\n  });\n\n  // Bills\n  app.get(\"/api/bills\", isAuthenticated, async (req, res) => {\n    try {\n      const bills = await storage.getBills();\n      res.json(bills);\n    } catch (error) {\n      console.error(\"Error fetching bills:\", error);\n      res.status(500).json({ message: \"Failed to fetch bills\" });\n    }\n  });\n\n  app.post(\"/api/bills\", isAuthenticated, async (req, res) => {\n    try {\n      const bill = await storage.createBill(req.body);\n      res.json(bill);\n    } catch (error) {\n      console.error(\"Error creating bill:\", error);\n      res.status(500).json({ message: \"Failed to create bill\" });\n    }\n  });\n\n  app.delete(\"/api/bills/:id\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteBill(parseInt(req.params.id));\n      res.json({ message: \"Bill deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting bill:\", error);\n      res.status(500).json({ message: \"Failed to delete bill\" });\n    }\n  });\n\n  // Settings\n  app.get(\"/api/settings\", isAuthenticated, async (req, res) => {\n    try {\n      const settings = await storage.getSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.put(\"/api/settings\", isAuthenticated, async (req, res) => {\n    try {\n      console.log(\"Updating settings with data:\", req.body);\n\n      // Handle theme color specifically\n      if (req.body.themeColor) {\n        await storage.updateOrCreateSetting(\"themeColor\", req.body.themeColor);\n      }\n\n      // Handle other settings\n      const settings = await storage.updateSettings(req.body);\n      console.log(\"Updated settings:\", settings);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error updating settings:\", error);\n      res.status(500).json({ message: \"Failed to update settings\" });\n    }\n  });\n\n  // Expense routes\n  app.get(\"/api/expenses\", isAuthenticated, async (req, res) => {\n    try {\n      const expenses = await storage.getExpenses();\n      res.json(expenses);\n    } catch (error) {\n      console.error(\"Error fetching expenses:\", error);\n      res.status(500).json({ message: \"Failed to fetch expenses\" });\n    }\n  });\n\n  app.post(\"/api/expenses\", isAuthenticated, async (req, res) => {\n    try {\n      const { description, amount, category, date } = req.body;\n\n      if (!description || !description.trim()) {\n        return res\n          .status(400)\n          .json({ message: \"Expense description is required\" });\n      }\n\n      if (!amount || isNaN(parseFloat(amount))) {\n        return res.status(400).json({ message: \"Valid amount is required\" });\n      }\n\n      if (!category) {\n        return res.status(400).json({ message: \"Category is required\" });\n      }\n\n      const expenseData = {\n        description: description.trim(),\n        amount: parseFloat(amount).toString(),\n        category,\n        date: date ? new Date(date) : new Date(),\n      };\n\n      console.log(\"Creating expense with data:\", expenseData);\n      const expense = await storage.createExpense(expenseData);\n      console.log(\"Expense created successfully:\", expense);\n      res.json(expense);\n    } catch (error) {\n      console.error(\"Error creating expense:\", error);\n      res.status(500).json({\n        message: \"Failed to create expense\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  });\n\n  app.put(\"/api/expenses/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { description, amount, category, date } = req.body;\n\n      if (!description || !description.trim()) {\n        return res\n          .status(400)\n          .json({ message: \"Expense description is required\" });\n      }\n\n      if (!amount || isNaN(parseFloat(amount))) {\n        return res.status(400).json({ message: \"Valid amount is required\" });\n      }\n\n      const expenseData = {\n        description: description.trim(),\n        amount: parseFloat(amount).toString(),\n        category,\n        date: date ? new Date(date) : new Date(),\n      };\n\n      const expense = await storage.updateExpense(id, expenseData);\n      res.json(expense);\n    } catch (error) {\n      console.error(\"Error updating expense:\", error);\n      res.status(500).json({ message: \"Failed to update expense\" });\n    }\n  });\n\n  app.delete(\"/api/expenses/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteExpense(id);\n      res.json({ message: \"Expense deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting expense:\", error);\n      res.status(500).json({ message: \"Failed to delete expense\" });\n    }\n  });\n\n  // Admin user management routes\n  const isAdmin = (req: any, res: any, next: any) => {\n    console.log(\"Checking admin access for user:\", req.user);\n    if (\n      req.user &&\n      (req.user.role === \"admin\" || req.user.role === \"super_admin\")\n    ) {\n      return next();\n    }\n    console.log(\"Access denied - user role:\", req.user?.role);\n    res.status(403).json({ message: \"Access denied. Admin role required.\" });\n  };\n\n  const isSuperAdmin = (req: any, res: any, next: any) => {\n    console.log(\"Checking superadmin access for user:\", req.user);\n    if (req.user && req.user.role === \"super_admin\") {\n      return next();\n    }\n    console.log(\"Access denied - user role:\", req.user?.role);\n    res\n      .status(403)\n      .json({ message: \"Access denied. Super Admin role required.\" });\n  };\n\n  app.get(\n    \"/api/admin/users\",\n    isAuthenticated,\n    isAdmin,\n    auditLogger(\"READ\", \"users\"),\n    async (req: any, res) => {\n      try {\n        // Filter superadmin users if the requester is not a superadmin\n        const excludeSuperAdmin = req.user?.role !== 'super_admin';\n        const users = await storage.getAllUsers(excludeSuperAdmin);\n        res.json(users);\n      } catch (error) {\n        console.error(\"Error fetching users:\", error);\n        res.status(500).json({ message: \"Failed to fetch users\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/admin/users\",\n    isAuthenticated,\n    isAdmin,\n    auditLogger(\"CREATE\", \"users\"),\n    async (req: any, res) => {\n      try {\n        const { email, password, firstName, lastName, role } = req.body;\n\n        if (!email || !password) {\n          return res\n            .status(400)\n            .json({ message: \"Email and password are required\" });\n        }\n\n        // Prevent non-superadmin from creating superadmin users\n        if (role === 'super_admin' && req.user?.role !== 'super_admin') {\n          return res.status(403).json({ \n            message: \"Cannot create superadmin users\" \n          });\n        }\n\n        // Check if user already exists\n        const existingUser = await storage.getUserByEmail(email);\n        if (existingUser) {\n          return res.status(400).json({ message: \"User already exists\" });\n        }\n\n        // Hash password\n        const hashedPassword = await bcrypt.hash(password, 10);\n\n        // Create user\n        const user = await storage.upsertUser({\n          id: `user_${Date.now()}`,\n          email,\n          password: hashedPassword,\n          firstName,\n          lastName,\n          role: role || \"staff\",\n        });\n\n        res.json(user);\n      } catch (error) {\n        console.error(\"Error creating user:\", error);\n        res.status(500).json({ message: \"Failed to create user\" });\n      }\n    },\n  );\n\n  app.put(\n    \"/api/admin/users/:id\",\n    isAuthenticated,\n    isAdmin,\n    auditLogger(\"UPDATE\", \"users\"),\n    async (req: any, res) => {\n      try {\n        const { id } = req.params;\n        const { email, password, firstName, lastName, role } = req.body;\n\n        // Check if the user being updated is a superadmin and requester is not superadmin\n        const targetUser = await storage.getUser(id);\n        if (targetUser?.role === 'super_admin' && req.user?.role !== 'super_admin') {\n          return res.status(403).json({ \n            message: \"Cannot modify superadmin users\" \n          });\n        }\n\n        // Prevent non-superadmin from creating new superadmin users\n        if (role === 'super_admin' && req.user?.role !== 'super_admin') {\n          return res.status(403).json({ \n            message: \"Cannot assign superadmin role\" \n          });\n        }\n\n        const updateData: any = {\n          email,\n          firstName,\n          lastName,\n          role,\n        };\n\n        // Only update password if provided\n        if (password) {\n          updateData.password = await bcrypt.hash(password, 10);\n        }\n\n        const user = await storage.updateUser(id, updateData);\n        res.json(user);\n      } catch (error) {\n        console.error(\"Error updating user:\", error);\n        res.status(500).json({ message: \"Failed to update user\" });\n      }\n    },\n  );\n\n  app.delete(\n    \"/api/admin/users/:id\",\n    isAuthenticated,\n    isAdmin,\n    auditLogger(\"DELETE\", \"users\"),\n    async (req: any, res) => {\n      try {\n        const { id } = req.params;\n\n        // Check if the user being deleted is a superadmin and requester is not superadmin\n        const targetUser = await storage.getUser(id);\n        if (targetUser?.role === 'super_admin' && req.user?.role !== 'super_admin') {\n          return res.status(403).json({ \n            message: \"Cannot delete superadmin users\" \n          });\n        }\n\n        await storage.deleteUser(id);\n        res.json({ success: true });\n      } catch (error) {\n        console.error(\"Error deleting user:\", error);\n        res.status(500).json({ message: \"Failed to delete user\" });\n      }\n    },\n  );\n\n  // Permission management routes\n  app.get(\"/api/permissions\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const permissions = await storage.getPermissions();\n      res.json(permissions);\n    } catch (error) {\n      console.error(\"Error fetching permissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch permissions\" });\n    }\n  });\n\n  app.get(\n    \"/api/permissions/role/:role\",\n    isAuthenticated,\n    isAdmin,\n    async (req, res) => {\n      try {\n        const { role } = req.params;\n        const permissions = await storage.getRolePermissions(role);\n        res.json(permissions);\n      } catch (error) {\n        console.error(\"Error fetching role permissions:\", error);\n        res.status(500).json({ message: \"Failed to fetch role permissions\" });\n      }\n    },\n  );\n\n  app.put(\n    \"/api/permissions/role/:role\",\n    isAuthenticated,\n    isAdmin,\n    async (req, res) => {\n      try {\n        const { role } = req.params;\n        const { permissionIds } = req.body;\n        await storage.setRolePermissions(role, permissionIds);\n        res.json({ success: true });\n      } catch (error) {\n        console.error(\"Error updating role permissions:\", error);\n        res.status(500).json({ message: \"Failed to update role permissions\" });\n      }\n    },\n  );\n\n  app.get(\n    \"/api/permissions/user/:userId\",\n    isAuthenticated,\n    isAdmin,\n    async (req, res) => {\n      try {\n        const { userId } = req.params;\n        const permissions = await storage.getUserPermissions(userId);\n        res.json(permissions);\n      } catch (error) {\n        console.error(\"Error fetching user permissions:\", error);\n        res.status(500).json({ message: \"Failed to fetch user permissions\" });\n      }\n    },\n  );\n\n  app.put(\n    \"/api/permissions/user/:userId\",\n    isAuthenticated,\n    isAdmin,\n    async (req, res) => {\n      try {\n        const { userId } = req.params;\n        const { permissionUpdates } = req.body;\n        await storage.setUserPermissions(userId, permissionUpdates);\n        res.json({ success: true });\n      } catch (error) {\n        console.error(\"Error updating user permissions:\", error);\n        res.status(500).json({ message: \"Failed to update user permissions\" });\n      }\n    },\n  );\n\n  app.get(\"/api/auth/permissions\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const permissions = await storage.getUserPermissions(userId);\n      res.json(permissions);\n    } catch (error) {\n      console.error(\"Error fetching user permissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch user permissions\" });\n    }\n  });\n\n  // Profile management routes\n  app.put(\"/api/profile\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { firstName, lastName, email, currentPassword, newPassword } =\n        req.body;\n\n      const updateData: any = {\n        firstName,\n        lastName,\n        email,\n      };\n\n      // If password change is requested, verify current password\n      if (newPassword) {\n        if (!currentPassword) {\n          return res.status(400).json({\n            message: \"Current password is required to change password\",\n          });\n        }\n        const user = await storage.getUser(userId);\n        const isValidPassword = await bcrypt.compare(\n          currentPassword,\n          user.password || \"\",\n        );\n        if (!isValidPassword) {\n          return res\n            .status(400)\n            .json({ message: \"Current password is incorrect\" });\n        }\n\n        updateData.password = await bcrypt.hash(newPassword, 10);\n      }\n\n      const user = await storage.updateUser(userId, updateData);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  app.post(\"/api/orders\", isAuthenticated, async (req, res) => {\n    try {\n      const { customerId, items, ...orderData } = req.body;\n\n      console.log(\"Creating order with data:\", {\n        customerId,\n        items,\n        orderData,\n      });\n\n      if (!items || items.length === 0) {\n        return res\n          .status(400)\n          .json({ message: \"Order must have at least one item\" });\n      }\n\n      // Calculate total from items\n      let calculatedTotal = 0;\n      for (const item of items) {\n        if (!item.productId || !item.quantity || !item.price) {\n          return res.status(400).json({\n            message: \"All items must have productId, quantity, and price\",\n          });\n        }\n        calculatedTotal += parseFloat(item.price) * parseInt(item.quantity);\n      }\n\n      const order = await storage.createOrder({\n        customerId: customerId || null,\n        status: orderData.status || \"pending\",\n        total: calculatedTotal.toString(),\n        notes: orderData.notes || null,\n        dueDate: orderData.dueDate ? new Date(orderData.dueDate) : null,\n      });\n\n      console.log(\"Order created:\", order);\n\n      // Add order items\n      for (const item of items) {\n        await storage.createOrderItem({\n          orderId: order.id,\n          productId: parseInt(item.productId),\n          quantity: parseInt(item.quantity),\n          price: parseFloat(item.price).toString(),\n        });\n      }\n\n      console.log(\"Order items added successfully\");\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error creating order:\", error);\n      res.status(500).json({\n        message: \"Failed to create order\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  });\n\n  app.put(\"/api/categories/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n\n      if (!req.body.name) {\n        return res.status(400).json({ message: \"Category name is required\" });\n      }\n\n      const transformedData = {\n        name: req.body.name.trim(),\n        description: req.body.description ? req.body.description.trim() : null,\n      };\n\n      const category = await storage.updateCategory(id, transformedData);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error updating category:\", error);\n      res.status(500).json({ message: \"Failed to update category\" });\n    }\n  });\n\n  app.delete(\"/api/categories/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteCategory(id);\n      res.json({ message: \"Category deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting category:\", error);\n      res.status(500).json({ message: \"Failed to delete category\" });\n    }\n  });\n\n  // Notification system routes\n  const hasNotificationAccess = (req: any, res: any, next: any) => {\n    if (\n      req.user &&\n      [\"admin\", \"supervisor\", \"manager\"].includes(req.user.role)\n    ) {\n      return next();\n    }\n    res.status(403).json({\n      message: \"Access denied. Admin, Supervisor, or Manager role required.\",\n    });\n  };\n\n  // In-memory storage for push subscriptions (in production, use database)\n  const pushSubscriptions = new Map<string, any>();\n\n  app.post(\n    \"/api/notifications/subscribe\",\n    isAuthenticated,\n    hasNotificationAccess,\n    async (req: any, res) => {\n      try {\n        const { subscription } = req.body;\n        const userId = req.user.id;\n\n        pushSubscriptions.set(userId, subscription);\n        res.json({ success: true });\n      } catch (error) {\n        console.error(\"Error saving push subscription:\", error);\n        res.status(500).json({ message: \"Failed to save subscription\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/notifications/unsubscribe\",\n    isAuthenticated,\n    hasNotificationAccess,\n    async (req: any, res) => {\n      try {\n        const userId = req.user.id;\n        pushSubscriptions.delete(userId);\n        res.json({ success: true });\n      } catch (error) {\n        console.error(\"Error removing push subscription:\", error);\n        res.status(500).json({ message: \"Failed to remove subscription\" });\n      }\n    },\n  );\n\n  app.put(\n    \"/api/notifications/rules\",\n    isAuthenticated,\n    hasNotificationAccess,\n    async (req: any, res) => {\n      try {\n        const { rules } = req.body;\n        const userId = req.user.id;\n\n        // In production, save rules to database\n        res.json({ success: true });\n      } catch (error) {\n        console.error(\"Error updating notification rules:\", error);\n        res.status(500).json({ message: \"Failed to update rules\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/notifications/test\",\n    isAuthenticated,\n    hasNotificationAccess,\n    async (req: any, res) => {\n      try {\n        const userId = req.user.id;\n        const subscription = pushSubscriptions.get(userId);\n\n        if (!subscription) {\n          return res.status(400).json({ message: \"No subscription found\" });\n        }\n\n        // Simulate successful notification send\n        console.log(\"Test notification sent to user:\", userId);\n        res.json({ success: true });\n      } catch (error) {\n        console.error(\"Error sending test notification:\", error);\n        res.status(500).json({ message: \"Failed to send test notification\" });\n      }\n    },\n  );\n\n  // Sales routes (using orders as sales)\n  app.get(\"/api/sales\", isAuthenticated, async (req, res) => {\n    try {\n      const sales = await storage.getOrders();\n      res.json(sales);\n    } catch (error) {\n      console.error(\"Error fetching sales:\", error);\n      res.status(500).json({ message: \"Failed to fetch sales\" });\n    }\n  });\n\n  app.post(\"/api/sales\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const {\n        customerId,\n        customerName,\n        totalAmount,\n        paymentMethod,\n        status,\n        items,\n      } = req.body;\n\n      const orderData = {\n        orderNumber: `SALE-${Date.now()}`,\n        customerName,\n        totalAmount,\n        status: status || \"completed\",\n        createdBy: userId,\n        notes: `Payment: ${paymentMethod}`,\n      };\n\n      const order = await storage.createOrder(orderData);\n\n      for (const item of items) {\n        await storage.createOrderItem({\n          orderId: order.id,\n          productId: item.productId,\n          quantity: item.quantity,\n          unitPrice: item.unitPrice,\n          totalPrice: item.totalPrice,\n        });\n      }\n\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error creating sale:\", error);\n      res.status(500).json({ message: \"Failed to create sale\" });\n    }\n  });\n\n  // Enhanced Purchases routes with comprehensive data\n  app.get(\"/api/purchases\", isAuthenticated, async (req, res) => {\n    try {\n      const purchases = await storage.getPurchasesWithItems();\n      res.json(purchases);\n    } catch (error) {\n      console.error(\"Error fetching purchases:\", error);\n      res.status(500).json({ message: \"Failed to fetch purchases\" });\n    }\n  });\n\n  app.post(\"/api/purchases\", isAuthenticated, async (req: any, res) => {\n    try {\n      const {\n        partyId,\n        supplierName,\n        totalAmount,\n        paymentMethod,\n        status,\n        invoiceNumber,\n        notes,\n        items,\n      } = req.body;\n\n      // Validate items\n      if (!items || !Array.isArray(items) || items.length === 0) {\n        return res.status(400).json({ message: \"Purchase items are required\" });\n      }\n\n      // Create comprehensive purchase record\n      const purchaseData = {\n        partyId: partyId || null,\n        supplierName,\n        totalAmount,\n        paymentMethod,\n        status: status || \"completed\",\n        invoiceNumber,\n        notes,\n        items,\n        createdBy: req.user?.id,\n      };\n\n      const purchase = await storage.createPurchaseWithLedger(purchaseData);\n\n      // Update inventory for each item\n      for (const item of items) {\n        await storage.createInventoryTransaction({\n          inventoryItemId: item.inventoryItemId,\n          type: \"in\",\n          quantity: item.quantity.toString(),\n          reason: \"Purchase\",\n          reference: `Purchase #${purchase.id}${invoiceNumber ? ` - Invoice: ${invoiceNumber}` : \"\"}`,\n        });\n\n        // Update stock and cost per unit using weighted average\n        await storage.updateInventoryStockAndCost(\n          item.inventoryItemId,\n          item.quantity,\n          item.costPerUnit,\n        );\n\n        // Update purchased quantity and closing stock\n        await storage.updateInventoryPurchaseStock(\n          item.inventoryItemId,\n          item.quantity\n        );\n      }\n\n      res.json(purchase);\n    } catch (error) {\n      console.error(\"Error creating purchase:\", error);\n      res.status(500).json({ message: \"Failed to create purchase\" });\n    }\n  });\n\n  app.put(\"/api/purchases/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const purchaseData = req.body;\n\n      const purchase = await storage.updatePurchase(id, purchaseData);\n      res.json(purchase);\n    } catch (error) {\n      console.error(\"Error updating purchase:\", error);\n      res.status(500).json({ message: \"Failed to update purchase\" });\n    }\n  });\n\n  app.delete(\"/api/purchases/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deletePurchase(id);\n      res.json({ message: \"Purchase deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting purchase:\", error);\n      res.status(500).json({ message: \"Failed to delete purchase\" });\n    }\n  });\n\n  // Public order form endpoint (no authentication required)\n  app.post(\"/api/public/orders\", async (req, res) => {\n    try {\n      const {\n        customerName,\n        customerEmail,\n        customerPhone,\n        deliveryDate,\n        deliveryAddress,\n        specialInstructions,\n        items,\n        totalAmount,\n        referenceId,\n        formVersion,\n        attachments = [],\n        source,\n        submissionTimestamp,\n        submissionStart,\n        clientInfo,\n      } = req.body;\n\n      // Get client IP for rate limiting and logging\n      const clientIPAddr = clientIP(req);\n      const userAgentStr = userAgent(req);\n\n      // Enhanced rate limiting\n      const rateLimitKeyStr = `public_order_${clientIPAddr}`;\n      if (!checkRateLimit(rateLimitKeyStr, 60000, 3)) {\n        // 3 requests per minute\n        console.warn(\"üö® Rate limit exceeded for public order:\", {\n          ip: clientIPAddr,\n          userAgent: userAgentStr,\n          timestamp: new Date().toISOString(),\n        });\n\n        return res.status(429).json({\n          success: false,\n          message:\n            \"Too many order submissions. Please wait a minute before trying again.\",\n          field: \"rate_limit\",\n        });\n      }\n\n      // Validate required fields\n      if (\n        !customerName ||\n        !customerEmail ||\n        !customerPhone ||\n        !deliveryDate ||\n        !deliveryAddress ||\n        !items ||\n        !Array.isArray(items) ||\n        items.length === 0\n      ) {\n        return res.status(400).json({\n          success: false,\n          message:\n            \"All required fields must be filled, and at least one item is needed.\",\n          field: !customerName\n            ? \"customerName\"\n            : !customerEmail\n              ? \"customerEmail\"\n              : !customerPhone\n                ? \"customerPhone\"\n                : !deliveryDate\n                  ? \"deliveryDate\"\n                  : !deliveryAddress\n                    ? \"deliveryAddress\"\n                    : !items || items.length === 0\n                      ? \"items\"\n                      : \"unknown\",\n        });\n      }\n\n      // Set rate limit\n      rateLimitStore.set(rateLimitKey, Date.now());\n\n      // Sanitize all text inputs\n      const sanitizedData = {\n        customerName: sanitizeInput(customerName),\n        customerEmail: sanitizeInput(customerEmail),\n        customerPhone: sanitizeInput(customerPhone),\n        deliveryAddress: sanitizeInput(deliveryAddress),\n        specialInstructions: sanitizeInput(specialInstructions || \"\"),\n      };\n\n      // Generate unique order number using reference ID if provided\n      const orderNumber =\n        referenceId ||\n        `PUB-${Date.now()}-${Math.random().toString(36).substr(2, 5).toUpperCase()}`;\n\n      // Calculate and validate total amount\n      const calculatedTotal = items.reduce(\n        (sum: number, item: any) => sum + item.quantity * item.unitPrice,\n        0,\n      );\n\n      // Validate total amount if provided\n      if (totalAmount && Math.abs(calculatedTotal - totalAmount) > 0.01) {\n        return res.status(400).json({\n          success: false,\n          message: \"Total amount mismatch. Please refresh and try again.\",\n          field: \"totalAmount\",\n        });\n      }\n\n      console.log(\n        `üì¶ Processing new public order: ${orderNumber} from ${sanitizedData.customerEmail}`,\n      );\n\n      // Create comprehensive audit log for the submission\n      await storage.createAuditLog({\n        userId: \"public_user\",\n        userEmail: sanitizedData.customerEmail,\n        userName: sanitizedData.customerName,\n        action: \"CREATE\",\n        resource: \"public_order\",\n        resourceId: orderNumber,\n        details: {\n          source: source || \"public_form\",\n          formVersion: formVersion || \"1.0\",\n          itemCount: items.length,\n          totalAmount: calculatedTotal,\n          deliveryDate: deliveryDate,\n          attachmentCount: attachments.length,\n          userAgent: userAgent || req.get(\"User-Agent\"),\n          submissionTimestamp: submissionTimestamp || new Date().toISOString(),\n          processingDuration: Date.now() - submissionStart,\n        },\n        oldValues: null,\n        newValues: {\n          orderNumber,\n          customerEmail: sanitizedData.customerEmail,\n          itemCount: items.length,\n          totalAmount: calculatedTotal,\n          status: \"pending\",\n        },\n        ipAddress: clientIP,\n        userAgent: req.get(\"User-Agent\"),\n        status: \"success\",\n      });\n\n      // Create order with enhanced data\n      const order = await storage.createOrder({\n        orderNumber,\n        customerName: sanitizedData.customerName,\n        customerEmail: sanitizedData.customerEmail,\n        customerPhone: sanitizedData.customerPhone,\n        totalAmount: calculatedTotal.toString(),\n        paymentMethod: \"pending\",\n        orderDate: new Date(),\n        dueDate: new Date(deliveryDate),\n        notes: `Public Order Submission\nDelivery Address: ${sanitizedData.deliveryAddress}\n${sanitizedData.specialInstructions ? `Special Instructions: ${sanitizedData.specialInstructions}` : \"\"}\nSource: ${source || \"Website Form\"}\nSubmission IP: ${clientIP}\nAttachments: ${attachments.length} file(s)\nForm Version: ${formVersion || \"1.0\"}`,\n        status: \"pending\",\n        createdBy: null, // Public order, no user ID\n      });\n\n      console.log(\"New public order created:\", order.orderNumber);\n\n      // Create order items\n      for (const item of items) {\n        if (!item.productId || !item.quantity || !item.unitPrice) {\n          console.error(\"Skipping invalid item:\", item);\n          continue; // Skip invalid items\n        }\n        await storage.createOrderItem({\n          orderId: order.id,\n          productId: parseInt(item.productId),\n          quantity: parseInt(item.quantity),\n          unitPrice: parseFloat(item.unitPrice).toString(),\n          totalPrice: (\n            parseFloat(item.quantity.toString()) *\n            parseFloat(item.unitPrice.toString())\n          ).toString(),\n        });\n      }\n\n      // Send notifications about new public order\n      try {\n        await notifyNewPublicOrder({\n          orderNumber: order.orderNumber,\n          customerName: sanitizedData.customerName,\n          customerEmail: sanitizedData.customerEmail,\n          customerPhone: sanitizedData.customerPhone,\n          totalAmount: calculatedTotal,\n          deliveryDate: deliveryDate,\n          itemCount: items.length,\n        });\n      } catch (notificationError) {\n        console.error(\n          \"Failed to send notifications for new public order:\",\n          notificationError,\n        );\n        // Optionally log this error or alert admin, but don't fail the order\n      }\n\n      res.json({\n        success: true,\n        orderNumber: order.orderNumber,\n        message:\n          \"Order submitted successfully! We will contact you soon with confirmation.\",\n      });\n    } catch (error) {\n      console.error(\"Error processing public order:\", error);\n\n      // Log the error for audit purposes\n      await storage.createAuditLog({\n        userId: \"public_user\",\n        userEmail: req.body.customerEmail || \"unknown@example.com\",\n        userName: req.body.customerName || \"Anonymous User\",\n        action: \"CREATE\",\n        resource: \"public_order\",\n        resourceId: req.body.orderNumber || \"N/A\",\n        details: {\n          error:\n            error instanceof Error\n              ? error.message\n              : \"An unknown error occurred\",\n          source: req.body.source || \"public_form\",\n          submissionTimestamp:\n            req.body.submissionTimestamp || new Date().toISOString(),\n        },\n        oldValues: null,\n        newValues: null,\n        ipAddress: clientIP,\n        userAgent: req.get(\"User-Agent\"),\n        status: \"failed\",\n        errorMessage:\n          error instanceof Error ? error.message : \"An unknown error occurred\",\n      });\n\n      res.status(500).json({\n        success: false,\n        message:\n          error instanceof Error\n            ? `Failed to submit order: ${error.message}. Please check your details and try again.`\n            : \"Failed to submit order. Please check your details and try again.\",\n      });\n    }\n  });\n\n  // Enhanced production schedule endpoints\n  app.get(\n    \"/api/production-schedule/:date\",\n    isAuthenticated,\n    async (req, res) => {\n      try {\n        const { date } = req.params;\n        const scheduleItems = await storage.getProductionScheduleByDate(date);\n        res.json(scheduleItems);\n      } catch (error) {\n        console.error(\"Error fetching production schedule:\", error);\n        res\n          .status(500)\n          .json({ message: \"Failed to fetch production schedule\" });\n      }\n    },\n  );\n\n  app.get(\n    \"/api/production-schedule/today\",\n    isAuthenticated,\n    async (req, res) => {\n      try {\n        const today = format(new Date(), \"yyyy-MM-dd\");\n        const scheduleItems = await storage.getProductionScheduleByDate(today);\n        res.json(scheduleItems);\n      } catch (error) {\n        console.error(\"Error fetching today's production schedule:\", error);\n        res\n          .status(500)\n          .json({ message: \"Failed to fetch today's production schedule\" });\n      }\n    },\n  );\n\n  app.post(\"/api/production-schedule\", isAuthenticated, async (req, res) => {\n    try {\n      const {\n        productId,\n        scheduledDate,\n        targetQuantity,\n        targetAmount,\n        unit,\n        priority,\n        notes,\n        targetPackets,\n      } = req.body;\n\n      const scheduleItem = await storage.createProductionScheduleItem({\n        productId,\n        scheduledDate: new Date(scheduledDate),\n        quantity: targetQuantity || 1,\n        targetQuantity: targetQuantity || targetAmount || 1,\n        targetAmount: targetAmount ? targetAmount.toString() : \"1\",\n        unit: unit || \"kg\",\n        targetPackets,\n        priority: priority || \"medium\",\n        notes,\n        status: \"pending\",\n        assignedTo: (req as any).user?.id,\n      });\n\n      res.json(scheduleItem);\n    } catch (error) {\n      console.error(\"Error creating production schedule:\", error);\n      res.status(500).json({ message: \"Failed to create production schedule\" });\n    }\n  });\n\n  app.put(\"/api/production-schedule/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n\n      if (updateData.scheduledDate) {\n        updateData.scheduledDate = new Date(updateData.scheduledDate);\n      }\n      if (updateData.targetAmount) {\n        updateData.targetAmount = updateData.targetAmount.toString();\n      }\n\n      const updatedItem = await storage.updateProductionScheduleItem(\n        parseInt(id),\n        updateData,\n      );\n      res.json(updatedItem);\n    } catch (error) {\n      console.error(\"Error updating production schedule:\", error);\n      res.status(500).json({ message: \"Failed to update production schedule\" });\n    }\n  });\n\n  const upload = multer({ storage });\n  // Media upload endpoint\n  app.post(\"/api/upload\", upload.single(\"file\"), (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      // Validate file type\n      const allowedTypes = [\n        \"image/jpeg\",\n        \"image/png\",\n        \"image/webp\",\n        \"image/gif\",\n      ];\n      if (!allowedTypes.includes(req.file.mimetype)) {\n        return res\n          .status(400)\n          .json({ message: \"Invalid file type. Only images are allowed.\" });\n      }\n\n      const fileUrl = `/uploads/${req.file.filename}`;\n      res.json({ url: fileUrl, filename: req.file.filename });\n    } catch (error) {\n      console.error(\"Upload error:\", error);\n      res.status(500).json({ message: \"Upload failed\" });\n    }\n  });\n\n  // Staff document upload endpoint\n  app.post(\n    \"/api/staff/upload-document\",\n    isAuthenticated,\n    upload.single(\"document\"),\n    (req, res) => {\n      try {\n        if (!req.file) {\n          return res.status(400).json({ message: \"No document uploaded\" });\n        }\n\n        // Validate file type - allow images and PDFs\n        const allowedTypes = [\n          \"image/jpeg\",\n          \"image/png\",\n          \"image/webp\",\n          \"image/gif\",\n          \"application/pdf\",\n        ];\n        if (!allowedTypes.includes(req.file.mimetype)) {\n          return res.status(400).json({\n            message:\n              \"Invalid file type. Only images and PDF files are allowed.\",\n          });\n        }\n\n        // Validate file size (10MB limit for documents)\n        if (req.file.size > 10 * 1024 * 1024) {\n          return res\n            .status(400)\n            .json({ message: \"File size must be less than 10MB\" });\n        }\n\n        const { documentType, staffId } = req.body;\n\n        // Create staff documents folder if it doesn't exist\n        const staffDocumentsPath = `uploads/staff-documents/${staffId}`;\n        const fs = require(\"fs\");\n        const path = require(\"path\");\n\n        if (!fs.existsSync(staffDocumentsPath)) {\n          fs.mkdirSync(staffDocumentsPath, { recursive: true });\n        }\n\n        // Move file to staff documents folder\n        const fileName = `${documentType}_${Date.now()}_${req.file.filename}`;\n        const newPath = path.join(staffDocumentsPath, fileName);\n        fs.renameSync(req.file.path, newPath);\n\n        const fileUrl = `/uploads/staff-documents/${staffId}/${fileName}`;\n        res.json({\n          url: fileUrl,\n          filename: fileName,\n          documentType: documentType,\n        });\n      } catch (error) {\n        console.error(\"Document upload error:\", error);\n        res.status(500).json({ message: \"Document upload failed\" });\n      }\n    },\n  );\n\n  // ============ Client Activity Tracking ============\n\n  app.post(\n    \"/api/audit/client-activities\",\n    isAuthenticated,\n    async (req: any, res) => {\n      try {\n        const { events } = req.body;\n\n        if (!events || !Array.isArray(events)) {\n          return res.status(400).json({ error: \"Invalid events data\" });\n        }\n\n        // Process each client-side event\n        for (const event of events) {\n          const auditLogData = {\n            userId: req.user.id,\n            userEmail: req.user.email,\n            userName:\n              `${req.user.firstName || \"\"} ${req.user.lastName || \"\"}`.trim(),\n            action: event.action,\n            resource: event.resource,\n            resourceId: event.resourceId || null,\n            details: {\n              ...event.details,\n              source: \"client\",\n              originalTimestamp: event.timestamp,\n            },\n            oldValues: null,\n            newValues: null,\n            ipAddress:\n              req.headers[\"x-forwarded-for\"]?.split(\",\")[0] ||\n              req.headers[\"x-real-ip\"] ||\n              req.connection.remoteAddress ||\n              \"127.0.0.1\",\n            userAgent: req.get(\"User-Agent\") || null,\n            status: \"success\",\n          };\n\n          await storage.createAuditLog(auditLogData);\n        }\n\n        res.json({ success: true, processed: events.length });\n      } catch (error) {\n        console.error(\"Error processing client activities:\", error);\n        res.status(500).json({ error: \"Failed to process client activities\" });\n      }\n    },\n  );\n\n  // ============ Notifications Routes ============\n\n  app.get(\"/api/notifications\", isAuthenticated, async (req, res) => {\n    try {\n      const notifications = await storage.getNotifications(\n        (req as any).user.id,\n      );\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ error: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.put(\"/api/notifications/:id/read\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.markNotificationAsRead(id, req.user.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ error: \"Failed to mark notification as read\" });\n    }\n  });\n\n  app.put(\n    \"/api/notifications/mark-all-read\",\n    isAuthenticated,\n    async (req, res) => {\n      try {\n        await storage.markAllNotificationsAsRead(req.user.id);\n        res.json({ success: true });\n      } catch (error) {\n        console.error(\"Error marking all notifications as read:\", error);\n        res\n          .status(500)\n          .json({ error: \"Failed to mark all notifications as read\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/notifications/subscribe\",\n    isAuthenticated,\n    async (req, res) => {\n      try {\n        const { subscription, userId } = req.body;\n        await storage.saveNotificationSubscription(\n          userId || req.user.id,\n          subscription,\n        );\n        res.json({ success: true });\n      } catch (error) {\n        console.error(\"Error saving notification subscription:\", error);\n        res.status(500).json({ error: \"Failed to save subscription\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/notifications/unsubscribe\",\n    isAuthenticated,\n    async (req, res) => {\n      try {\n        const { userId } = req.body;\n        await storage.removeNotificationSubscription(userId || req.user.id);\n        res.json({ success: true });\n      } catch (error) {\n        console.error(\"Error removing notification subscription:\", error);\n        res.status(500).json({ error: \"Failed to remove subscription\" });\n      }\n    },\n  );\n\n  app.put(\"/api/notifications/rules\", isAuthenticated, async (req, res) => {\n    try {\n      const { userId, rules } = req.body;\n      await storage.saveNotificationSettings(userId || req.user.id, rules);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error saving notification rules:\", error);\n      res.status(500).json({ error: \"Failed to save notification rules\" });\n    }\n  });\n\n  app.post(\"/api/notifications/test\", isAuthenticated, async (req, res) => {\n    try {\n      const { userId } = req.body;\n      // Send a test notification\n      await storage.createNotification({\n        userId: userId || req.user.id,\n        type: \"system\",\n        title: \"Test Notification\",\n        description: \"This is a test notification to verify your settings.\",\n        priority: \"medium\",\n      });\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error sending test notification:\", error);\n      res.status(500).json({ error: \"Failed to send test notification\" });\n    }\n  });\n\n  // ============ Company Settings Routes ============\n\n  app.get(\"/api/settings\", async (req, res) => {\n    try {\n      const allSettings = await storage.getSettings();\n      console.log(\"Fetched settings:\", allSettings);\n\n      // Convert settings array to object format\n      const settings: any = {};\n      allSettings.forEach((setting: any) => {\n        settings[setting.key] = setting.value;\n      });\n\n      // Ensure default values are set if not present\n      const defaultSettings = {\n        companyName: \"Bake Sewa\",\n        companyAddress: \"\",\n        companyPhone: \"\",\n        companyEmail: \"info@bakesewa.com\",\n        companyLogo: \"\",\n        themeColor: \"#8B4513\",\n        currency: \"USD\",\n        timezone: \"UTC\",\n        emailNotifications: true,\n        lowStockAlerts: true,\n        orderNotifications: true,\n        productionReminders: true,\n        twoFactorAuth: false,\n        sessionTimeout: 60,\n        passwordPolicy: \"medium\",\n      };\n\n      const mergedSettings = { ...defaultSettings, ...settings };\n\n      res.json({\n        success: true,\n        settings: mergedSettings,\n      });\n    } catch (error) {\n      console.error(\"Error fetching settings:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Failed to fetch settings\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  });\n\n  app.put(\n    \"/api/settings\",\n    isAuthenticated,\n    auditLogger(\"UPDATE\", \"settings\"),\n    async (req, res) => {\n      try {\n        const settingsData = req.body;\n        console.log(\"Updating settings with data:\", settingsData);\n\n        // Update each setting individually\n        const updatePromises = [];\n        for (const [key, value] of Object.entries(settingsData)) {\n          if (value !== null && value !== undefined) {\n            updatePromises.push(\n              storage.updateOrCreateSetting(key, String(value)),\n            );\n          }\n        }\n\n        await Promise.all(updatePromises);\n\n        // Fetch updated settings\n        const allSettings = await storage.getSettings();\n        const settings: any = {};\n        allSettings.forEach((setting: any) => {\n          settings[setting.key] = setting.value;\n        });\n\n        // Ensure default values are maintained\n        const defaultSettings = {\n          companyName: \"Bake Sewa\",\n          companyAddress: \"\",\n          companyPhone: \"\",\n          companyEmail: \"info@bakesewa.com\",\n          companyLogo: \"\",\n          themeColor: \"#8B4513\",\n          currency: \"USD\",\n          timezone: \"UTC\",\n          emailNotifications: true,\n          lowStockAlerts: true,\n          orderNotifications: true,\n          productionReminders: true,\n          twoFactorAuth: false,\n          sessionTimeout: 60,\n          passwordPolicy: \"medium\",\n        };\n\n        const mergedSettings = { ...defaultSettings, ...settings };\n\n        res.json({\n          success: true,\n          message: \"Settings updated successfully\",\n          settings: mergedSettings,\n        });\n      } catch (error) {\n        console.error(\"Error updating settings:\", error);\n        res.status(500).json({\n          success: false,\n          message: \"Failed to update settings\",\n          error: error instanceof Error ? error.message : \"Unknown error\",\n        });\n      }\n    },\n  );\n\n  // Superadmin-only: Update user roles\n  app.put(\n    \"/api/admin/users/:id/role\",\n    isAuthenticated,\n    isSuperAdmin,\n    async (req, res) => {\n      try {\n        const { id } = req.params;\n        const { role } = req.body;\n\n        const validRoles = [\n          \"super_admin\",\n          \"admin\",\n          \"manager\",\n          \"supervisor\",\n          \"marketer\",\n          \"staff\",\n        ];\n        if (!validRoles.includes(role)) {\n          return res.status(400).json({ message: \"Invalid role\" });\n        }\n\n        const user = await storage.updateUser(id, { role });\n        res.json(user);\n      } catch (error) {\n        console.error(\"Error updating user role:\", error);\n        res.status(500).json({ message: \"Failed to update user role\" });\n      }\n    },\n  );\n\n  // Login logs routes (admin only)\n  app.get(\n    \"/api/login-logs\",\n    isAuthenticated,\n    requireWrite(\"admin\"),\n    async (req: any, res) => {\n      try {\n        const page = parseInt(req.query.page as string) || 1;\n        const limit = parseInt(req.query.limit as string) || 20;\n        const offset = (page - 1) * limit;\n\n        // Get total count\n        const totalResult = await db.select({ count: count() }).from(loginLogs);\n        const total = totalResult[0].count;\n\n        // Get paginated logs\n        const logs = await db\n          .select()\n          .from(loginLogs)\n          .orderBy(desc(loginLogs.loginTime))\n          .limit(limit)\n          .offset(offset);\n\n        res.json({\n          logs,\n          pagination: {\n            page,\n            limit,\n            total,\n            totalPages: Math.ceil(total / limit),\n          },\n        });\n      } catch (error) {\n        console.error(\"Error fetching login logs:\", error);\n        res.status(500).json({ message: \"Failed to fetch login logs\" });\n      }\n    },\n  );\n\n  // Login logs analytics\n  app.get(\n    \"/api/login-logs/analytics\",\n    isAuthenticated,\n    requireWrite(\"admin\"),\n    async (req: any, res) => {\n      try {\n        const last30Days = new Date();\n        last30Days.setDate(last30Days.getDate() - 30);\n\n        // Get success/failure counts\n        const successCount = await db\n          .select({ count: count() })\n          .from(loginLogs)\n          .where(\n            sql`${loginLogs.status} = 'success' AND ${loginLogs.loginTime} >= ${last30Days}`,\n          );\n\n        const failureCount = await db\n          .select({ count: count() })\n          .from(loginLogs)\n          .where(\n            sql`${loginLogs.status} = 'failed' AND ${loginLogs.loginTime} >= ${last30Days}`,\n          );\n\n        // Get top login locations\n        const topLocations = await db\n          .select({\n            location: loginLogs.location,\n            count: count(),\n          })\n          .from(loginLogs)\n          .where(sql`${loginLogs.loginTime} >= ${last30Days}`)\n          .groupBy(loginLogs.location)\n          .orderBy(desc(count()))\n          .limit(10);\n\n        // Get device types\n        const deviceTypes = await db\n          .select({\n            deviceType: loginLogs.deviceType,\n            count: count(),\n          })\n          .from(loginLogs)\n          .where(sql`${loginLogs.loginTime} >= ${last30Days}`)\n          .groupBy(loginLogs.deviceType)\n          .orderBy(desc(count()));\n\n        res.json({\n          successCount: successCount[0].count,\n          failureCount: failureCount[0].count,\n          topLocations,\n          deviceTypes,\n        });\n      } catch (error) {\n        console.error(\"Error fetching login analytics:\", error);\n        res.status(500).json({ message: \"Failed to fetch login analytics\" });\n      }\n    },\n  );\n\n  // Login analytics endpoint\n  app.get(\n    \"/api/admin/login-analytics\",\n    requireWrite(\"admin\"),\n    async (req, res) => {\n      try {\n        const { startDate, endDate } = req.query;\n\n        // Convert dates to proper string format if they exist\n        const formattedStartDate = startDate\n          ? new Date(startDate as string).toISOString()\n          : undefined;\n        const formattedEndDate = endDate\n          ? new Date(endDate as string).toISOString()\n          : undefined;\n\n        const analytics = await storage.getLoginAnalytics(\n          formattedStartDate,\n          formattedEndDate,\n        );\n\n        res.json(analytics);\n      } catch (error) {\n        console.error(\"Error fetching login analytics:\", error);\n        res.status(500).json({ message: \"Failed to fetch login analytics\" });\n      }\n    },\n  );\n\n  // Staff management routes\n  app.get(\n    \"/api/staff\",\n    isAuthenticated,\n    requireRead(\"staff\"),\n    auditLogger(\"READ\", \"staff\"),\n    async (req, res) => {\n      try {\n        const staffList = await storage.getStaff();\n        res.json(staffList);\n      } catch (error) {\n        console.error(\"Error fetching staff:\", error);\n        res.status(500).json({ message: \"Failed to fetch staff\" });\n      }\n    },\n  );\n\n  app.get(\n    \"/api/staff/:id\",\n    isAuthenticated,\n    requireRead(\"staff\"),\n    async (req, res) => {\n      try {\n        const id = parseInt(req.params.id);\n        const staffMember = await storage.getStaffById(id);\n        if (!staffMember) {\n          return res.status(404).json({ message: \"Staff member not found\" });\n        }\n        res.json(staffMember);\n      } catch (error) {\n        console.error(\"Error fetching staff member:\", error);\n        res.status(500).json({ message: \"Failed to fetch staff member\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/staff\",\n    isAuthenticated,\n    requireWrite(\"staff\"),\n    auditLogger(\"CREATE\", \"staff\"),\n    async (req: any, res) => {\n      try {\n        const {\n          staffId,\n          firstName,\n          lastName,\n          email,\n          phone,\n          address,\n          dateOfBirth,\n          hireDate,\n          position,\n          department,\n          employmentType,\n          salary,\n          hourlyRate,\n          bankAccount,\n          emergencyContact,\n          emergencyPhone,\n          notes,\n        } = req.body;\n\n        // Validate required fields\n        if (\n          !firstName ||\n          !lastName ||\n          !position ||\n          !department ||\n          !employmentType ||\n          !hireDate\n        ) {\n          return res\n            .status(400)\n            .json({ message: \"Required fields are missing\" });\n        }\n\n        // Auto-generate staff ID if not provided\n        let finalStaffId = staffId;\n        if (!finalStaffId) {\n          const timestamp = Date.now().toString().slice(-6);\n          const initials = (\n            firstName.charAt(0) + lastName.charAt(0)\n          ).toUpperCase();\n          finalStaffId = `EMP${initials}${timestamp}`;\n        }\n\n        // Check if staff ID already exists\n        try {\n          const existingStaff = await storage.getStaffByStaffId(finalStaffId);\n          if (existingStaff) {\n            return res.status(400).json({ message: \"Staff ID already exists\" });\n          }\n        } catch (err) {\n          // Staff ID doesn't exist, which is good\n        }\n\n        const staffData = {\n          staffId: finalStaffId,\n          firstName: firstName.trim(),\n          lastName: lastName.trim(),\n          email: email?.trim() || null,\n          phone: phone?.trim() || null,\n          address: address?.trim() || null,\n          dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : null,\n          hireDate: new Date(hireDate),\n          position: position.trim(),\n          department: department.trim(),\n          employmentType: employmentType.trim(),\n          salary:\n            salary && !isNaN(parseFloat(salary))\n              ? parseFloat(salary).toString()\n              : null,\n          hourlyRate:\n            hourlyRate && !isNaN(parseFloat(hourlyRate))\n              ? parseFloat(hourlyRate).toString()\n              : null,\n          bankAccount: bankAccount?.trim() || null,\n          emergencyContact: emergencyContact?.trim() || null,\n          emergencyPhone: emergencyPhone?.trim() || null,\n          notes: notes?.trim() || null,\n          status: \"active\",\n        };\n\n        console.log(\"Creating staff member with data:\", staffData);\n        const newStaff = await storage.createStaff(staffData);\n        console.log(\"Staff member created successfully:\", newStaff);\n        res.json(newStaff);\n      } catch (error) {\n        console.error(\"Error creating staff member:\", error);\n        if (error.message?.includes(\"duplicate key\")) {\n          res.status(400).json({ message: \"Staff ID already exists\" });\n        } else {\n          res.status(500).json({\n            message: \"Failed to create staff member\",\n            error: error instanceof Error ? error.message : \"Unknown error\",\n          });\n        }\n      }\n    },\n  );\n\n  app.put(\n    \"/api/staff/:id\",\n    isAuthenticated,\n    requireWrite(\"staff\"),\n    auditLogger(\"UPDATE\", \"staff\"),\n    async (req, res) => {\n      try {\n        const id = parseInt(req.params.id);\n        const updateData = req.body;\n\n        // Validate required fields\n        if (\n          !updateData.firstName ||\n          !updateData.lastName ||\n          !updateData.position ||\n          !updateData.department\n        ) {\n          return res\n            .status(400)\n            .json({ message: \"Required fields are missing\" });\n        }\n\n        // Process dates\n        if (updateData.dateOfBirth) {\n          updateData.dateOfBirth = new Date(updateData.dateOfBirth);\n        }\n        if (updateData.hireDate) {\n          updateData.hireDate = new Date(updateData.hireDate);\n        }\n        if (updateData.terminationDate) {\n          updateData.terminationDate = new Date(updateData.terminationDate);\n        }\n\n        // Process numeric fields\n        if (updateData.salary && !isNaN(parseFloat(updateData.salary))) {\n          updateData.salary = parseFloat(updateData.salary).toString();\n        } else {\n          updateData.salary = null;\n        }\n\n        if (\n          updateData.hourlyRate &&\n          !isNaN(parseFloat(updateData.hourlyRate))\n        ) {\n          updateData.hourlyRate = parseFloat(updateData.hourlyRate).toString();\n        } else {\n          updateData.hourlyRate = null;\n        }\n\n        // Trim string fields\n        [\n          \"firstName\",\n          \"lastName\",\n          \"email\",\n          \"phone\",\n          \"address\",\n          \"position\",\n          \"department\",\n          \"employmentType\",\n          \"bankAccount\",\n          \"emergencyContact\",\n          \"emergencyPhone\",\n          \"notes\",\n        ].forEach((field) => {\n          if (updateData[field]) {\n            updateData[field] = updateData[field].trim();\n          }\n        });\n\n        console.log(\"Updating staff member with data:\", updateData);\n        const updatedStaff = await storage.updateStaff(id, updateData);\n        console.log(\"Staff member updated successfully:\", updatedStaff);\n        res.json(updatedStaff);\n      } catch (error) {\n        console.error(\"Error updating staff member:\", error);\n        res.status(500).json({\n          message: \"Failed to update staff member\",\n          error: error instanceof Error ? error.message : \"Unknown error\",\n        });\n      }\n    },\n  );\n\n  app.delete(\n    \"/api/staff/:id\",\n    isAuthenticated,\n    requireWrite(\"staff\"),\n    auditLogger(\"DELETE\", \"staff\"),\n    async (req, res) => {\n      try {\n        const id = parseInt(req.params.id);\n        await storage.deleteStaff(id);\n        res.json({ message: \"Staff member deleted successfully\" });\n      } catch (error) {\n        console.error(\"Error deleting staff member:\", error);\n        res.status(500).json({ message: \"Failed to delete staff member\" });\n      }\n    },\n  );\n\n  // Attendance routes\n  app.get(\n    \"/api/attendance\",\n    isAuthenticated,\n    requireRead(\"staff\"),\n    async (req, res) => {\n      try {\n        const { staffId, startDate, endDate } = req.query;\n\n        const attendanceRecords = await storage.getAttendance(\n          staffId ? parseInt(staffId as string) : undefined,\n          startDate ? new Date(startDate as string) : undefined,\n          endDate ? new Date(endDate as string) : undefined,\n        );\n\n        res.json(attendanceRecords);\n      } catch (error) {\n        console.error(\"Error fetching attendance:\", error);\n        res.status(500).json({ message: \"Failed to fetch attendance\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/attendance\",\n    isAuthenticated,\n    requireWrite(\"staff\"),\n    async (req, res) => {\n      try {\n        const attendanceData = req.body;\n\n        if (attendanceData.date) {\n          attendanceData.date = new Date(attendanceData.date);\n        }\n        if (attendanceData.clockIn) {\n          attendanceData.clockIn = new Date(attendanceData.clockIn);\n        }\n        if (attendanceData.clockOut) {\n          attendanceData.clockOut = new Date(attendanceData.clockOut);\n        }\n        if (attendanceData.breakStart) {\n          attendanceData.breakStart = new Date(attendanceData.breakStart);\n        }\n        if (attendanceData.breakEnd) {\n          attendanceData.breakEnd = new Date(attendanceData.breakEnd);\n        }\n\n        const newAttendance = await storage.createAttendance(attendanceData);\n        res.json(newAttendance);\n      } catch (error) {\n        console.error(\"Error creating attendance record:\", error);\n        res.status(500).json({ message: \"Failed to create attendance record\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/attendance/clock-in\",\n    isAuthenticated,\n    requireWrite(\"staff\"),\n    async (req, res) => {\n      try {\n        const { staffId } = req.body;\n        const attendance = await storage.clockIn(staffId);\n        res.json(attendance);\n      } catch (error) {\n        console.error(\"Error clocking in:\", error);\n        res\n          .status(500)\n          .json({ message: error.message || \"Failed to clock in\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/attendance/clock-out\",\n    isAuthenticated,\n    requireWrite(\"staff\"),\n    async (req, res) => {\n      try {\n        const { staffId } = req.body;\n        const attendance = await storage.clockOut(staffId);\n        res.json(attendance);\n      } catch (error) {\n        console.error(\"Error clocking out:\", error);\n        res\n          .status(500)\n          .json({ message: error.message || \"Failed to clock out\" });\n      }\n    },\n  );\n\n  app.put(\n    \"/api/attendance/:id\",\n    isAuthenticated,\n    requireWrite(\"staff\"),\n    async (req, res) => {\n      try {\n        const id = parseInt(req.params.id);\n        const updateData = req.body;\n\n        if (updateData.date) {\n          updateData.date = new Date(updateData.date);\n        }\n        if (updateData.clockIn) {\n          updateData.clockIn = new Date(updateData.clockIn);\n        }\n        if (updateData.clockOut) {\n          updateData.clockOut = new Date(updateData.clockOut);\n        }\n\n        const updatedAttendance = await storage.updateAttendance(\n          id,\n          updateData,\n        );\n        res.json(updatedAttendance);\n      } catch (error) {\n        console.error(\"Error updating attendance:\", error);\n        res.status(500).json({ message: \"Failed to update attendance\" });\n      }\n    },\n  );\n\n  app.delete(\n    \"/api/attendance/:id\",\n    isAuthenticated,\n    requireWrite(\"staff\"),\n    async (req, res) => {\n      try {\n        const id = parseInt(req.params.id);\n        await storage.deleteAttendance(id);\n        res.json({ message: \"Attendance record deleted successfully\" });\n      } catch (error) {\n        console.error(\"Error deleting attendance:\", error);\n        res.status(500).json({ message: \"Failed to delete attendance\" });\n      }\n    },\n  );\n\n  // Salary payment routes\n  app.get(\n    \"/api/salary-payments\",\n    isAuthenticated,\n    requireRead(\"staff\"),\n    async (req, res) => {\n      try {\n        const { staffId } = req.query;\n        const payments = await storage.getSalaryPayments(\n          staffId ? parseInt(staffId as string) : undefined,\n        );\n        res.json(payments);\n      } catch (error) {\n        console.error(\"Error fetching salary payments:\", error);\n        res.status(500).json({ message: \"Failed to fetch salary payments\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/salary-payments\",\n    isAuthenticated,\n    requireWrite(\"staff\"),\n    async (req, res) => {\n      try {\n        const paymentData = req.body;\n\n        if (paymentData.payPeriodStart) {\n          paymentData.payPeriodStart = new Date(paymentData.payPeriodStart);\n        }\n        if (paymentData.payPeriodEnd) {\n          paymentData.payPeriodEnd = new Date(paymentData.payPeriodEnd);\n        }\n        if (paymentData.paymentDate) {\n          paymentData.paymentDate = new Date(paymentData.paymentDate);\n        }\n\n        // Convert numeric fields to strings\n        [\n          \"basicSalary\",\n          \"overtimePay\",\n          \"bonus\",\n          \"allowances\",\n          \"deductions\",\n          \"tax\",\n          \"netPay\",\n        ].forEach((field) => {\n          if (paymentData[field]) {\n            paymentData[field] = parseFloat(paymentData[field]).toString();\n          }\n        });\n\n        const newPayment = await storage.createSalaryPayment(paymentData);\n        res.json(newPayment);\n      } catch (error) {\n        console.error(\"Error creating salary payment:\", error);\n        res.status(500).json({ message: \"Failed to create salary payment\" });\n      }\n    },\n  );\n\n  app.put(\n    \"/api/salary-payments/:id\",\n    isAuthenticated,\n    requireWrite(\"staff\"),\n    async (req, res) => {\n      try {\n        const id = parseInt(req.params.id);\n        const updateData = req.body;\n\n        if (updateData.payPeriodStart) {\n          updateData.payPeriodStart = new Date(updateData.payPeriodStart);\n        }\n        if (updateData.payPeriodEnd) {\n          updateData.payPeriodEnd = new Date(updateData.payPeriodEnd);\n        }\n        if (updateData.paymentDate) {\n          updateData.paymentDate = new Date(updateData.paymentDate);\n        }\n\n        const updatedPayment = await storage.updateSalaryPayment(\n          id,\n          updateData,\n        );\n        res.json(updatedPayment);\n      } catch (error) {\n        console.error(\"Error updating salary payment:\", error);\n        res.status(500).json({ message: \"Failed to update salary payment\" });\n      }\n    },\n  );\n\n  // Leave request routes\n  app.get(\n    \"/api/leave-requests\",\n    isAuthenticated,\n    requireRead(\"staff\"),\n    async (req, res) => {\n      try {\n        const { staffId } = req.query;\n        const requests = await storage.getLeaveRequests(\n          staffId ? parseInt(staffId as string) : undefined,\n        );\n        res.json(requests);\n      } catch (error) {\n        console.error(\"Error fetching leave requests:\", error);\n        res.status(500).json({ message: \"Failed to fetch leave requests\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/leave-requests\",\n    isAuthenticated,\n    requireWrite(\"staff\"),\n    async (req, res) => {\n      try {\n        const requestData = req.body;\n\n        if (requestData.startDate) {\n          requestData.startDate = new Date(requestData.startDate);\n        }\n        if (requestData.endDate) {\n          requestData.endDate = new Date(requestData.endDate);\n        }\n\n        const newRequest = await storage.createLeaveRequest(requestData);\n        res.json(newRequest);\n      } catch (error) {\n        console.error(\"Error creating leave request:\", error);\n        res.status(500).json({ message: \"Failed to create leave request\" });\n      }\n    },\n  );\n\n  app.put(\n    \"/api/leave-requests/:id\",\n    isAuthenticated,\n    requireWrite(\"staff\"),\n    async (req, res) => {\n      try {\n        const id = parseInt(req.params.id);\n        const updateData = req.body;\n\n        if (updateData.startDate) {\n          updateData.startDate = new Date(updateData.startDate);\n        }\n        if (updateData.endDate) {\n          updateData.endDate = new Date(updateData.endDate);\n        }\n        if (updateData.reviewedDate) {\n          updateData.reviewedDate = new Date(updateData.reviewedDate);\n        }\n\n        const updatedRequest = await storage.updateLeaveRequest(id, updateData);\n        res.json(updatedRequest);\n      } catch (error) {\n        console.error(\"Error updating leave request:\", error);\n        res.status(500).json({ message: \"Failed to update leave request\" });\n      }\n    },\n  );\n\n  // Audit logs routes\n  app.get(\n    \"/api/audit-logs\",\n    isAuthenticated,\n    requireRead(\"admin\"),\n    async (req: any, res) => {\n      try {\n        const {\n          userId,\n          action,\n          resource,\n          startDate,\n          endDate,\n          page = 1,\n          limit = 50,\n        } = req.query;\n\n        const offset = (parseInt(page) - 1) * parseInt(limit);\n\n        const filters = {\n          userId: userId as string,\n          action: action as string,\n          resource: resource as string,\n          startDate: startDate ? new Date(startDate as string) : undefined,\n          endDate: endDate ? new Date(endDate as string) : undefined,\n          limit: parseInt(limit),\n          offset: offset,\n        };\n\n        const auditLogs = await storage.getAuditLogs(filters);\n\n        // Get total count for pagination\n        const totalAuditLogs = await storage.getAuditLogs(); // Get total count\n        const total = totalAuditLogs.length;\n\n        res.json({\n          auditLogs,\n          pagination: {\n            page: parseInt(page),\n            limit: parseInt(limit),\n            total,\n            totalPages: Math.ceil(total / parseInt(limit)),\n          },\n        });\n      } catch (error) {\n        console.error(\"Error fetching audit logs:\", error);\n        res.status(500).json({ message: \"Failed to fetch audit logs\" });\n      }\n    },\n  );\n\n  app.get(\n    \"/api/audit-logs/export\",\n    isAuthenticated,\n    requireRead(\"admin\"),\n    async (req, res) => {\n      try {\n        const logs = await storage.getAuditLogs();\n\n        // Format logs for export\n        const exportData = {\n          exportedAt: new Date().toISOString(),\n          totalLogs: logs.length,\n          logs: logs.map((log) => ({\n            ...log,\n            timestamp: new Date(log.timestamp).toISOString(),\n          })),\n        };\n\n        res.setHeader(\"Content-Type\", \"application/json\");\n        res.setHeader(\n          \"Content-Disposition\",\n          `attachment; filename=\"audit-logs-${new Date().toISOString().split(\"T\")[0]}.json\"`,\n        );\n        res.json(exportData);\n      } catch (error) {\n        console.error(\"Error exporting audit logs:\", error);\n        res.status(500).json({ message: \"Failed to export audit logs\" });\n      }\n    },\n  );\n\n  app.get(\n    \"/api/security/metrics\",\n    isAuthenticated,\n    requireWrite(\"admin\"),\n    async (req, res) => {\n      try {\n        const last24Hours = new Date();\n        last24Hours.setHours(last24Hours.getHours() - 24);\n\n        // Get failed logins in last 24 hours\n        const failedLogins = await db\n          .select({ count: count() })\n          .from(loginLogs)\n          .where(\n            sql`${loginLogs.status} = 'failed' AND ${loginLogs.loginTime} >= ${last24Hours}`,\n          );\n\n        // Get failed operations in last 24 hours\n        const failedOperations = await db\n          .select({ count: count() })\n          .from(auditLogs)\n          .where(\n            sql`${auditLogs.status} = 'failed' AND ${auditLogs.timestamp} >= ${last24Hours}`,\n          );\n\n        // Get unique active users in last 24 hours\n        const activeUsers = await db\n          .select({ count: count() })\n          .from(auditLogs)\n          .where(sql`${auditLogs.timestamp} >= ${last24Hours}`)\n          .groupBy(auditLogs.userId);\n\n        res.json({\n          failedLogins: failedLogins[0]?.count || 0,\n          failedOperations: failedOperations[0]?.count || 0,\n          activeUsers: activeUsers.length || 0,\n        });\n      } catch (error) {\n        console.error(\"Error fetching security metrics:\", error);\n        res.status(500).json({ message: \"Failed to fetch security metrics\" });\n      }\n    },\n  );\n\n  app.get(\n    \"/api/audit-logs/suspicious\",\n    isAuthenticated,\n    requireWrite(\"admin\"),\n    async (req, res) => {\n      try {\n        const last24Hours = new Date();\n        last24Hours.setHours(last24Hours.getHours() - 24);\n\n        const suspiciousLogs = await db\n          .select()\n          .from(auditLogs)\n          .where(\n            sql`${auditLogs.status} = 'failed' AND ${auditLogs.timestamp} >= ${last24Hours}`,\n          )\n          .orderBy(desc(auditLogs.timestamp))\n          .limit(20);\n\n        res.json({ auditLogs: suspiciousLogs });\n      } catch (error) {\n        console.error(\"Error fetching suspicious activities:\", error);\n        res\n          .status(500)\n          .json({ message: \"Failed to fetch suspicious activities\" });\n      }\n    },\n  );\n\n  app.get(\n    \"/api/audit-logs/analytics\",\n    isAuthenticated,\n    requireWrite(\"admin\"),\n    async (req, res) => {\n      try {\n        const { startDate, endDate } = req.query;\n\n        const filters = {\n          startDate: startDate\n            ? new Date(startDate as string)\n            : new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n          endDate: endDate ? new Date(endDate as string) : new Date(),\n        };\n\n        const logs = await storage.getAuditLogs(filters);\n\n        // Analyze the logs\n        const analytics = {\n          totalActions: logs.length,\n          actionsByType: logs.reduce((acc: any, log: any) => {\n            acc[log.action] = (acc[log.action] || 0) + 1;\n            return acc;\n          }, {}),\n          actionsByResource: logs.reduce((acc: any, log: any) => {\n            acc[log.resource] = (acc[log.resource] || 0) + 1;\n            return acc;\n          }, {}),\n          actionsByUser: logs.reduce((acc: any, log: any) => {\n            acc[log.userName] = (acc[log.userName] || 0) + 1;\n            return acc;\n          }, {}),\n          recentActions: logs.slice(0, 10),\n        };\n\n        res.json(analytics);\n      } catch (error) {\n        console.error(\"Error fetching audit analytics:\", error);\n        res.status(500).json({ message: \"Failed to fetch audit analytics\" });\n      }\n    },\n  );\n\n  // Staff schedule routes\n  app.get(\n    \"/api/staff-schedules\",\n    isAuthenticated,\n    requireRead(\"staff\"),\n    async (req, res) => {\n      try {\n        const { staffId, date } = req.query;\n        const schedules = await storage.getStaffSchedules(\n          staffId ? parseInt(staffId as string) : undefined,\n          date ? new Date(date as string) : undefined,\n        );\n        res.json(schedules);\n      } catch (error) {\n        console.error(\"Error fetching staff schedules:\", error);\n        res.status(500).json({ message: \"Failed to fetch staff schedules\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/staff-schedules\",\n    isAuthenticated,\n    requireWrite(\"staff\"),\n    async (req: any, res) => {\n      try {\n        const scheduleData = req.body;\n\n        if (scheduleData.date) {\n          scheduleData.date = new Date(scheduleData.date);\n        }\n        if (scheduleData.shiftStart) {\n          scheduleData.shiftStart = new Date(scheduleData.shiftStart);\n        }\n        if (scheduleData.shiftEnd) {\n          scheduleData.shiftEnd = new Date(scheduleData.shiftEnd);\n        }\n\n        scheduleData.createdBy = req.user?.id;\n\n        const newSchedule = await storage.createStaffSchedule(scheduleData);\n        res.json(newSchedule);\n      } catch (error) {\n        console.error(\"Error creating staff schedule:\", error);\n        res.status(500).json({ message: \"Failed to create staff schedule\" });\n      }\n    },\n  );\n\n  app.put(\n    \"/api/staff-schedules/:id\",\n    isAuthenticated,\n    requireWrite(\"staff\"),\n    async (req, res) => {\n      try {\n        const id = parseInt(req.params.id);\n        const updateData = req.body;\n\n        if (updateData.date) {\n          updateData.date = new Date(updateData.date);\n        }\n        if (updateData.shiftStart) {\n          updateData.shiftStart = new Date(updateData.shiftStart);\n        }\n        if (updateData.shiftEnd) {\n          updateData.shiftEnd = new Date(updateData.shiftEnd);\n        }\n\n        const updatedSchedule = await storage.updateStaffSchedule(\n          id,\n          updateData,\n        );\n        res.json(updatedSchedule);\n      } catch (error) {\n        console.error(\"Error updating staff schedule:\", error);\n        res.status(500).json({ message: \"Failed to update staff schedule\" });\n      }\n    },\n  );\n\n  app.delete(\n    \"/api/staff-schedules/:id\",\n    isAuthenticated,\n    requireWrite(\"staff\"),\n    async (req, res) => {\n      try {\n        const id = parseInt(req.params.id);\n        await storage.deleteStaffSchedule(id);\n        res.json({ message: \"Staff schedule deleted successfully\" });\n      } catch (error) {\n        console.error(\"Error deleting staff schedule:\", error);\n        res.status(500).json({ message: \"Failed to delete staff schedule\" });\n      }\n    },\n  );\n\n  // Enhanced Security Monitoring API Endpoints\n  \n  app.get(\n    \"/api/security/comprehensive-metrics\",\n    isAuthenticated,\n    requireRead(\"admin\"),\n    async (req, res) => {\n      try {\n        const metrics = await securityMonitor.getSecurityMetrics();\n        res.json(metrics);\n      } catch (error) {\n        console.error(\"Error fetching comprehensive security metrics:\", error);\n        res.status(500).json({ message: \"Failed to fetch security metrics\" });\n      }\n    },\n  );\n\n  app.get(\n    \"/api/security/alerts\",\n    isAuthenticated,\n    requireRead(\"admin\"),\n    async (req, res) => {\n      try {\n        const activeAlerts = securityMonitor.getActiveAlerts();\n        const dashboardAlerts = alertService.getDashboardAlerts();\n        \n        res.json({\n          activeAlerts,\n          dashboardAlerts,\n          totalActive: activeAlerts.length,\n          totalDashboard: dashboardAlerts.length,\n        });\n      } catch (error) {\n        console.error(\"Error fetching security alerts:\", error);\n        res.status(500).json({ message: \"Failed to fetch security alerts\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/security/test-alert\",\n    isAuthenticated,\n    requireWrite(\"admin\"),\n    async (req, res) => {\n      try {\n        await alertService.sendTestAlert();\n        res.json({ message: \"Test alert sent successfully\" });\n      } catch (error) {\n        console.error(\"Error sending test alert:\", error);\n        res.status(500).json({ message: \"Failed to send test alert\" });\n      }\n    },\n  );\n\n  // Enhanced login analytics\n  app.get(\n    \"/api/security/login-analytics\",\n    isAuthenticated,\n    requireRead(\"admin\"),\n    async (req, res) => {\n      try {\n        const { timeframe = '24h' } = req.query;\n        \n        let hours = 24;\n        if (timeframe === '1h') hours = 1;\n        else if (timeframe === '12h') hours = 12;\n        else if (timeframe === '7d') hours = 24 * 7;\n        else if (timeframe === '30d') hours = 24 * 30;\n        \n        const timeThreshold = new Date(Date.now() - hours * 60 * 60 * 1000);\n\n        const [totalLogins, failedLogins, uniqueUsers] = await Promise.all([\n          db.select({ count: count() }).from(loginLogs)\n            .where(sql`${loginLogs.loginTime} >= ${timeThreshold}`),\n            \n          db.select({ count: count() }).from(loginLogs)\n            .where(sql`${loginLogs.status} = 'failed' AND ${loginLogs.loginTime} >= ${timeThreshold}`),\n            \n          db.select({ count: sql<number>`COUNT(DISTINCT ${loginLogs.userId})` }).from(loginLogs)\n            .where(sql`${loginLogs.loginTime} >= ${timeThreshold}`),\n        ]);\n\n        res.json({\n          totalLogins: totalLogins[0]?.count || 0,\n          failedLogins: failedLogins[0]?.count || 0,\n          uniqueUsers: uniqueUsers[0]?.count || 0,\n          timeframe,\n          periodHours: hours,\n        });\n      } catch (error) {\n        console.error(\"Error fetching login analytics:\", error);\n        res.status(500).json({ message: \"Failed to fetch login analytics\" });\n      }\n    },\n  );\n\n  // Register enhanced routes for comprehensive system features\n  // Enhanced routes functionality integrated above\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":139229},"server/sample-data-fixed.ts":{"content":"import { db } from \"./db\";\nimport {\n  categories,\n  inventoryCategories,\n  inventoryItems,\n  products,\n  productIngredients,\n  customers,\n  parties,\n  orders,\n  orderItems,\n  purchases,\n  purchaseItems,\n  expenses,\n  assets,\n  productionSchedule,\n  settings,\n} from \"../shared/schema\";\n\nexport async function insertFixedSampleData() {\n  console.log(\"üå± Inserting comprehensive sample data...\");\n  \n  try {\n    // Clear existing data\n    await db.delete(orderItems);\n    await db.delete(orders);\n    await db.delete(productIngredients);\n    await db.delete(products);\n    await db.delete(categories);\n    await db.delete(purchaseItems);\n    await db.delete(purchases);\n    await db.delete(inventoryItems);\n    await db.delete(inventoryCategories);\n    await db.delete(customers);\n    await db.delete(parties);\n    await db.delete(expenses);\n    await db.delete(assets);\n    await db.delete(productionSchedule);\n    await db.delete(settings);\n\n    // Insert Categories\n    const categoryData = [\n      { name: \"Cakes & Pastries\", description: \"All types of cakes, cupcakes, and pastries\" },\n      { name: \"Breads & Rolls\", description: \"Fresh baked breads and dinner rolls\" },\n      { name: \"Cookies & Biscuits\", description: \"Various cookies and biscuits\" },\n      { name: \"Seasonal Items\", description: \"Holiday and seasonal specialty items\" },\n      { name: \"Custom Orders\", description: \"Custom made items for special occasions\" },\n    ];\n\n    const insertedCategories = await db.insert(categories).values(categoryData).returning();\n    console.log(`‚úÖ Inserted ${insertedCategories.length} product categories`);\n\n    // Insert Inventory Categories\n    const invCategoryData = [\n      { name: \"Baking Ingredients\", description: \"Flour, sugar, eggs, etc.\" },\n      { name: \"Dairy Products\", description: \"Milk, butter, cream, cheese\" },\n      { name: \"Flavorings\", description: \"Vanilla, chocolate, spices\" },\n      { name: \"Packaging\", description: \"Boxes, bags, containers\" },\n      { name: \"Equipment\", description: \"Baking tools and equipment\" },\n    ];\n\n    const insertedInvCategories = await db.insert(inventoryCategories).values(invCategoryData).returning();\n    console.log(`‚úÖ Inserted ${insertedInvCategories.length} inventory categories`);\n\n    // Insert Inventory Items\n    const inventoryData = [\n      {\n        name: \"All-Purpose Flour\",\n        currentStock: \"50.00\",\n        minLevel: \"10.00\",\n        unit: \"kg\",\n        costPerUnit: \"2.50\",\n        supplier: \"Premium Flour Co.\",\n        categoryId: insertedInvCategories[0].id,\n        lastRestocked: new Date(),\n      },\n      {\n        name: \"Granulated Sugar\",\n        currentStock: \"25.00\",\n        minLevel: \"5.00\",\n        unit: \"kg\",\n        costPerUnit: \"1.80\",\n        supplier: \"Sweet Supply Inc.\",\n        categoryId: insertedInvCategories[0].id,\n        lastRestocked: new Date(),\n      },\n      {\n        name: \"Fresh Eggs\",\n        currentStock: \"120.00\",\n        minLevel: \"24.00\",\n        unit: \"pieces\",\n        costPerUnit: \"0.25\",\n        supplier: \"Farm Fresh Eggs\",\n        categoryId: insertedInvCategories[1].id,\n        lastRestocked: new Date(),\n      },\n      {\n        name: \"Unsalted Butter\",\n        currentStock: \"15.00\",\n        minLevel: \"3.00\",\n        unit: \"kg\",\n        costPerUnit: \"8.50\",\n        supplier: \"Dairy Best Ltd.\",\n        categoryId: insertedInvCategories[1].id,\n        lastRestocked: new Date(),\n      },\n      {\n        name: \"Vanilla Extract\",\n        currentStock: \"2.00\",\n        minLevel: \"0.50\",\n        unit: \"liters\",\n        costPerUnit: \"45.00\",\n        supplier: \"Flavor Masters\",\n        categoryId: insertedInvCategories[2].id,\n        lastRestocked: new Date(),\n      },\n      {\n        name: \"Cocoa Powder\",\n        currentStock: \"8.00\",\n        minLevel: \"2.00\",\n        unit: \"kg\",\n        costPerUnit: \"12.00\",\n        supplier: \"Chocolate Heaven\",\n        categoryId: insertedInvCategories[2].id,\n        lastRestocked: new Date(),\n      },\n      {\n        name: \"Heavy Cream\",\n        currentStock: \"10.00\",\n        minLevel: \"2.00\",\n        unit: \"liters\",\n        costPerUnit: \"4.50\",\n        supplier: \"Dairy Best Ltd.\",\n        categoryId: insertedInvCategories[1].id,\n        lastRestocked: new Date(),\n      },\n      {\n        name: \"Cake Boxes (Medium)\",\n        currentStock: \"200.00\",\n        minLevel: \"50.00\",\n        unit: \"pieces\",\n        costPerUnit: \"0.75\",\n        supplier: \"Package Pro\",\n        categoryId: insertedInvCategories[3].id,\n        lastRestocked: new Date(),\n      },\n    ];\n\n    const insertedInventory = await db.insert(inventoryItems).values(inventoryData).returning();\n    console.log(`‚úÖ Inserted ${insertedInventory.length} inventory items`);\n\n    // Insert Products\n    const productData = [\n      {\n        name: \"Chocolate Birthday Cake\",\n        description: \"Rich chocolate cake with chocolate frosting\",\n        categoryId: insertedCategories[0].id,\n        price: \"35.00\",\n        cost: \"18.50\",\n        margin: \"47.14\",\n        sku: \"CHOC-CAKE-001\",\n        isActive: true,\n      },\n      {\n        name: \"Vanilla Cupcakes (6-pack)\",\n        description: \"Fluffy vanilla cupcakes with buttercream frosting\",\n        categoryId: insertedCategories[0].id,\n        price: \"12.00\",\n        cost: \"6.25\",\n        margin: \"47.92\",\n        sku: \"VAN-CUP-006\",\n        isActive: true,\n      },\n      {\n        name: \"Fresh Croissants\",\n        description: \"Buttery, flaky French croissants\",\n        categoryId: insertedCategories[1].id,\n        price: \"3.50\",\n        cost: \"1.75\",\n        margin: \"50.00\",\n        sku: \"CROIS-001\",\n        isActive: true,\n      },\n      {\n        name: \"Chocolate Chip Cookies (dozen)\",\n        description: \"Classic chocolate chip cookies\",\n        categoryId: insertedCategories[2].id,\n        price: \"8.00\",\n        cost: \"4.20\",\n        margin: \"47.50\",\n        sku: \"CHOC-COOK-12\",\n        isActive: true,\n      },\n      {\n        name: \"Wedding Cake (3-tier)\",\n        description: \"Elegant 3-tier wedding cake with custom decoration\",\n        categoryId: insertedCategories[4].id,\n        price: \"150.00\",\n        cost: \"65.00\",\n        margin: \"56.67\",\n        sku: \"WEDD-CAKE-3T\",\n        isActive: true,\n      },\n    ];\n\n    const insertedProducts = await db.insert(products).values(productData).returning();\n    console.log(`‚úÖ Inserted ${insertedProducts.length} products`);\n\n    // Insert Product Ingredients\n    const ingredientData = [\n      // Chocolate Birthday Cake\n      { productId: insertedProducts[0].id, inventoryItemId: insertedInventory[0].id, quantity: \"0.50\", unit: \"kg\" },\n      { productId: insertedProducts[0].id, inventoryItemId: insertedInventory[1].id, quantity: \"0.40\", unit: \"kg\" },\n      { productId: insertedProducts[0].id, inventoryItemId: insertedInventory[2].id, quantity: \"3.00\", unit: \"pieces\" },\n      { productId: insertedProducts[0].id, inventoryItemId: insertedInventory[3].id, quantity: \"0.25\", unit: \"kg\" },\n      { productId: insertedProducts[0].id, inventoryItemId: insertedInventory[5].id, quantity: \"0.10\", unit: \"kg\" },\n      \n      // Vanilla Cupcakes\n      { productId: insertedProducts[1].id, inventoryItemId: insertedInventory[0].id, quantity: \"0.30\", unit: \"kg\" },\n      { productId: insertedProducts[1].id, inventoryItemId: insertedInventory[1].id, quantity: \"0.20\", unit: \"kg\" },\n      { productId: insertedProducts[1].id, inventoryItemId: insertedInventory[2].id, quantity: \"2.00\", unit: \"pieces\" },\n      { productId: insertedProducts[1].id, inventoryItemId: insertedInventory[4].id, quantity: \"0.02\", unit: \"liters\" },\n      \n      // Fresh Croissants\n      { productId: insertedProducts[2].id, inventoryItemId: insertedInventory[0].id, quantity: \"0.08\", unit: \"kg\" },\n      { productId: insertedProducts[2].id, inventoryItemId: insertedInventory[3].id, quantity: \"0.05\", unit: \"kg\" },\n    ];\n\n    const insertedIngredients = await db.insert(productIngredients).values(ingredientData).returning();\n    console.log(`‚úÖ Inserted ${insertedIngredients.length} product ingredients`);\n\n    // Insert Customers\n    const customerData = [\n      {\n        name: \"Sarah Johnson\",\n        email: \"sarah.johnson@email.com\",\n        phone: \"+1-555-0123\",\n        address: \"123 Main Street, Cityville, ST 12345\",\n        totalOrders: 5,\n        totalSpent: \"150.00\",\n        isActive: true,\n      },\n      {\n        name: \"Michael Chen\",\n        email: \"michael.chen@email.com\",\n        phone: \"+1-555-0456\",\n        address: \"456 Oak Avenue, Townsburg, ST 67890\",\n        totalOrders: 3,\n        totalSpent: \"85.50\",\n        isActive: true,\n      },\n      {\n        name: \"Emily Davis\",\n        email: \"emily.davis@email.com\",\n        phone: \"+1-555-0789\",\n        address: \"789 Pine Road, Villageton, ST 13579\",\n        totalOrders: 8,\n        totalSpent: \"275.25\",\n        isActive: true,\n      },\n      {\n        name: \"Restaurant ABC\",\n        email: \"orders@restaurantabc.com\",\n        phone: \"+1-555-0999\",\n        address: \"321 Business District, Metro City, ST 24680\",\n        totalOrders: 12,\n        totalSpent: \"450.75\",\n        isActive: true,\n      },\n    ];\n\n    const insertedCustomers = await db.insert(customers).values(customerData).returning();\n    console.log(`‚úÖ Inserted ${insertedCustomers.length} customers`);\n\n    // Insert Parties (Suppliers)\n    const partyData = [\n      {\n        name: \"Premium Flour Co.\",\n        type: \"supplier\",\n        contactPerson: \"John Smith\",\n        email: \"orders@premiumflour.com\",\n        phone: \"+1-555-1111\",\n        address: \"100 Industrial Way, Flour City, ST 11111\",\n        balance: \"1250.00\",\n        isActive: true,\n      },\n      {\n        name: \"Dairy Best Ltd.\",\n        type: \"supplier\",\n        contactPerson: \"Maria Rodriguez\",\n        email: \"supply@dairybest.com\",\n        phone: \"+1-555-2222\",\n        address: \"200 Farm Road, Dairy Valley, ST 22222\",\n        balance: \"850.50\",\n        isActive: true,\n      },\n      {\n        name: \"Sweet Supply Inc.\",\n        type: \"supplier\",\n        contactPerson: \"David Wilson\",\n        email: \"sales@sweetsupply.com\",\n        phone: \"+1-555-3333\",\n        address: \"300 Sugar Lane, Sweet Town, ST 33333\",\n        balance: \"675.25\",\n        isActive: true,\n      },\n    ];\n\n    const insertedParties = await db.insert(parties).values(partyData).returning();\n    console.log(`‚úÖ Inserted ${insertedParties.length} suppliers/parties`);\n\n    // Insert Orders\n    const orderData = [\n      {\n        customerName: \"Sarah Johnson\",\n        customerId: insertedCustomers[0].id,\n        customerEmail: \"sarah.johnson@email.com\",\n        customerPhone: \"+1-555-0123\",\n        totalAmount: \"47.00\",\n        status: \"completed\",\n        paymentMethod: \"credit_card\",\n        deliveryDate: new Date(Date.now() + 24 * 60 * 60 * 1000), // Tomorrow\n        notes: \"Birthday party order\",\n      },\n      {\n        customerName: \"Michael Chen\",\n        customerId: insertedCustomers[1].id,\n        customerEmail: \"michael.chen@email.com\",\n        customerPhone: \"+1-555-0456\",\n        totalAmount: \"24.00\",\n        status: \"pending\",\n        paymentMethod: \"cash\",\n        deliveryDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // Day after tomorrow\n        notes: \"Office meeting order\",\n      },\n      {\n        customerName: \"Emily Davis\",\n        customerId: insertedCustomers[2].id,\n        customerEmail: \"emily.davis@email.com\",\n        customerPhone: \"+1-555-0789\",\n        totalAmount: \"185.00\",\n        status: \"in_progress\",\n        paymentMethod: \"credit_card\",\n        deliveryDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // Next week\n        notes: \"Wedding anniversary celebration\",\n      },\n    ];\n\n    const insertedOrders = await db.insert(orders).values(orderData).returning();\n    console.log(`‚úÖ Inserted ${insertedOrders.length} orders`);\n\n    // Insert Order Items\n    const orderItemData = [\n      // Sarah's Order\n      { orderId: insertedOrders[0].id, productId: insertedProducts[0].id, quantity: 1, unitPrice: \"35.00\", totalPrice: \"35.00\" },\n      { orderId: insertedOrders[0].id, productId: insertedProducts[1].id, quantity: 1, unitPrice: \"12.00\", totalPrice: \"12.00\" },\n      \n      // Michael's Order\n      { orderId: insertedOrders[1].id, productId: insertedProducts[1].id, quantity: 2, unitPrice: \"12.00\", totalPrice: \"24.00\" },\n      \n      // Emily's Order\n      { orderId: insertedOrders[2].id, productId: insertedProducts[4].id, quantity: 1, unitPrice: \"150.00\", totalPrice: \"150.00\" },\n      { orderId: insertedOrders[2].id, productId: insertedProducts[0].id, quantity: 1, unitPrice: \"35.00\", totalPrice: \"35.00\" },\n    ];\n\n    const insertedOrderItems = await db.insert(orderItems).values(orderItemData).returning();\n    console.log(`‚úÖ Inserted ${insertedOrderItems.length} order items`);\n\n    // Insert Purchases\n    const purchaseData = [\n      {\n        supplierName: \"Premium Flour Co.\",\n        partyId: insertedParties[0].id,\n        totalAmount: \"125.00\",\n        paymentMethod: \"bank_transfer\",\n        status: \"completed\",\n        purchaseDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 days ago\n        invoiceNumber: \"PFC-2024-001\",\n        notes: \"Monthly flour order\",\n      },\n      {\n        supplierName: \"Dairy Best Ltd.\",\n        partyId: insertedParties[1].id,\n        totalAmount: \"95.50\",\n        paymentMethod: \"credit_card\",\n        status: \"completed\",\n        purchaseDate: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // Yesterday\n        invoiceNumber: \"DBL-2024-007\",\n        notes: \"Weekly dairy products\",\n      },\n    ];\n\n    const insertedPurchases = await db.insert(purchases).values(purchaseData).returning();\n    console.log(`‚úÖ Inserted ${insertedPurchases.length} purchases`);\n\n    // Insert Purchase Items\n    const purchaseItemData = [\n      // Premium Flour Co. Purchase\n      { purchaseId: insertedPurchases[0].id, inventoryItemId: insertedInventory[0].id, quantity: \"50.00\", unitPrice: \"2.50\", totalPrice: \"125.00\" },\n      \n      // Dairy Best Ltd. Purchase\n      { purchaseId: insertedPurchases[1].id, inventoryItemId: insertedInventory[3].id, quantity: \"5.00\", unitPrice: \"8.50\", totalPrice: \"42.50\" },\n      { purchaseId: insertedPurchases[1].id, inventoryItemId: insertedInventory[6].id, quantity: \"10.00\", unitPrice: \"4.50\", totalPrice: \"45.00\" },\n      { purchaseId: insertedPurchases[1].id, inventoryItemId: insertedInventory[2].id, quantity: \"32.00\", unitPrice: \"0.25\", totalPrice: \"8.00\" },\n    ];\n\n    const insertedPurchaseItems = await db.insert(purchaseItems).values(purchaseItemData).returning();\n    console.log(`‚úÖ Inserted ${insertedPurchaseItems.length} purchase items`);\n\n    // Insert Expenses\n    const expenseData = [\n      {\n        description: \"Monthly rent for bakery\",\n        amount: \"2500.00\",\n        category: \"rent\",\n        date: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n        paymentMethod: \"bank_transfer\",\n        vendor: \"Property Management Co.\",\n      },\n      {\n        description: \"Electricity bill\",\n        amount: \"180.50\",\n        category: \"utilities\",\n        date: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000),\n        paymentMethod: \"online_payment\",\n        vendor: \"City Electric Company\",\n      },\n      {\n        description: \"Equipment maintenance\",\n        amount: \"225.00\",\n        category: \"maintenance\",\n        date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),\n        paymentMethod: \"credit_card\",\n        vendor: \"Bakery Equipment Services\",\n      },\n    ];\n\n    const insertedExpenses = await db.insert(expenses).values(expenseData).returning();\n    console.log(`‚úÖ Inserted ${insertedExpenses.length} expenses`);\n\n    // Insert Assets\n    const assetData = [\n      {\n        name: \"Commercial Stand Mixer\",\n        category: \"equipment\",\n        purchasePrice: \"1250.00\",\n        currentValue: \"950.00\",\n        purchaseDate: new Date(Date.now() - 365 * 24 * 60 * 60 * 1000), // 1 year ago\n        location: \"Main kitchen\",\n        condition: \"good\",\n        notes: \"20-quart capacity, serviced annually\",\n      },\n      {\n        name: \"Convection Oven\",\n        category: \"equipment\",\n        purchasePrice: \"3500.00\",\n        currentValue: \"2800.00\",\n        purchaseDate: new Date(Date.now() - 2 * 365 * 24 * 60 * 60 * 1000), // 2 years ago\n        location: \"Main kitchen\",\n        condition: \"excellent\",\n        notes: \"Double rack, energy efficient\",\n      },\n      {\n        name: \"Refrigerated Display Case\",\n        category: \"equipment\",\n        purchasePrice: \"2200.00\",\n        currentValue: \"1650.00\",\n        purchaseDate: new Date(Date.now() - 18 * 30 * 24 * 60 * 60 * 1000), // 18 months ago\n        location: \"Front counter\",\n        condition: \"good\",\n        notes: \"6-foot display case, temperature controlled\",\n      },\n    ];\n\n    const insertedAssets = await db.insert(assets).values(assetData).returning();\n    console.log(`‚úÖ Inserted ${insertedAssets.length} assets`);\n\n    // Insert Production Schedule\n    const scheduleData = [\n      {\n        productId: insertedProducts[0].id,\n        quantity: 5,\n        scheduledDate: new Date(Date.now() + 24 * 60 * 60 * 1000), // Tomorrow\n        startTime: new Date(Date.now() + 24 * 60 * 60 * 1000 + 8 * 60 * 60 * 1000), // 8 AM tomorrow\n        endTime: new Date(Date.now() + 24 * 60 * 60 * 1000 + 12 * 60 * 60 * 1000), // 12 PM tomorrow\n        assignedTo: \"Baker Team A\",\n        notes: \"Weekend orders - chocolate cakes\",\n        status: \"scheduled\",\n      },\n      {\n        productId: insertedProducts[1].id,\n        quantity: 12,\n        scheduledDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // Day after tomorrow\n        startTime: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000 + 6 * 60 * 60 * 1000), // 6 AM\n        endTime: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000 + 10 * 60 * 60 * 1000), // 10 AM\n        assignedTo: \"Baker Team B\",\n        notes: \"Bulk cupcake order for events\",\n        status: \"scheduled\",\n      },\n    ];\n\n    const insertedSchedule = await db.insert(productionSchedule).values(scheduleData).returning();\n    console.log(`‚úÖ Inserted ${insertedSchedule.length} production schedule items`);\n\n    // Insert Settings\n    const settingsData = [\n      { key: \"labor_cost_per_hour\", value: \"25.00\" },\n      { key: \"overhead_percentage\", value: \"15.0\" },\n      { key: \"production_time_hours\", value: \"2.0\" },\n      { key: \"business_name\", value: \"Sweet Treats Bakery\" },\n      { key: \"business_address\", value: \"123 Baker Street, Sweet City, ST 12345\" },\n      { key: \"business_phone\", value: \"+1-555-BAKERY\" },\n      { key: \"business_email\", value: \"orders@sweettreats.com\" },\n      { key: \"tax_rate\", value: \"8.5\" },\n      { key: \"currency\", value: \"USD\" },\n      { key: \"low_stock_threshold\", value: \"10\" },\n    ];\n\n    const insertedSettings = await db.insert(settings).values(settingsData).returning();\n    console.log(`‚úÖ Inserted ${insertedSettings.length} settings`);\n\n    console.log(\"üéâ Comprehensive sample data insertion completed successfully!\");\n    console.log(\"üìä Data includes: products, inventory, customers, suppliers, orders, purchases, expenses, assets, and production schedules\");\n    \n    return {\n      categories: insertedCategories.length,\n      inventoryCategories: insertedInvCategories.length,\n      inventoryItems: insertedInventory.length,\n      products: insertedProducts.length,\n      productIngredients: insertedIngredients.length,\n      customers: insertedCustomers.length,\n      parties: insertedParties.length,\n      orders: insertedOrders.length,\n      orderItems: insertedOrderItems.length,\n      purchases: insertedPurchases.length,\n      purchaseItems: insertedPurchaseItems.length,\n      expenses: insertedExpenses.length,\n      assets: insertedAssets.length,\n      productionSchedule: insertedSchedule.length,\n      settings: insertedSettings.length,\n    };\n    \n  } catch (error) {\n    console.error(\"‚ùå Error inserting sample data:\", error);\n    throw error;\n  }\n}","size_bytes":20009},"server/sample-data.ts":{"content":"import { db } from \"./db\";\nimport {\n  categories,\n  products,\n  inventoryItems,\n  inventoryCategories,\n  customers,\n  parties,\n  units,\n  purchases,\n  purchaseItems,\n  orders,\n  orderItems,\n  productIngredients,\n  productionSchedule,\n  expenses,\n  assets\n} from \"../shared/schema\";\nimport bcrypt from \"bcryptjs\";\n\nexport async function insertSampleData() {\n  console.log(\"üéØ Inserting comprehensive sample data...\");\n\n  try {\n    // Categories\n    const categoryData = [\n      { name: \"Cakes\", description: \"Birthday, wedding, and specialty cakes\" },\n      { name: \"Pastries\", description: \"Croissants, danishes, and sweet pastries\" },\n      { name: \"Bread\", description: \"Fresh baked breads and rolls\" },\n      { name: \"Cookies\", description: \"Assorted cookies and biscuits\" },\n      { name: \"Desserts\", description: \"Puddings, tarts, and specialty desserts\" }\n    ];\n\n    const insertedCategories = await db.insert(categories).values(categoryData).returning();\n    console.log(\"‚úÖ Categories inserted\");\n\n    // Inventory Categories\n    const invCategoryData = [\n      { name: \"Flour & Grains\", description: \"Basic baking ingredients\" },\n      { name: \"Dairy Products\", description: \"Milk, butter, cheese products\" },\n      { name: \"Sweeteners\", description: \"Sugar, honey, artificial sweeteners\" },\n      { name: \"Spices & Flavoring\", description: \"Vanilla, cinnamon, extracts\" },\n      { name: \"Packaging\", description: \"Boxes, bags, wrapping materials\" }\n    ];\n\n    const insertedInvCategories = await db.insert(inventoryCategories).values(invCategoryData).returning();\n    console.log(\"‚úÖ Inventory categories inserted\");\n\n    // Inventory Items\n    const inventoryData = [\n      {\n        name: \"All-Purpose Flour\",\n        currentStock: 500,\n        minLevel: 50,\n        unit: \"kg\",\n        costPerUnit: 2.50,\n        supplier: \"Grain Mills Ltd\",\n        categoryId: insertedInvCategories[0].id,\n        lastRestocked: new Date()\n      },\n      {\n        name: \"Unsalted Butter\",\n        currentStock: 75,\n        minLevel: 20,\n        unit: \"kg\",\n        costPerUnit: 8.50,\n        supplier: \"Dairy Fresh Co\",\n        categoryId: insertedInvCategories[1].id,\n        lastRestocked: new Date()\n      },\n      {\n        name: \"Granulated Sugar\",\n        currentStock: 200,\n        minLevel: 30,\n        unit: \"kg\",\n        costPerUnit: 1.80,\n        supplier: \"Sweet Supply Inc\",\n        categoryId: insertedInvCategories[2].id,\n        lastRestocked: new Date()\n      },\n      {\n        name: \"Large Eggs\",\n        currentStock: 120,\n        minLevel: 24,\n        unit: \"dozen\",\n        costPerUnit: 3.20,\n        supplier: \"Farm Fresh Eggs\",\n        categoryId: insertedInvCategories[1].id,\n        lastRestocked: new Date()\n      },\n      {\n        name: \"Vanilla Extract\",\n        currentStock: 12,\n        minLevel: 3,\n        unit: \"bottles\",\n        costPerUnit: 15.00,\n        supplier: \"Flavor Masters\",\n        categoryId: insertedInvCategories[3].id,\n        lastRestocked: new Date()\n      },\n      {\n        name: \"Cake Boxes (Small)\",\n        currentStock: 500,\n        minLevel: 100,\n        unit: \"pieces\",\n        costPerUnit: 0.75,\n        supplier: \"Package Pro\",\n        categoryId: insertedInvCategories[4].id,\n        lastRestocked: new Date()\n      }\n    ];\n\n    const insertedInventory = await db.insert(inventoryItems).values(inventoryData).returning();\n    console.log(\"‚úÖ Inventory items inserted\");\n\n    // Products with realistic cost calculations\n    const productData = [\n      {\n        name: \"Chocolate Birthday Cake\",\n        description: \"Rich chocolate cake with buttercream frosting\",\n        categoryId: insertedCategories[0].id,\n        price: 35.00,\n        cost: 18.50, // Material + labor + overhead\n        margin: 47.14,\n        sku: \"CHOC-CAKE-001\",\n        isActive: true\n      },\n      {\n        name: \"Vanilla Cupcakes (6-pack)\",\n        description: \"Classic vanilla cupcakes with vanilla frosting\",\n        categoryId: insertedCategories[0].id,\n        price: 12.00,\n        cost: 6.80,\n        margin: 43.33,\n        sku: \"VAN-CUP-006\",\n        isActive: true\n      },\n      {\n        name: \"Croissants (Pack of 4)\",\n        description: \"Buttery, flaky French croissants\",\n        categoryId: insertedCategories[1].id,\n        price: 8.50,\n        cost: 4.20,\n        margin: 50.59,\n        sku: \"CROISS-004\",\n        isActive: true\n      },\n      {\n        name: \"Sourdough Bread Loaf\",\n        description: \"Artisan sourdough bread, freshly baked\",\n        categoryId: insertedCategories[2].id,\n        price: 6.00,\n        cost: 2.80,\n        margin: 53.33,\n        sku: \"SOUR-BREAD\",\n        isActive: true\n      },\n      {\n        name: \"Chocolate Chip Cookies (Dozen)\",\n        description: \"Classic homemade chocolate chip cookies\",\n        categoryId: insertedCategories[3].id,\n        price: 9.00,\n        cost: 4.50,\n        margin: 50.00,\n        sku: \"CHOC-COOK-12\",\n        isActive: true\n      }\n    ];\n\n    const insertedProducts = await db.insert(products).values(productData).returning();\n    console.log(\"‚úÖ Products inserted\");\n\n    // Product Ingredients (for cost calculation)\n    const ingredientData = [\n      // Chocolate Birthday Cake ingredients\n      { productId: insertedProducts[0].id, inventoryItemId: insertedInventory[0].id, quantity: 0.5, unit: \"kg\" },\n      { productId: insertedProducts[0].id, inventoryItemId: insertedInventory[1].id, quantity: 0.25, unit: \"kg\" },\n      { productId: insertedProducts[0].id, inventoryItemId: insertedInventory[2].id, quantity: 0.3, unit: \"kg\" },\n      { productId: insertedProducts[0].id, inventoryItemId: insertedInventory[3].id, quantity: 0.5, unit: \"dozen\" },\n\n      // Vanilla Cupcakes ingredients\n      { productId: insertedProducts[1].id, inventoryItemId: insertedInventory[0].id, quantity: 0.2, unit: \"kg\" },\n      { productId: insertedProducts[1].id, inventoryItemId: insertedInventory[1].id, quantity: 0.1, unit: \"kg\" },\n      { productId: insertedProducts[1].id, inventoryItemId: insertedInventory[2].id, quantity: 0.15, unit: \"kg\" },\n      { productId: insertedProducts[1].id, inventoryItemId: insertedInventory[4].id, quantity: 0.05, unit: \"bottles\" }\n    ];\n\n    await db.insert(productIngredients).values(ingredientData);\n    console.log(\"‚úÖ Product ingredients inserted\");\n\n    // Customers\n    const customerData = [\n      {\n        name: \"Sarah Johnson\",\n        email: \"sarah.johnson@email.com\",\n        phone: \"+1-555-0123\",\n        address: \"123 Maple Street, Downtown\",\n        totalOrders: 0,\n        totalSpent: 0,\n        isActive: true\n      },\n      {\n        name: \"Mike Chen\",\n        email: \"mike.chen@email.com\",\n        phone: \"+1-555-0124\",\n        address: \"456 Oak Avenue, Midtown\",\n        totalOrders: 0,\n        totalSpent: 0,\n        isActive: true\n      },\n      {\n        name: \"Emma Davis\",\n        email: \"emma.davis@email.com\",\n        phone: \"+1-555-0125\",\n        address: \"789 Pine Road, Uptown\",\n        totalOrders: 0,\n        totalSpent: 0,\n        isActive: true\n      }\n    ];\n\n    const insertedCustomers = await db.insert(customers).values(customerData).returning();\n    console.log(\"‚úÖ Customers inserted\");\n\n    // Suppliers (Parties)\n    const supplierData = [\n      {\n        name: \"Grain Mills Ltd\",\n        type: \"supplier\",\n        contactPerson: \"John Smith\",\n        email: \"orders@grainmills.com\",\n        phone: \"+1-555-1001\",\n        address: \"100 Industrial Way, Grain City\",\n        balance: 0,\n        isActive: true\n      },\n      {\n        name: \"Dairy Fresh Co\",\n        type: \"supplier\",\n        contactPerson: \"Lisa Brown\",\n        email: \"supply@dairyfresh.com\",\n        phone: \"+1-555-1002\",\n        address: \"200 Farm Road, Dairy Valley\",\n        balance: 0,\n        isActive: true\n      },\n      {\n        name: \"Sweet Supply Inc\",\n        type: \"supplier\",\n        contactPerson: \"Robert Wilson\",\n        email: \"sales@sweetsupply.com\",\n        phone: \"+1-555-1003\",\n        address: \"300 Sugar Lane, Sweet Town\",\n        balance: 0,\n        isActive: true\n      }\n    ];\n\n    const insertedSuppliers = await db.insert(parties).values(supplierData).returning();\n    console.log(\"‚úÖ Suppliers inserted\");\n\n    // Sample Orders\n    const orderData = [\n      {\n        customerName: \"Sarah Johnson\",\n        customerId: insertedCustomers[0].id,\n        customerEmail: \"sarah.johnson@email.com\",\n        customerPhone: \"+1-555-0123\",\n        totalAmount: 47.00,\n        status: \"completed\",\n        paymentMethod: \"credit_card\",\n        deliveryDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // 2 days from now\n        notes: \"Birthday party order - please add 'Happy Birthday Sarah!' message\"\n      },\n      {\n        customerName: \"Mike Chen\",\n        customerId: insertedCustomers[1].id,\n        customerEmail: \"mike.chen@email.com\",\n        customerPhone: \"+1-555-0124\",\n        totalAmount: 20.50,\n        status: \"pending\",\n        paymentMethod: \"cash\",\n        deliveryDate: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000), // Tomorrow\n        notes: \"Office breakfast order\"\n      }\n    ];\n\n    const insertedOrders = await db.insert(orders).values(orderData).returning();\n    console.log(\"‚úÖ Orders inserted\");\n\n    // Order Items\n    const orderItemData = [\n      // Sarah's order\n      {\n        orderId: insertedOrders[0].id,\n        productId: insertedProducts[0].id,\n        quantity: 1,\n        unitPrice: 35.00,\n        totalPrice: 35.00\n      },\n      {\n        orderId: insertedOrders[0].id,\n        productId: insertedProducts[1].id,\n        quantity: 1,\n        unitPrice: 12.00,\n        totalPrice: 12.00\n      },\n      // Mike's order\n      {\n        orderId: insertedOrders[1].id,\n        productId: insertedProducts[2].id,\n        quantity: 2,\n        unitPrice: 8.50,\n        totalPrice: 17.00\n      }\n    ];\n\n    await db.insert(orderItems).values(orderItemData);\n    console.log(\"‚úÖ Order items inserted\");\n\n    // Sample Purchases\n    const purchaseData = [\n      {\n        supplierName: \"Grain Mills Ltd\",\n        partyId: insertedSuppliers[0].id,\n        totalAmount: 1250.00,\n        paymentMethod: \"bank_transfer\",\n        status: \"completed\",\n        invoiceNumber: \"GM-2024-001\",\n        notes: \"Monthly flour supply\",\n        purchaseDate: new Date()\n      },\n      {\n        supplierName: \"Dairy Fresh Co\",\n        partyId: insertedSuppliers[1].id,\n        totalAmount: 637.50,\n        paymentMethod: \"credit\",\n        status: \"pending\",\n        invoiceNumber: \"DF-2024-015\",\n        notes: \"Weekly dairy products\",\n        purchaseDate: new Date()\n      }\n    ];\n\n    const insertedPurchases = await db.insert(purchases).values(purchaseData).returning();\n    console.log(\"‚úÖ Purchases inserted\");\n\n    // Purchase Items\n    const purchaseItemData = [\n      // Grain Mills purchase\n      {\n        purchaseId: insertedPurchases[0].id,\n        inventoryItemId: insertedInventory[0].id,\n        quantity: 500,\n        unitPrice: 2.50,\n        totalPrice: 1250.00\n      },\n      // Dairy Fresh purchase\n      {\n        purchaseId: insertedPurchases[1].id,\n        inventoryItemId: insertedInventory[1].id,\n        quantity: 75,\n        unitPrice: 8.50,\n        totalPrice: 637.50\n      }\n    ];\n\n    await db.insert(purchaseItems).values(purchaseItemData);\n    console.log(\"‚úÖ Purchase items inserted\");\n\n    // Production Schedule\n    const productionData = [\n      {\n        productId: insertedProducts[0].id,\n        quantity: 5,\n        scheduledDate: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000),\n        startTime: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000),\n        endTime: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000 + 4 * 60 * 60 * 1000),\n        status: \"scheduled\",\n        notes: \"Morning batch for weekend orders\"\n      },\n      {\n        productId: insertedProducts[2].id,\n        quantity: 20,\n        scheduledDate: new Date(),\n        startTime: new Date(),\n        endTime: new Date(Date.now() + 2 * 60 * 60 * 1000),\n        status: \"in_progress\",\n        notes: \"Daily morning croissants\"\n      }\n    ];\n\n    await db.insert(productionSchedule).values(productionData);\n    console.log(\"‚úÖ Production schedule inserted\");\n\n    // Expenses\n    const expenseData = [\n      {\n        description: \"Monthly rent for bakery space\",\n        amount: 2500.00,\n        category: \"rent\",\n        date: new Date(),\n        paymentMethod: \"bank_transfer\",\n        vendor: \"Commercial Real Estate LLC\"\n      },\n      {\n        description: \"Utility bill - electricity\",\n        amount: 350.00,\n        category: \"utilities\",\n        date: new Date(),\n        paymentMethod: \"auto_debit\",\n        vendor: \"City Power Company\"\n      },\n      {\n        description: \"Insurance premium\",\n        amount: 450.00,\n        category: \"insurance\",\n        date: new Date(),\n        paymentMethod: \"credit_card\",\n        vendor: \"Business Insurance Co\"\n      }\n    ];\n\n    await db.insert(expenses).values(expenseData);\n    console.log(\"‚úÖ Expenses inserted\");\n\n    // Assets\n    const assetData = [\n      {\n        name: \"Commercial Oven - Model XL2000\",\n        category: \"equipment\",\n        purchasePrice: 15000.00,\n        currentValue: 12000.00,\n        purchaseDate: new Date(Date.now() - 365 * 24 * 60 * 60 * 1000), // 1 year ago\n        condition: \"excellent\",\n        location: \"Main kitchen\",\n        isActive: true\n      },\n      {\n        name: \"Stand Mixer - Industrial KM500\",\n        category: \"equipment\",\n        purchasePrice: 2500.00,\n        currentValue: 2000.00,\n        purchaseDate: new Date(Date.now() - 180 * 24 * 60 * 60 * 1000), // 6 months ago\n        condition: \"good\",\n        location: \"Prep area\",\n        isActive: true\n      },\n      {\n        name: \"Refrigerated Display Case\",\n        category: \"equipment\",\n        purchasePrice: 8500.00,\n        currentValue: 7500.00,\n        purchaseDate: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000), // 3 months ago\n        condition: \"excellent\",\n        location: \"Front store\",\n        isActive: true\n      }\n    ];\n\n    await db.insert(assets).values(assetData);\n    console.log(\"‚úÖ Assets inserted\");\n\n    // Add users with roles\n    const userData = [\n      {\n        email: \"admin@bakery.com\",\n        password: await bcrypt.hash(\"password123\", 10),\n        role: \"admin\",\n        name: \"Admin User\"\n      },\n      {\n        email: \"manager@bakery.com\",\n        password: await bcrypt.hash(\"password123\", 10),\n        role: \"manager\",\n        name: \"Manager User\"\n      },\n      {\n        email: \"staff@bakery.com\",\n        password: await bcrypt.hash(\"password123\", 10),\n        role: \"staff\",\n        name: \"Staff User\"\n      }\n    ];\n\n    await db.insert(parties).values(userData); // Assuming 'parties' table can also store user info or you have a separate 'users' table\n    console.log(\"‚úÖ Users inserted with roles\");\n\n    console.log(\"üéâ All sample data inserted successfully!\");\n\n  } catch (error) {\n    console.error(\"‚ùå Error inserting sample data:\", error);\n    throw error;\n  }\n}","size_bytes":15046},"server/utils.ts":{"content":"\n// Server utility functions\nexport function sanitizeInput(input: string | undefined): string {\n  if (!input || typeof input !== 'string') return '';\n  \n  return input\n    .replace(/<script[^>]*>.*?<\\/script>/gi, '') // Remove script tags\n    .replace(/<[^>]*>/g, '') // Remove HTML tags\n    .replace(/javascript:/gi, '') // Remove javascript: URLs\n    .replace(/on\\w+\\s*=/gi, '') // Remove event handlers\n    .trim()\n    .substring(0, 1000); // Limit length to prevent overflow\n}\n\nexport function validateEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\nexport function validatePhone(phone: string): boolean {\n  const phoneRegex = /^\\+?[\\d\\s\\-\\(\\)]{10,}$/;\n  return phoneRegex.test(phone);\n}\n\nexport function generateSecureId(prefix: string = ''): string {\n  const timestamp = Date.now().toString(36);\n  const randomPart = Math.random().toString(36).substr(2, 9);\n  return `${prefix}${timestamp}${randomPart}`.toUpperCase();\n}\n\nexport function isValidDate(dateString: string): boolean {\n  const date = new Date(dateString);\n  return !isNaN(date.getTime());\n}\n\nexport function formatError(error: any): string {\n  if (error.message) return error.message;\n  if (typeof error === 'string') return error;\n  return 'An unexpected error occurred';\n}\n\nexport function logSecurityEvent(event: string, details: any) {\n  console.warn(`üö® SECURITY EVENT: ${event}`, {\n    timestamp: new Date().toISOString(),\n    ...details\n  });\n}\n","size_bytes":1493},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, serial, varchar, text, numeric, boolean, timestamp, integer, jsonb, date } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey(),\n  email: varchar(\"email\", { length: 255 }).unique(),\n  password: varchar(\"password\", { length: 255 }),\n  firstName: varchar(\"first_name\", { length: 100 }),\n  lastName: varchar(\"last_name\", { length: 100 }),\n  profileImageUrl: varchar(\"profile_image_url\", { length: 500 }),\n  role: varchar(\"role\", { length: 20 }).notNull().default(\"staff\"), // super_admin, admin, manager, supervisor, marketer, staff\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Categories table\nexport const categories = pgTable(\"categories\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  categoryId: integer(\"category_id\"),\n  price: numeric(\"price\", { precision: 10, scale: 2 }).notNull(),\n  cost: numeric(\"cost\", { precision: 10, scale: 2 }).notNull(),\n  margin: numeric(\"margin\", { precision: 5, scale: 2 }).notNull(),\n  sku: varchar(\"sku\", { length: 50 }).unique(),\n  unit: varchar(\"unit\", { length: 50 }),\n  unitId: integer(\"unit_id\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Inventory Categories\nexport const inventoryCategories = pgTable(\"inventory_categories\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Inventory Items table\nexport const inventoryItems = pgTable(\"inventory_items\", {\n  id: serial(\"id\").primaryKey(),\n  invCode: varchar(\"inv_code\", { length: 50 }).unique(),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  currentStock: numeric(\"current_stock\", { precision: 10, scale: 2 }).notNull(),\n  openingStock: numeric(\"opening_stock\", { precision: 10, scale: 2 }).default(\"0\"),\n  purchasedQuantity: numeric(\"purchased_quantity\", { precision: 10, scale: 2 }).default(\"0\"),\n  consumedQuantity: numeric(\"consumed_quantity\", { precision: 10, scale: 2 }).default(\"0\"),\n  closingStock: numeric(\"closing_stock\", { precision: 10, scale: 2 }).default(\"0\"),\n  minLevel: numeric(\"min_level\", { precision: 10, scale: 2 }).notNull(),\n  unit: varchar(\"unit\", { length: 50 }).notNull(),\n  unitId: integer(\"unit_id\"), // Primary unit ID\n  secondaryUnitId: integer(\"secondary_unit_id\"), // Secondary unit ID\n  conversionRate: numeric(\"conversion_rate\", { precision: 15, scale: 6 }).default(\"1\"), // How many primary units = 1 secondary unit\n  costPerUnit: numeric(\"cost_per_unit\", { precision: 10, scale: 2 }).notNull(),\n  supplier: varchar(\"supplier\", { length: 200 }),\n  categoryId: integer(\"category_id\"),\n  isIngredient: boolean(\"is_ingredient\").default(false),\n  notes: text(\"notes\"),\n  lastRestocked: timestamp(\"last_restocked\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Product Ingredients table\nexport const productIngredients = pgTable(\"product_ingredients\", {\n  id: serial(\"id\").primaryKey(),\n  productId: integer(\"product_id\").notNull(),\n  inventoryItemId: integer(\"inventory_item_id\").notNull(),\n  quantity: numeric(\"quantity\", { precision: 10, scale: 2 }).notNull(),\n  unit: varchar(\"unit\", { length: 50 }).notNull(),\n  unitId: integer(\"unit_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Units table\nexport const units = pgTable(\"units\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 50 }).notNull().unique(),\n  abbreviation: varchar(\"abbreviation\", { length: 10 }).notNull(),\n  type: varchar(\"type\", { length: 20 }).notNull(),\n  baseUnit: varchar(\"base_unit\", { length: 100 }), // The base unit for conversion (e.g., 'gram' for weight)\n  conversionFactor: numeric(\"conversion_factor\", { precision: 15, scale: 6 }).default(\"1\"), // How many base units = 1 of this unit\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Unit Conversions table - for complex conversions between different unit types\nexport const unitConversions = pgTable(\"unit_conversions\", {\n  id: serial(\"id\").primaryKey(),\n  fromUnitId: integer(\"from_unit_id\").notNull(),\n  toUnitId: integer(\"to_unit_id\").notNull(),\n  conversionFactor: numeric(\"conversion_factor\", { precision: 15, scale: 6 }).notNull(),\n  formula: text(\"formula\"), // Optional formula for complex conversions\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Customers table\nexport const customers = pgTable(\"customers\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  email: varchar(\"email\", { length: 100 }),\n  phone: varchar(\"phone\", { length: 20 }),\n  address: text(\"address\"),\n  openingBalance: numeric(\"opening_balance\", { precision: 12, scale: 2 }).default(\"0\"),\n  currentBalance: numeric(\"current_balance\", { precision: 12, scale: 2 }).default(\"0\"),\n  totalOrders: integer(\"total_orders\").default(0),\n  totalSpent: numeric(\"total_spent\", { precision: 12, scale: 2 }).default(\"0\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Parties (Suppliers/Creditors) table\nexport const parties = pgTable(\"parties\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  type: varchar(\"type\", { length: 50 }).notNull(), // supplier, creditor, both\n  contactPerson: varchar(\"contact_person\", { length: 100 }),\n  email: varchar(\"email\", { length: 100 }),\n  phone: varchar(\"phone\", { length: 20 }),\n  address: text(\"address\"),\n  taxId: varchar(\"tax_id\", { length: 50 }),\n  notes: text(\"notes\"),\n  openingBalance: numeric(\"opening_balance\", { precision: 12, scale: 2 }).default(\"0\"),\n  currentBalance: numeric(\"current_balance\", { precision: 12, scale: 2 }).default(\"0\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Ledger Transactions table\nexport const ledgerTransactions = pgTable(\"ledger_transactions\", {\n  id: serial(\"id\").primaryKey(),\n  customerOrPartyId: integer(\"customer_or_party_id\").notNull(),\n  entityType: varchar(\"entity_type\", { length: 20 }).notNull(), // 'customer' or 'party'\n  transactionDate: timestamp(\"transaction_date\").notNull(),\n  description: text(\"description\").notNull(),\n  referenceNumber: varchar(\"reference_number\", { length: 100 }),\n  debitAmount: numeric(\"debit_amount\", { precision: 12, scale: 2 }).default(\"0\"),\n  creditAmount: numeric(\"credit_amount\", { precision: 12, scale: 2 }).default(\"0\"),\n  runningBalance: numeric(\"running_balance\", { precision: 12, scale: 2 }).notNull(),\n  transactionType: varchar(\"transaction_type\", { length: 50 }).notNull(), // 'sale', 'purchase', 'payment_received', 'payment_sent', 'adjustment'\n  relatedOrderId: integer(\"related_order_id\"),\n  relatedPurchaseId: integer(\"related_purchase_id\"),\n  paymentMethod: varchar(\"payment_method\", { length: 50 }),\n  notes: text(\"notes\"),\n  createdBy: varchar(\"created_by\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Orders table\nexport const orders = pgTable(\"orders\", {\n  id: serial(\"id\").primaryKey(),\n  customerName: varchar(\"customer_name\", { length: 200 }).notNull(),\n  customerId: integer(\"customer_id\"),\n  customerEmail: varchar(\"customer_email\", { length: 100 }),\n  customerPhone: varchar(\"customer_phone\", { length: 20 }),\n  totalAmount: numeric(\"total_amount\", { precision: 12, scale: 2 }).notNull(),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"pending\"),\n  paymentMethod: varchar(\"payment_method\", { length: 50 }).notNull(),\n  deliveryDate: timestamp(\"delivery_date\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Order Items table\nexport const orderItems = pgTable(\"order_items\", {\n  id: serial(\"id\").primaryKey(),\n  orderId: integer(\"order_id\").notNull(),\n  productId: integer(\"product_id\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  unit: varchar(\"unit\", { length: 50 }), // Unit name/abbreviation\n  unitId: integer(\"unit_id\"), // Reference to units table\n  unitPrice: numeric(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  totalPrice: numeric(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Purchases table\nexport const purchases = pgTable(\"purchases\", {\n  id: serial(\"id\").primaryKey(),\n  supplierName: varchar(\"supplier_name\", { length: 200 }).notNull(),\n  partyId: integer(\"party_id\"),\n  totalAmount: numeric(\"total_amount\", { precision: 12, scale: 2 }).notNull(),\n  paymentMethod: varchar(\"payment_method\", { length: 50 }).notNull(),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"pending\"),\n  purchaseDate: timestamp(\"purchase_date\").defaultNow(),\n  invoiceNumber: varchar(\"invoice_number\", { length: 100 }),\n  notes: text(\"notes\"),\n  createdBy: varchar(\"created_by\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Purchase Items table\nexport const purchaseItems = pgTable(\"purchase_items\", {\n  id: serial(\"id\").primaryKey(),\n  purchaseId: integer(\"purchase_id\").notNull(),\n  inventoryItemId: integer(\"inventory_item_id\").notNull(),\n  quantity: numeric(\"quantity\", { precision: 10, scale: 2 }).notNull(),\n  unitPrice: numeric(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  totalPrice: numeric(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Production Schedule table\nexport const productionSchedule = pgTable(\"production_schedule\", {\n  id: serial(\"id\").primaryKey(),\n  productId: integer(\"product_id\").references(() => products.id).notNull(),\n  quantity: numeric(\"quantity\", { precision: 10, scale: 2 }).notNull(),\n  actualQuantity: numeric(\"actual_quantity\", { precision: 10, scale: 2 }),\n  scheduledDate: date(\"scheduled_date\").notNull(),\n  startTime: timestamp(\"start_time\"),\n  endTime: timestamp(\"end_time\"),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  notes: text(\"notes\"),\n  status: varchar(\"status\", { length: 50 }).default(\"scheduled\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Inventory Transactions table\nexport const inventoryTransactions = pgTable(\"inventory_transactions\", {\n  id: serial(\"id\").primaryKey(),\n  inventoryItemId: integer(\"inventory_item_id\").notNull(),\n  type: varchar(\"type\", { length: 50 }).notNull(), // in, out, adjustment\n  quantity: numeric(\"quantity\", { precision: 10, scale: 2 }).notNull(),\n  reason: varchar(\"reason\", { length: 200 }),\n  reference: varchar(\"reference\", { length: 100 }),\n  createdBy: varchar(\"created_by\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Expenses table\nexport const expenses = pgTable(\"expenses\", {\n  id: serial(\"id\").primaryKey(),\n  description: text(\"description\").notNull(),\n  amount: numeric(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  category: varchar(\"category\", { length: 100 }).notNull(),\n  date: timestamp(\"date\").notNull(),\n  paymentMethod: varchar(\"payment_method\", { length: 50 }).notNull(),\n  vendor: varchar(\"vendor\", { length: 200 }),\n  receipt: varchar(\"receipt\", { length: 500 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Assets table\nexport const assets = pgTable(\"assets\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  category: varchar(\"category\", { length: 50 }).notNull(),\n  purchaseDate: timestamp(\"purchase_date\"),\n  purchasePrice: numeric(\"purchase_price\", { precision: 12, scale: 2 }),\n  currentValue: numeric(\"current_value\", { precision: 12, scale: 2 }),\n  description: text(\"description\"),\n  location: varchar(\"location\", { length: 100 }),\n  condition: varchar(\"condition\", { length: 50 }).default(\"good\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Permissions table\nexport const permissions = pgTable(\"permissions\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull().unique(),\n  resource: varchar(\"resource\", { length: 100 }).notNull(), // e.g., 'products', 'orders', 'dashboard'\n  action: varchar(\"action\", { length: 50 }).notNull(), // 'read', 'write', 'read_write'\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Role Permissions table\nexport const rolePermissions = pgTable(\"role_permissions\", {\n  id: serial(\"id\").primaryKey(),\n  role: varchar(\"role\", { length: 20 }).notNull(),\n  permissionId: integer(\"permission_id\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User Permissions table (for individual user overrides)\nexport const userPermissions = pgTable(\"user_permissions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  permissionId: integer(\"permission_id\").notNull(),\n  granted: boolean(\"granted\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Settings table\nexport const settings = pgTable(\"settings\", {\n  id: serial(\"id\").primaryKey(),\n  key: varchar(\"key\", { length: 100 }).notNull().unique(),\n  value: text(\"value\").notNull(),\n  type: varchar(\"type\", { length: 50 }).notNull().default(\"string\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Sessions table\nexport const sessions = pgTable(\"sessions\", {\n  sid: varchar(\"sid\").primaryKey(),\n  sess: jsonb(\"sess\").notNull(),\n  expire: timestamp(\"expire\").notNull(),\n});\n\n// Login logs table for tracking user authentication\nexport const loginLogs = pgTable(\"login_logs\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  email: varchar(\"email\", { length: 255 }).notNull(),\n  ipAddress: varchar(\"ip_address\", { length: 45 }).notNull(),\n  userAgent: text(\"user_agent\"),\n  status: varchar(\"status\", { length: 20 }).notNull(), // 'success' or 'failed'\n  loginTime: timestamp(\"login_time\").defaultNow(),\n  location: varchar(\"location\", { length: 200 }),\n  deviceType: varchar(\"device_type\", { length: 50 }),\n});\n\n// Audit logs table for tracking all user actions\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  userEmail: varchar(\"user_email\", { length: 255 }).notNull(),\n  userName: varchar(\"user_name\", { length: 200 }).notNull(),\n  action: varchar(\"action\", { length: 100 }).notNull(), // 'CREATE', 'UPDATE', 'DELETE', 'LOGIN', 'LOGOUT', etc.\n  resource: varchar(\"resource\", { length: 100 }).notNull(), // 'staff', 'product', 'order', 'settings', etc.\n  resourceId: varchar(\"resource_id\", { length: 100 }), // ID of the affected resource\n  details: jsonb(\"details\"), // Additional details about the action\n  oldValues: jsonb(\"old_values\"), // Previous values (for updates)\n  newValues: jsonb(\"new_values\"), // New values (for creates/updates)\n  ipAddress: varchar(\"ip_address\", { length: 45 }).notNull(),\n  userAgent: text(\"user_agent\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  status: varchar(\"status\", { length: 20 }).default(\"success\"), // 'success', 'failed', 'error'\n  errorMessage: text(\"error_message\"),\n});\n\n// Staff management tables\nexport const staff = pgTable(\"staff\", {\n  id: serial(\"id\").primaryKey(),\n  staffId: varchar(\"staff_id\", { length: 50 }).unique().notNull(),\n  firstName: varchar(\"first_name\", { length: 100 }).notNull(),\n  lastName: varchar(\"last_name\", { length: 100 }).notNull(),\n  email: varchar(\"email\", { length: 255 }).unique(),\n  phone: varchar(\"phone\", { length: 20 }),\n  address: text(\"address\"),\n  dateOfBirth: timestamp(\"date_of_birth\"),\n  hireDate: timestamp(\"hire_date\").notNull(),\n  position: varchar(\"position\", { length: 100 }).notNull(),\n  department: varchar(\"department\", { length: 100 }).notNull(),\n  employmentType: varchar(\"employment_type\", { length: 50 }).notNull(), // full-time, part-time, contract\n  salary: numeric(\"salary\", { precision: 12, scale: 2 }),\n  hourlyRate: numeric(\"hourly_rate\", { precision: 8, scale: 2 }),\n  bankAccount: varchar(\"bank_account\", { length: 100 }),\n  emergencyContact: varchar(\"emergency_contact\", { length: 200 }),\n  emergencyPhone: varchar(\"emergency_phone\", { length: 20 }),\n  citizenshipNumber: varchar(\"citizenship_number\", { length: 50 }),\n  panNumber: varchar(\"pan_number\", { length: 50 }),\n  profilePhoto: varchar(\"profile_photo\", { length: 500 }),\n  identityCardUrl: varchar(\"identity_card_url\", { length: 500 }),\n  agreementPaperUrl: varchar(\"agreement_paper_url\", { length: 500 }),\n  documents: jsonb(\"documents\"), // Store document URLs/paths\n  status: varchar(\"status\", { length: 20 }).default(\"active\"), // active, inactive, terminated\n  terminationDate: timestamp(\"termination_date\"),\n  terminationReason: text(\"termination_reason\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const attendance = pgTable(\"attendance\", {\n  id: serial(\"id\").primaryKey(),\n  staffId: integer(\"staff_id\").notNull(),\n  date: timestamp(\"date\").notNull(),\n  clockIn: timestamp(\"clock_in\"),\n  clockOut: timestamp(\"clock_out\"),\n  breakStart: timestamp(\"break_start\"),\n  breakEnd: timestamp(\"break_end\"),\n  totalHours: numeric(\"total_hours\", { precision: 4, scale: 2 }),\n  overtimeHours: numeric(\"overtime_hours\", { precision: 4, scale: 2 }),\n  status: varchar(\"status\", { length: 20 }).default(\"present\"), // present, absent, late, half-day, sick, vacation\n  notes: text(\"notes\"),\n  approvedBy: varchar(\"approved_by\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const salaryPayments = pgTable(\"salary_payments\", {\n  id: serial(\"id\").primaryKey(),\n  staffId: integer(\"staff_id\").notNull(),\n  payPeriodStart: timestamp(\"pay_period_start\").notNull(),\n  payPeriodEnd: timestamp(\"pay_period_end\").notNull(),\n  basicSalary: numeric(\"basic_salary\", { precision: 12, scale: 2 }).notNull(),\n  overtimePay: numeric(\"overtime_pay\", { precision: 12, scale: 2 }).default(\"0\"),\n  bonus: numeric(\"bonus\", { precision: 12, scale: 2 }).default(\"0\"),\n  allowances: numeric(\"allowances\", { precision: 12, scale: 2 }).default(\"0\"),\n  deductions: numeric(\"deductions\", { precision: 12, scale: 2 }).default(\"0\"),\n  tax: numeric(\"tax\", { precision: 12, scale: 2 }).default(\"0\"),\n  netPay: numeric(\"net_pay\", { precision: 12, scale: 2 }).notNull(),\n  paymentDate: timestamp(\"payment_date\"),\n  paymentMethod: varchar(\"payment_method\", { length: 50 }).default(\"bank_transfer\"),\n  status: varchar(\"status\", { length: 20 }).default(\"pending\"), // pending, paid, cancelled\n  notes: text(\"notes\"),\n  processedBy: varchar(\"processed_by\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const leaveRequests = pgTable(\"leave_requests\", {\n  id: serial(\"id\").primaryKey(),\n  staffId: integer(\"staff_id\").notNull(),\n  leaveType: varchar(\"leave_type\", { length: 50 }).notNull(), // sick, vacation, personal, maternity, etc.\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  totalDays: integer(\"total_days\").notNull(),\n  reason: text(\"reason\").notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"pending\"), // pending, approved, rejected\n  appliedDate: timestamp(\"applied_date\").defaultNow(),\n  reviewedBy: varchar(\"reviewed_by\"),\n  reviewedDate: timestamp(\"reviewed_date\"),\n  reviewComments: text(\"review_comments\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const staffSchedules = pgTable(\"staff_schedules\", {\n  id: serial(\"id\").primaryKey(),\n  staffId: integer(\"staff_id\").notNull(),\n  date: timestamp(\"date\").notNull(),\n  shiftStart: timestamp(\"shift_start\").notNull(),\n  shiftEnd: timestamp(\"shift_end\").notNull(),\n  position: varchar(\"position\", { length: 100 }),\n  department: varchar(\"department\", { length: 100 }),\n  isRecurring: boolean(\"is_recurring\").default(false),\n  recurringPattern: varchar(\"recurring_pattern\", { length: 50 }), // daily, weekly, monthly\n  notes: text(\"notes\"),\n  createdBy: varchar(\"created_by\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Type definitions\nexport type User = typeof users.$inferSelect;\nexport type UpsertUser = typeof users.$inferInsert;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = typeof categories.$inferInsert;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = typeof products.$inferInsert;\nexport type InventoryCategory = typeof inventoryCategories.$inferSelect;\nexport type InsertInventoryCategory = typeof inventoryCategories.$inferInsert;\nexport type InventoryItem = typeof inventoryItems.$inferSelect;\nexport type InsertInventoryItem = typeof inventoryItems.$inferInsert;\nexport type ProductIngredient = typeof productIngredients.$inferSelect;\nexport type InsertProductIngredient = typeof productIngredients.$inferInsert;\nexport type Unit = typeof units.$inferSelect;\nexport type InsertUnit = typeof units.$inferInsert;\nexport type UnitConversion = typeof unitConversions.$inferSelect;\nexport type InsertUnitConversion = typeof unitConversions.$inferInsert;\nexport type Customer = typeof customers.$inferSelect;\nexport type InsertCustomer = typeof customers.$inferInsert;\nexport type Party = typeof parties.$inferSelect;\nexport type InsertParty = typeof parties.$inferInsert;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = typeof orders.$inferInsert;\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = typeof orderItems.$inferInsert;\nexport type Purchase = typeof purchases.$inferSelect;\nexport type InsertPurchase = typeof purchases.$inferInsert;\nexport type PurchaseItem = typeof purchaseItems.$inferSelect;\nexport type InsertPurchaseItem = typeof purchaseItems.$inferInsert;\nexport type ProductionScheduleItem = typeof productionSchedule.$inferSelect;\nexport type InsertProductionScheduleItem = typeof productionSchedule.$inferInsert;\nexport type InventoryTransaction = typeof inventoryTransactions.$inferSelect;\nexport type InsertInventoryTransaction = typeof inventoryTransactions.$inferInsert;\nexport type Expense = typeof expenses.$inferSelect;\nexport type InsertExpense = typeof expenses.$inferInsert;\nexport type Asset = typeof assets.$inferSelect;\nexport type InsertAsset = typeof assets.$inferInsert;\nexport type Permission = typeof permissions.$inferSelect;\nexport type InsertPermission = typeof permissions.$inferInsert;\nexport type RolePermission = typeof rolePermissions.$inferSelect;\nexport type InsertRolePermission = typeof rolePermissions.$inferInsert;\nexport type UserPermission = typeof userPermissions.$inferSelect;\nexport type InsertUserPermission = typeof userPermissions.$inferInsert;\nexport type LedgerTransaction = typeof ledgerTransactions.$inferSelect;\nexport type InsertLedgerTransaction = typeof ledgerTransactions.$inferInsert;\nexport type LoginLog = typeof loginLogs.$inferSelect;\nexport type InsertLoginLog = typeof loginLogs.$inferInsert;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertAuditLog = typeof auditLogs.$inferInsert;\nexport type Staff = typeof staff.$inferSelect;\nexport type InsertStaff = typeof staff.$inferInsert;\nexport type Attendance = typeof attendance.$inferSelect;\nexport type InsertAttendance = typeof attendance.$inferInsert;\nexport type SalaryPayment = typeof salaryPayments.$inferSelect;\nexport type InsertSalaryPayment = typeof salaryPayments.$inferInsert;\nexport type LeaveRequest = typeof leaveRequests.$inferSelect;\nexport type InsertLeaveRequest = typeof leaveRequests.$inferInsert;\nexport type StaffSchedule = typeof staffSchedules.$inferSelect;\nexport type InsertStaffSchedule = typeof staffSchedules.$inferInsert;\n\n// Insert schemas for validation\nexport const insertUserSchema = createInsertSchema(users).omit({ \n  id: true, \n  createdAt: true, \n  updatedAt: true \n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPurchaseSchema = createInsertSchema(purchases).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertExpenseSchema = createInsertSchema(expenses).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPermissionSchema = createInsertSchema(permissions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRolePermissionSchema = createInsertSchema(rolePermissions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserPermissionSchema = createInsertSchema(userPermissions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLedgerTransactionSchema = createInsertSchema(ledgerTransactions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertLoginLogSchema = createInsertSchema(loginLogs).omit({\n  id: true,\n  loginTime: true,\n});\n\nexport const insertUnitConversionSchema = createInsertSchema(unitConversions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStaffSchema = createInsertSchema(staff).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  staffId: z.string().optional(), // Allow staffId to be optional during creation\n});\n\nexport const insertAttendanceSchema = createInsertSchema(attendance).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSalaryPaymentSchema = createInsertSchema(salaryPayments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertLeaveRequestSchema = createInsertSchema(leaveRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStaffScheduleSchema = createInsertSchema(staffSchedules).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Missing schemas needed by routes.ts\nexport const insertInventoryItemSchema = createInsertSchema(inventoryItems).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProductionScheduleItemSchema = createInsertSchema(productionSchedule).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPartySchema = createInsertSchema(parties).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAssetSchema = createInsertSchema(assets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  timestamp: true,\n});","size_bytes":28128},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { LanguageProvider } from \"@/contexts/LanguageContext\";\nimport { useState, useEffect } from \"react\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Products from \"@/pages/products\";\nimport Inventory from \"@/pages/inventory\";\nimport Orders from \"@/pages/orders\";\nimport Production from \"@/pages/production\";\nimport Assets from \"@/pages/assets\";\nimport Expenses from \"@/pages/expenses\";\nimport Parties from \"@/pages/parties\";\nimport Reports from \"@/pages/reports\";\nimport DayBook from \"./pages/day-book\";\nimport Transactions from \"@/pages/transactions\";\nimport Billing from \"@/pages/billing\";\nimport Settings from \"@/pages/settings\";\nimport Notifications from \"./pages/notifications\";\nimport AdminUsers from \"@/pages/admin-users\";\nimport LoginLogs from \"@/pages/LoginLogs\";\nimport NotFound from \"@/pages/not-found\";\nimport LoginForm from \"@/components/login-form\";\nimport Sidebar from \"@/components/sidebar\";\nimport Header from \"@/components/header\";\nimport Customers from \"@/pages/customers\";\nimport NotificationSettings from \"@/components/notification-settings\";\nimport CategoryManagement from \"@/pages/category-management\";\nimport Sales from \"@/pages/sales\";\nimport Purchases from \"@/pages/purchases\";\nimport PublicOrderForm from \"@/components/public-order-form\";\nimport Stock from \"@/pages/stock\";\nimport Ingredients from \"@/pages/ingredients\";\nimport Units from \"@/pages/units\";\nimport Recipes from \"@/pages/recipes\";\n\nimport Staff from \"@/pages/staff\";\nimport Attendance from \"@/pages/attendance\";\nimport Salary from \"@/pages/salary\";\nimport LeaveRequests from \"@/pages/leave-requests\";\nimport { ProtectedRoute } from \"@/components/protected-route\";\nimport ProductionPage from \"@/pages/production\";\n\nfunction Router() {\n  const { user, isLoading } = useAuth();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  // Public routes (no authentication required)\n  return (\n    <Switch>\n      <Route path=\"/order\" component={PublicOrderForm} />\n      <Route path=\"*\">\n        {!user ? (\n          <LoginForm\n            onSuccess={() => {\n              queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n            }}\n          />\n        ) : (\n          <AuthenticatedApp\n            sidebarOpen={sidebarOpen}\n            setSidebarOpen={setSidebarOpen}\n          />\n        )}\n      </Route>\n    </Switch>\n  );\n}\n\nfunction AuthenticatedApp({\n  sidebarOpen,\n  setSidebarOpen,\n}: {\n  sidebarOpen: boolean;\n  setSidebarOpen: (open: boolean) => void;\n}) {\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  // Listen to localStorage changes for sidebar state\n  useEffect(() => {\n    const handleStorageChange = () => {\n      const savedState = localStorage.getItem(\"sidebar-collapsed\");\n      if (savedState !== null) {\n        setIsCollapsed(JSON.parse(savedState));\n      }\n    };\n\n    // Initial load\n    handleStorageChange();\n\n    // Listen for storage changes\n    window.addEventListener(\"storage\", handleStorageChange);\n\n    // Custom event for same-page updates\n    const handleSidebarToggle = () => {\n      const savedState = localStorage.getItem(\"sidebar-collapsed\");\n      if (savedState !== null) {\n        setIsCollapsed(JSON.parse(savedState));\n      }\n    };\n\n    window.addEventListener(\"sidebar-toggle\", handleSidebarToggle);\n\n    return () => {\n      window.removeEventListener(\"storage\", handleStorageChange);\n      window.removeEventListener(\"sidebar-toggle\", handleSidebarToggle);\n    };\n  }, []);\n\n  return (\n    <div className=\"h-screen flex bg-background overflow-hidden\">\n      <Sidebar\n        isOpen={sidebarOpen}\n        onToggle={() => setSidebarOpen(!sidebarOpen)}\n      />\n      <main\n        className={`flex-1 flex flex-col min-w-0 transition-all duration-300 ${isCollapsed ? \"lg:ml-20\" : \"lg:ml-64\"}`}\n      >\n        <Header onMenuClick={() => setSidebarOpen(!sidebarOpen)} />\n        <div className=\"flex-1 overflow-y-auto\">\n          <Switch>\n            <Route\n              path=\"/\"\n              component={() => (\n                <ProtectedRoute resource=\"dashboard\" action=\"read\">\n                  <Dashboard />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/dashboard\"\n              component={() => (\n                <ProtectedRoute resource=\"dashboard\" action=\"read\">\n                  <Dashboard />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/production\"\n              component={() => (\n                <ProtectedRoute resource=\"production\" action=\"read\">\n                  <ProductionPage />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/recipes\"\n              component={() => (\n                <ProtectedRoute resource=\"products\" action=\"read\">\n                  <Recipes />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/products\"\n              component={() => (\n                <ProtectedRoute resource=\"products\" action=\"read\">\n                  <Products />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/inventory\"\n              component={() => (\n                <ProtectedRoute resource=\"inventory\" action=\"read\">\n                  <Inventory />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/stock\"\n              component={() => (\n                <ProtectedRoute resource=\"inventory\" action=\"read\">\n                  <Stock />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/ingredients\"\n              component={() => (\n                <ProtectedRoute resource=\"inventory\" action=\"read\">\n                  <Ingredients />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/orders\"\n              component={() => (\n                <ProtectedRoute resource=\"orders\" action=\"read\">\n                  <Orders />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/production\"\n              component={() => (\n                <ProtectedRoute resource=\"production\" action=\"read\">\n                  <Production />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/customers\"\n              component={() => (\n                <ProtectedRoute resource=\"customers\" action=\"read\">\n                  <Customers />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/parties\"\n              component={() => (\n                <ProtectedRoute resource=\"parties\" action=\"read\">\n                  <Parties />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/assets\"\n              component={() => (\n                <ProtectedRoute resource=\"assets\" action=\"read\">\n                  <Assets />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/expenses\"\n              component={() => (\n                <ProtectedRoute resource=\"expenses\" action=\"read\">\n                  <Expenses />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/reports\"\n              component={() => (\n                <ProtectedRoute resource=\"reports\" action=\"read\">\n                  <Reports />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/billing\"\n              component={() => (\n                <ProtectedRoute resource=\"billing\" action=\"read\">\n                  <Billing />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/day-book\"\n              component={() => (\n                <ProtectedRoute resource=\"reports\" action=\"read\">\n                  <DayBook />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/transactions\"\n              component={() => (\n                <ProtectedRoute resource=\"reports\" action=\"read\">\n                  <Transactions />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/billing\"\n              component={() => (\n                <ProtectedRoute resource=\"orders\" action=\"read\">\n                  <Billing />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/settings\"\n              component={() => (\n                <ProtectedRoute resource=\"settings\" action=\"read\">\n                  <Settings />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/notifications\"\n              component={() => (\n                <ProtectedRoute resource=\"dashboard\" action=\"read\">\n                  <Notifications />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/notification-settings\"\n              component={() => (\n                <ProtectedRoute resource=\"settings\" action=\"read\">\n                  <NotificationSettings />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/admin/users\"\n              component={() => (\n                <ProtectedRoute resource=\"users\" action=\"read_write\">\n                  <AdminUsers />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/admin/login-logs\"\n              component={() => (\n                <ProtectedRoute resource=\"admin\" action=\"read_write\">\n                  <LoginLogs />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/category-management\"\n              component={() => (\n                <ProtectedRoute resource=\"products\" action=\"read_write\">\n                  <CategoryManagement />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/sales\"\n              component={() => (\n                <ProtectedRoute resource=\"sales\" action=\"read\">\n                  <Sales />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/purchases\"\n              component={() => (\n                <ProtectedRoute resource=\"purchases\" action=\"read\">\n                  <Purchases />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/units\"\n              component={() => (\n                <ProtectedRoute resource=\"units\" action=\"read\">\n                  <Units />\n                </ProtectedRoute>\n              )}\n            />\n\n            <Route\n              path=\"/staff\"\n              component={() => (\n                <ProtectedRoute resource=\"staff\" action=\"read\">\n                  <Staff />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/attendance\"\n              component={() => (\n                <ProtectedRoute resource=\"staff\" action=\"read\">\n                  <Attendance />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/salary\"\n              component={() => (\n                <ProtectedRoute resource=\"staff\" action=\"read\">\n                  <Salary />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/leave-requests\"\n              component={() => (\n                <ProtectedRoute resource=\"staff\" action=\"read\">\n                  <LeaveRequests />\n                </ProtectedRoute>\n              )}\n            />\n            <Route\n              path=\"/staff-schedules\"\n              component={() => (\n                <ProtectedRoute resource=\"staff\" action=\"read\">\n                  <LeaveRequests />\n                </ProtectedRoute>\n              )}\n            />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <LanguageProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </LanguageProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":13048},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 98%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --radius: 0.5rem;\n\n  /* Sidebar colors */\n  --sidebar-background: hsl(0, 0%, 98%);\n  --sidebar-foreground: hsl(240, 5.3%, 26.1%);\n  --sidebar-primary: hsl(240, 5.9%, 10%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(240, 4.8%, 95.9%);\n  --sidebar-accent-foreground: hsl(240, 5.9%, 10%);\n  --sidebar-border: hsl(220, 13%, 91%);\n  --sidebar-ring: hsl(217.2, 91.2%, 59.8%);\n\n  /* Light theme - always active */\n  --background: 255 255 255;\n  /* white */\n  --foreground: 15 23 42;\n  /* slate-800 */\n\n  /* Chart colors */\n  --chart-1: 12 74 110;\n  --chart-2: 173 109 244;\n  --chart-3: 22 163 74;\n  --chart-4: 249 115 22;\n  --chart-5: 239 68 68;\n}\n\n@layer base {\n  * {\n    @apply border-gray-200;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground text-sm;\n  }\n}\n\n/* Custom bakery-themed styles */\n.bakery-gradient {\n  background: linear-gradient(135deg, var(--bakery-cream) 0%, var(--bakery-tan) 100%);\n}\n\n.bakery-shadow {\n  box-shadow: 0 4px 6px -1px rgba(139, 69, 19, 0.1), 0 2px 4px -1px rgba(139, 69, 19, 0.06);\n}\n\n.nav-item.active {\n  background-color: var(--bakery-brown);\n  color: white;\n}\n\n.nav-item:hover {\n  background-color: rgba(139, 69, 19, 0.1);\n}\n\n/* Active Section Highlight */\n.collapsible-content-active {\n  border-color: red;\n  /* Highlight the active section */\n}\n\n/* New Badge */\n.new-badge {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  padding: 2px 6px;\n  font-size: 0.75rem;\n  font-weight: 600;\n  color: #16a34a;\n  background-color: #ecfefe;\n  border-radius: 0.375rem;\n}\n\n/* Bullet Point */\n.bullet-point {\n  width: 2px;\n  height: 2px;\n  background-color: #ccc;\n  border-radius: 50%;\n  margin-right: 8px;\n}\n\n@layer base {\n  * {\n    @apply border-gray-200;\n  }\n\n  body {\n    font-family: \"Inter\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n    line-height: 1.6;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);\n    overflow-x: hidden;\n  }\n\n  /* Enhanced focus styles */\n  button:focus-visible {\n    outline: 2px solid hsl(var(--primary));\n    outline-offset: 2px;\n    border-radius: 8px;\n    transition: outline 0.2s ease;\n  }\n\n  input:focus,\n  textarea:focus,\n  select:focus {\n    outline: none;\n    box-shadow: 0 0 0 3px hsla(var(--primary), 0.1), 0 0 0 1px hsl(var(--primary));\n    transform: translateY(-1px);\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  /* Enhanced scrollbar */\n  ::-webkit-scrollbar {\n    width: 8px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: rgba(241, 245, 249, 0.6);\n    /* Light gray background */\n    border-radius: 12px;\n    margin: 4px;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: linear-gradient(135deg, rgb(150, 150, 150, 0.4), rgb(150, 150, 150, 0.6));\n    /* Orange gradient */\n    border-radius: 12px;\n    border: 2px solid rgba(241, 245, 249, 0.8);\n    transition: background 0.3s ease;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: linear-gradient(135deg, rgb(150, 150, 150, 0.6), rgb(150, 150, 150, 0.8));\n    /* Darker on hover */\n  }\n\n\n  /* Enhanced loading animations */\n  @keyframes pulse-subtle {\n\n    0%,\n    100% {\n      opacity: 1;\n      transform: scale(1);\n    }\n\n    50% {\n      opacity: 0.8;\n      transform: scale(1.02);\n    }\n  }\n\n  @keyframes bounce-gentle {\n\n    0%,\n    100% {\n      transform: translateY(0);\n    }\n\n    50% {\n      transform: translateY(-4px);\n    }\n  }\n\n  @keyframes fade-in-up {\n    0% {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n\n    100% {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  @keyframes slide-in-right {\n    0% {\n      opacity: 0;\n      transform: translateX(30px);\n    }\n\n    100% {\n      opacity: 1;\n      transform: translateX(0);\n    }\n  }\n\n  @keyframes scale-in {\n    0% {\n      opacity: 0;\n      transform: scale(0.95);\n    }\n\n    100% {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n\n  .animate-pulse-subtle {\n    animation: pulse-subtle 2s ease-in-out infinite;\n  }\n\n  .animate-bounce-gentle {\n    animation: bounce-gentle 2s ease-in-out infinite;\n  }\n\n  .animate-fade-in-up {\n    animation: fade-in-up 0.6s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .animate-slide-in-right {\n    animation: slide-in-right 0.5s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .animate-scale-in {\n    animation: scale-in 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  /* Gradient text animation */\n  @keyframes gradient-shift {\n    0% {\n      background-position: 0% 50%;\n    }\n\n    50% {\n      background-position: 100% 50%;\n    }\n\n    100% {\n      background-position: 0% 50%;\n    }\n  }\n\n  .gradient-text {\n    background: linear-gradient(-45deg, hsl(var(--primary)), #8b5cf6, #06b6d4, #10b981);\n    background-size: 400% 400%;\n    animation: gradient-shift 4s ease infinite;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  /* Enhanced card hover effects */\n  .card-hover {\n    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n    will-change: transform, box-shadow;\n  }\n\n  .card-hover:hover {\n    transform: translateY(-6px) scale(1.02);\n    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.12),\n      0 0 0 1px rgba(255, 255, 255, 0.05),\n      0 8px 16px -4px rgba(0, 0, 0, 0.1);\n  }\n\n  /* Enhanced button effects */\n  .btn-ripple {\n    position: relative;\n    overflow: hidden;\n    transform-style: preserve-3d;\n  }\n\n  .btn-ripple::before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 0;\n    height: 0;\n    border-radius: 50%;\n    background: radial-gradient(circle, rgba(255, 255, 255, 0.4) 0%, transparent 70%);\n    transform: translate(-50%, -50%);\n    transition: width 0.4s cubic-bezier(0.4, 0, 0.2, 1), height 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n    pointer-events: none;\n  }\n\n  .btn-ripple:active::before {\n    width: 300px;\n    height: 300px;\n  }\n\n  /* Enhanced dropdown animations */\n  .dropdown-content {\n    animation-duration: 0.3s;\n    animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n    animation-fill-mode: both;\n  }\n\n  .dropdown-enter {\n    animation-name: dropdown-enter;\n  }\n\n  .dropdown-exit {\n    animation-name: dropdown-exit;\n  }\n\n  @keyframes dropdown-enter {\n    from {\n      opacity: 0;\n      transform: scale(0.95) translateY(-8px);\n    }\n\n    to {\n      opacity: 1;\n      transform: scale(1) translateY(0);\n    }\n  }\n\n  @keyframes dropdown-exit {\n    from {\n      opacity: 1;\n      transform: scale(1) translateY(0);\n    }\n\n    to {\n      opacity: 0;\n      transform: scale(0.95) translateY(-8px);\n    }\n  }\n\n  /* Dropdown item animations */\n  .dropdown-item {\n    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n    position: relative;\n    overflow: hidden;\n  }\n\n  .dropdown-item::before {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    height: 100%;\n    width: 0;\n    background: linear-gradient(90deg, hsl(var(--primary) / 0.1) 0%, hsl(var(--primary) / 0.05) 100%);\n    transition: width 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    z-index: -1;\n  }\n\n  .dropdown-item:hover::before {\n    width: 100%;\n  }\n\n  .dropdown-item:hover {\n    transform: translateX(4px);\n    background: linear-gradient(90deg, hsl(var(--primary) / 0.08) 0%, hsl(var(--primary) / 0.03) 100%);\n  }\n\n  /* Sidebar specific animations */\n  .sidebar-item {\n    position: relative;\n    overflow: hidden;\n  }\n\n  .sidebar-item::before {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    height: 100%;\n    width: 3px;\n    background: hsl(var(--primary));\n    transform: scaleY(0);\n    transform-origin: bottom;\n    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .sidebar-item.active::before,\n  .sidebar-item:hover::before {\n    transform: scaleY(1);\n  }\n\n  /* Floating elements animation */\n  @keyframes float {\n\n    0%,\n    100% {\n      transform: translateY(0px);\n    }\n\n    50% {\n      transform: translateY(-10px);\n    }\n  }\n\n  .animate-float {\n    animation: float 3s ease-in-out infinite;\n  }\n\n  /* Page transition effects */\n  .page-transition-enter {\n    opacity: 0;\n    transform: translateX(20px);\n  }\n\n  .page-transition-enter-active {\n    opacity: 1;\n    transform: translateX(0);\n    transition: opacity 0.3s ease, transform 0.3s ease;\n  }\n\n  .page-transition-exit {\n    opacity: 1;\n    transform: translateX(0);\n  }\n\n  .page-transition-exit-active {\n    opacity: 0;\n    transform: translateX(-20px);\n    transition: opacity 0.3s ease, transform 0.3s ease;\n  }\n\n  /* Print styles */\n  @media print {\n    .no-print {\n      display: none !important;\n    }\n\n    body {\n      background: white !important;\n    }\n\n    .card-hover {\n      box-shadow: none !important;\n      transform: none !important;\n    }\n\n    * {\n      transition: none !important;\n      animation: none !important;\n    }\n  }\n\n  /* Smooth scrolling for main content */\n  .main-content {\n    scroll-behavior: smooth;\n  }\n\n  /* Custom scrollbar for main content */\n  .main-content::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  .main-content::-webkit-scrollbar-track {\n    background: transparent;\n  }\n\n  .main-content::-webkit-scrollbar-thumb {\n    background: rgba(0, 0, 0, 0.1);\n    border-radius: 3px;\n  }\n\n  .main-content::-webkit-scrollbar-thumb:hover {\n    background: rgba(0, 0, 0, 0.2);\n  }\n\n  /* Smooth transitions for interactive elements */\n  button,\n  a,\n  input,\n  textarea,\n  select {\n    transition: all 0.2s ease-in-out;\n  }\n\n  /* Enhanced button hover effects */\n  button:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  }\n\n  button:active {\n    transform: translateY(0);\n  }\n\n  /* Mobile optimizations */\n  @media (max-width: 768px) {\n    .card-hover:hover {\n      transform: translateY(-2px) scale(1.01);\n    }\n\n    input:focus,\n    textarea:focus,\n    select:focus {\n      transform: none;\n    }\n\n    .animate-float {\n      animation: none;\n    }\n\n    /* Reduce button hover effects on mobile */\n    button:hover {\n      transform: none;\n      box-shadow: none;\n    }\n  }\n\n  /* Reduced motion preferences */\n  @media (prefers-reduced-motion: reduce) {\n    * {\n      animation-duration: 0.01ms !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01ms !important;\n    }\n\n    .card-hover:hover {\n      transform: none;\n    }\n  }\n}","size_bytes":11169},"client/src/main.tsx":{"content":"import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { setupAutoTracking } from \"@/lib/activityTracker\";\nimport App from \"./App.tsx\";\nimport \"./index.css\";\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: (failureCount, error: any) => {\n        // Don't retry on 401/403 errors\n        if (error?.status === 401 || error?.status === 403) {\n          return false;\n        }\n        return failureCount < 3;\n      },\n      staleTime: 1000 * 60 * 5, // 5 minutes\n    },\n  },\n});\n\n// Initialize activity tracking\nsetupAutoTracking();\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n      <Toaster />\n      <ReactQueryDevtools initialIsOpen={false} />\n    </QueryClientProvider>\n  </React.StrictMode>,\n);","size_bytes":1051},"server/lib/storage.ts":{"content":"import { eq, desc, count, sql, and, gte, lte, lt, or, ilike, isNull } from \"drizzle-orm\";\nimport { db } from \"../db\";\nimport {\n  users,\n  categories,\n  products,\n  inventoryItems,\n  inventoryCategories,\n  productIngredients,\n  units,\n  unitConversions,\n  orders,\n  orderItems,\n  customers,\n  parties,\n  ledgerTransactions,\n  purchases,\n  purchaseItems,\n  productionSchedule,\n  inventoryTransactions,\n  expenses,\n  assets,\n  permissions,\n  rolePermissions,\n  userPermissions,\n  settings,\n  loginLogs,\n  auditLogs,\n  type User,\n  type UpsertUser,\n  type Category,\n  type InsertCategory,\n  type Product,\n  type InsertProduct,\n  type InventoryItem,\n  type InsertInventoryItem,\n  type InventoryCategory,\n  type InsertInventoryCategory,\n  type ProductIngredient,\n  type InsertProductIngredient,\n  type Unit,\n  type InsertUnit,\n  type UnitConversion,\n  type InsertUnitConversion,\n  type Order,\n  type InsertOrder,\n  type OrderItem,\n  type InsertOrderItem,\n  type Customer,\n  type InsertCustomer,\n  type Party,\n  type InsertParty,\n  type Purchase,\n  type InsertPurchase,\n  type PurchaseItem,\n  type InsertPurchaseItem,\n  type ProductionScheduleItem,\n  type InsertProductionScheduleItem,\n  type InventoryTransaction,\n  type InsertInventoryTransaction,\n  type Expense,\n  type InsertExpense,\n  type Asset,\n  type InsertAsset,\n  type Permission,\n  type InsertPermission,\n  type RolePermission,\n  type InsertRolePermission,\n  type UserPermission,\n  type InsertUserPermission,\n  type LedgerTransaction,\n  type InsertLedgerTransaction,\n  type LoginLog,\n  type InsertLoginLog,\n  type AuditLog,\n  type InsertAuditLog,\n  staff,\n  attendance,\n  salaryPayments,\n  leaveRequests,\n  staffSchedules,\n  type Staff,\n  type InsertStaff,\n  type Attendance,\n  type InsertAttendance,\n  type SalaryPayment,\n  type InsertSalaryPayment,\n  type LeaveRequest,\n  type InsertLeaveRequest,\n  type StaffSchedule,\n  type InsertStaffSchedule,\n} from \"../../shared/schema\";\nimport bcrypt from \"bcrypt\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  upsertUser(userData: UpsertUser): Promise<User>;\n  getAllUsers(excludeSuperAdmin?: boolean): Promise<User[]>;\n  updateUser(id: string, data: any): Promise<any>;\n  deleteUser(id: string): Promise<void>;\n  ensureDefaultAdmin(): Promise<void>;\n  getUserCount(excludeSuperAdmin?: boolean): Promise<number>;\n\n  // Category operations\n  getCategories(): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(\n    id: number,\n    category: Partial<InsertCategory>,\n  ): Promise<Category>;\n  deleteCategory(id: number): Promise<void>;\n\n  // Product operations\n  getProducts(): Promise<Product[]>;\n  getProductById(id: number): Promise<Product | undefined>;\n  getProductsWithIngredients(): Promise<any[]>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: number, product: Partial<InsertProduct>): Promise<Product>;\n  deleteProduct(id: number): Promise<void>;\n  getProductIngredients(productId: number): Promise<any[]>;\n  createProductIngredient(ingredient: any): Promise<any>;\n  deleteProductIngredients(productId: number): Promise<void>;\n\n  // Unit operations\n  getUnits(): Promise<Unit[]>;\n  getUnitById(id: number): Promise<Unit | undefined>;\n  createUnit(data: InsertUnit): Promise<Unit>;\n  updateUnit(id: number, data: Partial<InsertUnit>): Promise<Unit>;\n  deleteUnit(id: number): Promise<void>;\n\n  // Unit conversion operations\n  getUnitConversions(): Promise<any[]>;\n  createUnitConversion(data: any): Promise<any>;\n  updateUnitConversion(id: number, data: any): Promise<any>;\n  deleteUnitConversion(id: number): Promise<void>;\n  convertQuantity(\n    fromQuantity: number,\n    fromUnitId: number,\n    toUnitId: number,\n  ): Promise<number>;\n\n  // Inventory operations\n  getInventoryItems(options?: {\n    page?: number;\n    limit?: number;\n    search?: string;\n    group?: string;\n  }): Promise<{\n    items: InventoryItem[];\n    totalCount: number;\n    totalPages: number;\n    currentPage: number;\n    itemsPerPage: number;\n  }>;\n  getAllInventoryItems(): Promise<InventoryItem[]>;\n  getInventoryItemById(id: number): Promise<InventoryItem | undefined>;\n  createInventoryItem(data: any): Promise<InventoryItem>;\n  updateInventoryItem(\n    id: number,\n    data: Partial<InsertInventoryItem>,\n  ): Promise<InventoryItem>;\n  updateInventoryWithPurchase(\n    inventoryItemId: number,\n    purchaseQuantity: number,\n    purchaseRate: number,\n    purchaseDate: Date,\n  ): Promise<void>;\n  updateInventoryWithWeightedAverage(\n    inventoryItemId: number,\n    purchaseQuantity: number,\n    purchaseRate: number,\n    purchaseDate: Date,\n  ): Promise<void>;\n  deleteInventoryItem(id: number): Promise<void>;\n  getInventoryCategories(): Promise<InventoryCategory[]>;\n  createInventoryCategory(\n    data: InsertInventoryCategory,\n  ): Promise<InventoryCategory>;\n  updateInventoryCategory(\n    id: number,\n    data: Partial<InsertInventoryCategory>,\n  ): Promise<InventoryCategory>;\n  deleteInventoryCategory(id: number): Promise<void>;\n  createInventoryTransaction(\n    transaction: InsertInventoryTransaction,\n  ): Promise<InventoryTransaction>;\n  getInventoryTransactions(itemId?: number): Promise<any[]>;\n  getLowStockItems(): Promise<InventoryItem[]>;\n  getIngredients(): Promise<InventoryItem[]>;\n  syncStockFromPurchases();\n  updateInventoryStockAndCost(\n    itemId: number,\n    addedQuantity: number,\n    newCostPerUnit: number,\n  );\n  updateInventoryPurchaseStock(itemId: number, purchasedQuantity: number);\n\n  // Permission operations\n  getPermissions(): Promise<Permission[]>;\n  createPermission(data: InsertPermission): Promise<Permission>;\n  getRolePermissions(role: string): Promise<any[]>;\n  setRolePermissions(role: string, permissionIds: number[]): Promise<void>;\n  getUserPermissions(userId: string): Promise<any[]>;\n  setUserPermissions(\n    userId: string,\n    permissionUpdates: { permissionId: number; granted: boolean }[],\n  ): Promise<void>;\n  checkUserPermission(\n    userId: string,\n    resource: string,\n    action: string,\n  ): Promise<boolean>;\n  initializeDefaultPermissions(): Promise<void>;\n\n  // Settings operations\n  getSettings(): Promise<any>;\n  updateSettings(settingsData: any): Promise<any>;\n  updateOrCreateSetting(key: string, value: string): Promise<any>;\n  saveCompanySettings(settings: any): Promise<void>;\n\n  // Analytics operations\n  getDashboardStats(): Promise<any>;\n  getSalesAnalytics(startDate?: Date, endDate?: Date): Promise<any>;\n  getLoginAnalytics(startDate?: string, endDate?: string);\n\n  // Staff management operations\n  getStaff(): Promise<Staff[]>;\n  getStaffById(id: number): Promise<Staff | undefined>;\n  createStaff(staff: InsertStaff): Promise<Staff>;\n  updateStaff(id: number, staff: Partial<InsertStaff>): Promise<Staff>;\n  deleteStaff(id: number): Promise<void>;\n  getStaffByStaffId(staffId: string): Promise<Staff | null>;\n\n  // Attendance operations\n  getAttendance(\n    staffId?: number,\n    startDate?: Date,\n    endDate?: Date,\n  ): Promise<any[]>;\n  createAttendance(attendance: InsertAttendance): Promise<Attendance>;\n  updateAttendance(\n    id: number,\n    attendance: Partial<InsertAttendance>,\n  ): Promise<Attendance>;\n  deleteAttendance(id: number): Promise<void>;\n  clockIn(staffId: number): Promise<Attendance>;\n  clockOut(staffId: number): Promise<Attendance>;\n\n  // Salary operations\n  getSalaryPayments(staffId?: number): Promise<any[]>;\n  createSalaryPayment(payment: InsertSalaryPayment): Promise<SalaryPayment>;\n  updateSalaryPayment(\n    id: number,\n    payment: Partial<InsertSalaryPayment>,\n  ): Promise<SalaryPayment>;\n  deleteSalaryPayment(id: number): Promise<void>;\n\n  // Leave request operations\n  getLeaveRequests(staffId?: number): Promise<any[]>;\n  createLeaveRequest(request: InsertLeaveRequest): Promise<LeaveRequest>;\n  updateLeaveRequest(\n    id: number,\n    request: Partial<InsertLeaveRequest>,\n  ): Promise<LeaveRequest>;\n  deleteLeaveRequest(id: number): Promise<void>;\n\n  // Staff schedule operations\n  getStaffSchedules(staffId?: number, date?: Date): Promise<any[]>;\n  createStaffSchedule(schedule: InsertStaffSchedule): Promise<StaffSchedule>;\n  updateStaffSchedule(\n    id: number,\n    schedule: Partial<InsertStaffSchedule>,\n  ): Promise<StaffSchedule>;\n  deleteStaffSchedule(id: number): Promise<void>;\n\n  // Customer operations\n  getCustomers(): Promise<Customer[]>;\n  getCustomerById(id: number): Promise<Customer | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  updateCustomer(\n    id: number,\n    customer: Partial<InsertCustomer>,\n  ): Promise<Customer>;\n  deleteCustomer(id: number): Promise<void>;\n\n  // Party operations\n  getParties(): Promise<Party[]>;\n  getPartyById(id: number): Promise<Party | undefined>;\n  createParty(party: InsertParty): Promise<Party>;\n  updateParty(id: number, party: Partial<InsertParty>): Promise<Party>;\n  deleteParty(id: number): Promise<void>;\n\n  // Ledger Transaction Methods\n  createLedgerTransaction(data: any): Promise<any>;\n  getLedgerTransactions(\n    entityId: number,\n    entityType: \"customer\" | \"party\",\n  ): Promise<any[]>;\n  updateLedgerTransaction(id: number, data: any): Promise<any>;\n  deleteLedgerTransaction(id: number): Promise<void>;\n  recalculateRunningBalance(\n    entityId: number,\n    entityType: \"customer\" | \"party\",\n  ): Promise<number>;\n\n  // Asset operations\n  getAssets(): Promise<Asset[]>;\n  getAssetById(id: number): Promise<Asset | undefined>;\n  createAsset(asset: InsertAsset): Promise<Asset>;\n  updateAsset(id: number, asset: Partial<InsertAsset>): Promise<Asset>;\n  deleteAsset(id: number): Promise<void>;\n\n  // Audit Log operations\n  createAuditLog(log: InsertAuditLog): Promise<AuditLog>;\n  getAuditLogs(filters?: {\n    userId?: string;\n    action?: string;\n    resource?: string;\n    startDate?: Date;\n    endDate?: Date;\n    limit?: number;\n    offset?: number;\n  }): Promise<AuditLog[]>;\n  logLogin(\n    userId: string,\n    userEmail: string,\n    userName: string,\n    ipAddress: string,\n    userAgent: string,\n    success: boolean,\n    errorMessage?: string,\n  ): Promise<void>;\n  logLogout(\n    userId: string,\n    userEmail: string,\n    userName: string,\n    ipAddress: string,\n  ): Promise<void>;\n\n  // Purchase operations\n  getPurchases(): Promise<any[]>;\n  getPurchasesWithItems(): Promise<any[]>;\n  createPurchaseWithLedger(purchaseData: any): Promise<any>;\n  updatePurchase(id: number, purchaseData: any): Promise<any>;\n  deletePurchase(id: number): Promise<void>;\n\n  // Expense operations\n  getExpenses(): Promise<Expense[]>;\n  createExpense(expense: InsertExpense): Promise<Expense>;\n  updateExpense(id: number, expense: Partial<InsertExpense>): Promise<Expense>;\n  deleteExpense(id: number): Promise<void>;\n\n  // Order operations\n  getOrders(): Promise<Order[]>;\n  getOrderById(id: number): Promise<Order | undefined>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrder(id: number, order: Partial<InsertOrder>): Promise<Order>;\n  deleteOrder(id: number): Promise<void>;\n  getOrderItems(orderId: number);\n  createOrderItem(data: any);\n  getRecentOrders(limit: number): Promise<any[]>;\n\n  // Production operations\n  getTodayProductionSchedule(): Promise<any[]>;\n  getProductionSchedule(): Promise<any[]>;\n  createProductionScheduleItem(\n    item: InsertProductionScheduleItem,\n  ): Promise<ProductionScheduleItem>;\n  updateProductionScheduleItem(\n    id: number,\n    item: Partial<InsertProductionScheduleItem>,\n  ): Promise<ProductionScheduleItem>;\n  getProductionScheduleByDate(date: string): Promise<any[]>;\n\n  // Media operations\n  getMediaItems(): Promise<any[]>;\n  uploadMedia(userId: string, file: any): Promise<any>;\n  deleteMedia(id: number): Promise<void>;\n\n  // Billing operations\n  getBills(): Promise<any[]>;\n  createBill(billData: any): Promise<any>;\n  deleteBill(id: number): Promise<void>;\n\n  // Notifications\n  getNotifications(userId?: string): Promise<any[]>;\n  markNotificationAsRead(notificationId: string, userId: string): Promise<void>;\n  markAllNotificationsAsRead(userId: string): Promise<void>;\n  saveNotificationSubscription(\n    userId: string,\n    subscription: any,\n  ): Promise<void>;\n  removeNotificationSubscription(userId: string): Promise<void>;\n  saveNotificationSettings(userId: string, settings: any): Promise<void>;\n  createNotification(notification: any): Promise<any>;\n  triggerBusinessNotification(event: string, data: any): Promise<void>;\n\n  // Security monitoring\n  getSecurityMetrics(timeframe?: \"hour\" | \"day\" | \"week\"): Promise<any>;\n}\n\nexport class Storage implements IStorage {\n  private db;\n  private uploadsDir = path.join(process.cwd(), \"public\", \"uploads\");\n\n  constructor() {\n    this.db = db; // Assign the imported db instance\n\n    // Ensure directories exist\n    if (!fs.existsSync(this.uploadsDir)) {\n      fs.mkdirSync(this.uploadsDir, { recursive: true });\n    }\n\n    // Ensure staff documents directory exists\n    const staffDocumentsDir = path.join(this.uploadsDir, \"staff-documents\");\n    if (!fs.existsSync(staffDocumentsDir)) {\n      fs.mkdirSync(staffDocumentsDir, { recursive: true });\n    }\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await this.db\n      .select()\n      .from(users)\n      .where(eq(users.id, id))\n      .limit(1);\n\n    return result[0] || undefined;\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    return this.getUser(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    try {\n      const result = await this.db\n        .select()\n        .from(users)\n        .where(eq(users.email, email))\n        .limit(1);\n\n      return result[0] || undefined;\n    } catch (error) {\n      console.error(\"Error getting user by email:\", error);\n      return undefined;\n    }\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const { email, password, firstName, lastName, profileImageUrl, role } =\n      userData;\n\n    const existingUser = await this.getUserByEmail(email);\n\n    if (existingUser) {\n      const updateData: any = { firstName, lastName, profileImageUrl, role };\n      if (password) {\n        updateData.password = await bcrypt.hash(password, 10);\n      }\n\n      const [updatedUser] = await this.db\n        .update(users)\n        .set({ ...updateData, updatedAt: new Date() })\n        .where(eq(users.email, email))\n        .returning();\n\n      return updatedUser;\n    } else {\n      const hashedPassword = password\n        ? await bcrypt.hash(password, 10)\n        : undefined;\n      const [newUser] = await this.db\n        .insert(users)\n        .values({\n          id: `${role}_${Date.now()}`,\n          email,\n          password: hashedPassword,\n          firstName,\n          lastName,\n          profileImageUrl,\n          role: role || \"staff\",\n        })\n        .returning();\n\n      return newUser;\n    }\n  }\n\n  async getAllUsers(excludeSuperAdmin: boolean = false): Promise<User[]> {\n    let query = this.db.select().from(users);\n\n    if (excludeSuperAdmin) {\n      query = query.where(sql`${users.role} != 'super_admin'`);\n    }\n\n    return await query.orderBy(users.createdAt);\n  }\n\n  async updateUser(id: string, data: any): Promise<any> {\n    const [updatedUser] = await this.db\n      .update(users)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n\n    return updatedUser;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await this.db.delete(users).where(eq(users.id, id));\n  }\n\n  async ensureDefaultAdmin(): Promise<void> {\n    const superAdminEmail = \"superadmin@bakesewa.com\";\n    const adminEmail = \"admin@bakesewa.com\";\n    const managerEmail = \"manager@bakesewa.com\";\n    const staffEmail = \"staff@bakesewa.com\";\n\n    // Create superadmin user\n    const existingSuperAdmin = await this.getUserByEmail(superAdminEmail);\n    if (!existingSuperAdmin) {\n      await this.upsertUser({\n        email: superAdminEmail,\n        password: \"superadmin123\",\n        firstName: \"Super\",\n        lastName: \"Admin\",\n        role: \"super_admin\",\n      });\n      console.log(\"‚úÖ Default superadmin user created\");\n    }\n\n    const existingAdmin = await this.getUserByEmail(adminEmail);\n    if (!existingAdmin) {\n      await this.upsertUser({\n        email: adminEmail,\n        password: \"admin123\",\n        firstName: \"Admin\",\n        lastName: \"User\",\n        role: \"admin\",\n      });\n      console.log(\"‚úÖ Default admin user created\");\n    }\n\n    const existingManager = await this.getUserByEmail(managerEmail);\n    if (!existingManager) {\n      await this.upsertUser({\n        email: managerEmail,\n        password: \"manager123\",\n        firstName: \"Manager\",\n        lastName: \"User\",\n        role: \"manager\",\n      });\n      console.log(\"‚úÖ Default manager user created\");\n    }\n\n    const existingStaff = await this.getUserByEmail(staffEmail);\n    if (!existingStaff) {\n      await this.upsertUser({\n        email: staffEmail,\n        password: \"staff123\",\n        firstName: \"Staff\",\n        lastName: \"User\",\n        role: \"staff\",\n      });\n      console.log(\"‚úÖ Default staff user created\");\n    }\n  }\n\n  async getUserCount(excludeSuperAdmin: boolean = false): Promise<number> {\n    let query = this.db.select({ count: count() }).from(users);\n\n    if (excludeSuperAdmin) {\n      query = query.where(sql`${users.role} != 'super_admin'`);\n    }\n\n    const result = await query;\n    return result[0].count;\n  }\n\n  // Category operations\n  async getCategories(): Promise<Category[]> {\n    return await this.db.select().from(categories).orderBy(categories.name);\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await this.db\n      .insert(categories)\n      .values(category)\n      .returning();\n    return newCategory;\n  }\n\n  async updateCategory(\n    id: number,\n    category: Partial<InsertCategory>,\n  ): Promise<Category> {\n    const [updatedCategory] = await this.db\n      .update(categories)\n      .set(category)\n      .where(eq(categories.id, id))\n      .returning();\n    return updatedCategory;\n  }\n\n  async deleteCategory(id: number): Promise<void> {\n    await this.db.delete(categories).where(eq(categories.id, id));\n  }\n\n  // Product operations\n  async getProducts(): Promise<Product[]> {\n    return await this.db.select().from(products).orderBy(products.name);\n  }\n\n  async getProductById(id: number): Promise<Product | undefined> {\n    const result = await this.db\n      .select()\n      .from(products)\n      .where(eq(products.id, id))\n      .limit(1);\n    return result[0];\n  }\n\n  async getProductsWithIngredients(): Promise<any[]> {\n    const productsData = await this.db\n      .select({\n        id: products.id,\n        name: products.name,\n        description: products.description,\n        categoryId: products.categoryId,\n        price: products.price,\n        cost: products.cost,\n        margin: products.margin,\n        sku: products.sku,\n        isActive: products.isActive,\n      })\n      .from(products)\n      .orderBy(products.name);\n\n    const productsWithIngredients = await Promise.all(\n      productsData.map(async (product) => {\n        const ingredients = await this.getProductIngredients(product.id);\n        return { ...product, ingredients };\n      }),\n    );\n\n    return productsWithIngredients;\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await this.db\n      .insert(products)\n      .values(product)\n      .returning();\n    return newProduct;\n  }\n\n  async updateProduct(\n    id: number,\n    product: Partial<InsertProduct>,\n  ): Promise<Product> {\n    const [updatedProduct] = await this.db\n      .update(products)\n      .set({ ...product, updatedAt: new Date() })\n      .where(eq(products.id, id))\n      .returning();\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: number): Promise<void> {\n    await this.db\n      .delete(productIngredients)\n      .where(eq(productIngredients.productId, id));\n    await this.db.delete(products).where(eq(products.id, id));\n  }\n\n  async getProductIngredients(productId: number): Promise<any[]> {\n    return await this.db\n      .select({\n        id: productIngredients.id,\n        productId: productIngredients.productId,\n        inventoryItemId: productIngredients.inventoryItemId,\n        quantity: productIngredients.quantity,\n        unit: productIngredients.unit,\n        inventoryItemName: inventoryItems.name,\n        inventoryItemUnit: inventoryItems.unit,\n      })\n      .from(productIngredients)\n      .leftJoin(\n        inventoryItems,\n        eq(productIngredients.inventoryItemId, inventoryItems.id),\n      )\n      .where(eq(productIngredients.productId, productId));\n  }\n\n  async createProductIngredient(ingredient: any): Promise<any> {\n    const [newIngredient] = await this.db\n      .insert(productIngredients)\n      .values(ingredient)\n      .returning();\n    return newIngredient;\n  }\n\n  async deleteProductIngredients(productId: number): Promise<void> {\n    await this.db\n      .delete(productIngredients)\n      .where(eq(productIngredients.productId, productId));\n  }\n\n  // Unit operations\n  async getUnits(): Promise<Unit[]> {\n    try {\n      console.log(\"Storage getUnits called\");\n      const result = await this.db.select().from(units).orderBy(units.name);\n      console.log(`Storage getUnits result: ${result.length} units found`);\n\n      // Ensure all units have the required properties\n      const validUnits = result.filter(\n        (unit) => unit.id && unit.name && unit.abbreviation,\n      );\n      if (validUnits.length !== result.length) {\n        console.warn(\n          `Filtered out ${result.length - validUnits.length} invalid units`,\n        );\n      }\n\n      return validUnits;\n    } catch (error) {\n      console.error(\"Error in getUnits:\", error);\n      throw error; // Let the caller handle the error\n    }\n  }\n\n  async getUnitById(id: number): Promise<Unit | undefined> {\n    try {\n      const result = await this.db\n        .select()\n        .from(units)\n        .where(eq(units.id, id))\n        .limit(1);\n      return result[0];\n    } catch (error) {\n      console.error(\"Error fetching unit by ID:\", error);\n      throw error;\n    }\n  }\n\n  async getActiveUnits() {\n    try {\n      const result = await this.db\n        .select()\n        .from(units)\n        .where(eq(units.isActive, true))\n        .orderBy(units.name);\n      return result;\n    } catch (error) {\n      console.error(\"Error in getActiveUnits:\", error);\n      throw error;\n    }\n  }\n\n  async createUnit(data: InsertUnit): Promise<Unit> {\n    try {\n      console.log(\"Creating unit with data:\", data);\n\n      // Validate required fields\n      if (!data.name?.trim()) {\n        throw new Error(\"Unit name is required\");\n      }\n      if (!data.abbreviation?.trim()) {\n        throw new Error(\"Unit abbreviation is required\");\n      }\n      if (!data.type?.trim()) {\n        throw new Error(\"Unit type is required\");\n      }\n\n      const [newUnit] = await this.db\n        .insert(units)\n        .values({\n          ...data,\n          name: data.name.trim(),\n          abbreviation: data.abbreviation.trim(),\n          type: data.type.trim(),\n          isActive: data.isActive !== undefined ? data.isActive : true,\n        })\n        .returning();\n\n      console.log(\"Unit created successfully:\", newUnit);\n      return newUnit;\n    } catch (error) {\n      console.error(\"Error creating unit in storage:\", error);\n      throw error;\n    }\n  }\n\n  async updateUnit(id: number, data: Partial<InsertUnit>): Promise<Unit> {\n    const [updatedUnit] = await this.db\n      .update(units)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(units.id, id))\n      .returning();\n    return updatedUnit;\n  }\n\n  async deleteUnit(id: number): Promise<void> {\n    try {\n      // Check if unit is being used in other tables before deletion\n      const usageChecks = await Promise.all([\n        // Check products table\n        this.db.select({ count: sql`count(*)` }).from(products).where(eq(products.unitId, id)),\n        // Check inventory items table (primary unit)\n        this.db.select({ count: sql`count(*)` }).from(inventoryItems).where(eq(inventoryItems.unitId, id)),\n        // Check inventory items table (secondary unit)\n        this.db.select({ count: sql`count(*)` }).from(inventoryItems).where(eq(inventoryItems.secondaryUnitId, id)),\n        // Check product ingredients table\n        this.db.select({ count: sql`count(*)` }).from(productIngredients).where(eq(productIngredients.unitId, id)),\n        // Check unit conversions table (from unit)\n        this.db.select({ count: sql`count(*)` }).from(unitConversions).where(eq(unitConversions.fromUnitId, id)),\n        // Check unit conversions table (to unit)\n        this.db.select({ count: sql`count(*)` }).from(unitConversions).where(eq(unitConversions.toUnitId, id)),\n      ]);\n\n      const totalUsage = usageChecks.reduce((sum, result) => sum + Number(result[0].count), 0);\n\n      if (totalUsage > 0) {\n        throw new Error(`Cannot delete unit: it is being used in ${totalUsage} record(s). Please remove all references to this unit before deleting it.`);\n      }\n\n      // Safe to delete\n      await this.db.delete(units).where(eq(units.id, id));\n      console.log(`Unit ${id} deleted successfully`);\n    } catch (error) {\n      console.error(\"Error deleting unit:\", error);\n      throw error;\n    }\n  }\n\n  // Unit conversion operations\n  async getUnitConversions(): Promise<any[]> {\n    return await this.db\n      .select({\n        id: unitConversions.id,\n        fromUnitId: unitConversions.fromUnitId,\n        toUnitId: unitConversions.toUnitId,\n        conversionFactor: unitConversions.conversionFactor,\n        formula: unitConversions.formula,\n        isActive: unitConversions.isActive,\n        createdAt: unitConversions.createdAt,\n        updatedAt: unitConversions.updatedAt,\n        fromUnit: {\n          id: sql`from_unit.id`,\n          name: sql`from_unit.name`,\n          abbreviation: sql`from_unit.abbreviation`,\n        },\n        toUnit: {\n          id: sql`to_unit.id`,\n          name: sql`to_unit.name`,\n          abbreviation: sql`to_unit.abbreviation`,\n        },\n      })\n      .from(unitConversions)\n      .leftJoin(\n        sql`units as from_unit`,\n        sql`from_unit.id = ${unitConversions.fromUnitId}`,\n      )\n      .leftJoin(\n        sql`units as to_unit`,\n        sql`to_unit.id = ${unitConversions.toUnitId}`,\n      )\n      .orderBy(sql`from_unit.name`, sql`to_unit.name`);\n  }\n\n  async createUnitConversion(data: any): Promise<any> {\n    const [newConversion] = await this.db\n      .insert(unitConversions)\n      .values(data)\n      .returning();\n    return newConversion;\n  }\n\n  async updateUnitConversion(id: number, data: any): Promise<any> {\n    const [updatedConversion] = await this.db\n      .update(unitConversions)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(unitConversions.id, id))\n      .returning();\n    return updatedConversion;\n  }\n\n  async deleteUnitConversion(id: number): Promise<void> {\n    await this.db.delete(unitConversions).where(eq(unitConversions.id, id));\n  }\n\n  async convertQuantity(\n    fromQuantity: number,\n    fromUnitId: number,\n    toUnitId: number,\n  ): Promise<number> {\n    if (fromUnitId === toUnitId) return fromQuantity;\n\n    // Try direct conversion\n    const directConversion = await this.db\n      .select()\n      .from(unitConversions)\n      .where(\n        and(\n          eq(unitConversions.fromUnitId, fromUnitId),\n          eq(unitConversions.toUnitId, toUnitId),\n          eq(unitConversions.isActive, true),\n        ),\n      )\n      .limit(1);\n\n    if (directConversion.length > 0) {\n      return fromQuantity * parseFloat(directConversion[0].conversionFactor);\n    }\n\n    // Try reverse conversion\n    const reverseConversion = await this.db\n      .select()\n      .from(unitConversions)\n      .where(\n        and(\n          eq(unitConversions.fromUnitId, toUnitId),\n          eq(unitConversions.toUnitId, fromUnitId),\n          eq(unitConversions.isActive, true),\n        ),\n      )\n      .limit(1);\n\n    if (reverseConversion.length > 0) {\n      return fromQuantity / parseFloat(reverseConversion[0].conversionFactor);\n    }\n\n    throw new Error(\n      `No conversion found between units ${fromUnitId} and ${toUnitId}`,\n    );\n  }\n\n  // Inventory operations\n  async getInventoryItems(options?: {\n    page?: number;\n    limit?: number;\n    search?: string;\n    group?: string;\n  }): Promise<{\n    items: InventoryItem[];\n    totalCount: number;\n    totalPages: number;\n    currentPage: number;\n    itemsPerPage: number;\n  }> {\n    try {\n      const page = options?.page || 1;\n      const limit = options?.limit || 10;\n      const search = options?.search?.toLowerCase() || \"\";\n      const group = options?.group || \"all\";\n      const offset = (page - 1) * limit;\n\n      // Build base query with simplified selection\n      let baseQuery = this.db\n        .select({\n          id: inventoryItems.id,\n          invCode: inventoryItems.invCode,\n          name: inventoryItems.name,\n          currentStock: inventoryItems.currentStock,\n          openingStock: inventoryItems.openingStock,\n          purchasedQuantity: inventoryItems.purchasedQuantity,\n          consumedQuantity: inventoryItems.consumedQuantity,\n          closingStock: inventoryItems.closingStock,\n          minLevel: inventoryItems.minLevel,\n          unit: inventoryItems.unit,\n          unitId: inventoryItems.unitId,\n          secondaryUnitId: inventoryItems.secondaryUnitId,\n          conversionRate: inventoryItems.conversionRate,\n          costPerUnit: inventoryItems.costPerUnit,\n          supplier: inventoryItems.supplier,\n          categoryId: inventoryItems.categoryId,\n          isIngredient: inventoryItems.isIngredient,\n          lastRestocked: inventoryItems.lastRestocked,\n          createdAt: inventoryItems.createdAt,\n          updatedAt: inventoryItems.updatedAt,\n        })\n        .from(inventoryItems)\n        .orderBy(desc(inventoryItems.createdAt));\n\n      let countQuery = this.db\n        .select({ count: count() })\n        .from(inventoryItems);\n\n      // Build where conditions\n      const whereConditions = [];\n\n      if (search) {\n        whereConditions.push(\n          or(\n            ilike(inventoryItems.name, `%${search}%`),\n            ilike(inventoryItems.supplier, `%${search}%`),\n            ilike(inventoryItems.invCode, `%${search}%`)\n          )\n        );\n      }\n\n      if (group && group !== \"all\") {\n        if (group === \"ingredients\") {\n          whereConditions.push(eq(inventoryItems.isIngredient, true));\n        } else if (group === \"uncategorized\") {\n          whereConditions.push(isNull(inventoryItems.categoryId));\n        } else if (!isNaN(parseInt(group))) {\n          whereConditions.push(eq(inventoryItems.categoryId, parseInt(group)));\n        }\n      }\n\n      if (whereConditions.length > 0) {\n        baseQuery = baseQuery.where(and(...whereConditions));\n        countQuery = countQuery.where(and(...whereConditions));\n      }\n\n      const [items, totalResult] = await Promise.all([\n        baseQuery.limit(limit).offset(offset),\n        countQuery\n      ]);\n\n      const totalCount = totalResult[0]?.count || 0;\n      const totalPages = Math.ceil(totalCount / limit);\n\n      // Add category and unit information manually\n      const enrichedItems = await Promise.all(\n        items.map(async (item) => {\n          let categoryName = null;\n          let unitAbbreviation = item.unit;\n          let group = 'uncategorized';\n\n          // Get category name if categoryId exists\n          if (item.categoryId) {\n            try {\n              const category = await this.db\n                .select({ name: inventoryCategories.name })\n                .from(inventoryCategories)\n                .where(eq(inventoryCategories.id, item.categoryId))\n                .limit(1);\n              if (category.length > 0) {\n                categoryName = category[0].name;\n                group = item.categoryId.toString();\n              }\n            } catch (error) {\n              console.warn(`Failed to fetch category for item ${item.id}:`, error);\n            }\n          }\n\n          // Get unit abbreviation if unitId exists\n          if (item.unitId) {\n            try {\n              const unit = await this.db\n                .select({ abbreviation: units.abbreviation })\n                .from(units)\n                .where(eq(units.id, item.unitId))\n                .limit(1);\n              if (unit.length > 0) {\n                unitAbbreviation = unit[0].abbreviation;\n              }\n            } catch (error) {\n              console.warn(`Failed to fetch unit for item ${item.id}:`, error);\n            }\n          }\n\n          // Determine group\n          if (item.isIngredient) {\n            group = 'ingredients';\n          }\n\n          return {\n            ...item,\n            categoryName,\n            unitAbbreviation,\n            group,\n            notes: ''\n          };\n        })\n      );\n\n      return {\n        items: enrichedItems,\n        totalCount,\n        totalPages,\n        currentPage: page,\n        itemsPerPage: limit\n      };\n    } catch (error) {\n      console.error(\"Error in getInventoryItems:\", error);\n      return {\n        items: [],\n        totalCount: 0,\n        totalPages: 0,\n        currentPage: 1,\n        itemsPerPage: 10\n      };\n    }\n  }\n\n  async getAllInventoryItems(): Promise<InventoryItem[]> {\n    try {\n      return await this.db\n        .select()\n        .from(inventoryItems)\n        .orderBy(inventoryItems.name);\n    } catch (error) {\n      console.error(\"Error in getAllInventoryItems:\", error);\n      return [];\n    }\n  }\n\n  async getInventoryItemById(id: number): Promise<InventoryItem | undefined> {\n    const result = await this.db\n      .select()\n      .from(inventoryItems)\n      .where(eq(inventoryItems.id, id))\n      .limit(1);\n    return result[0];\n  }\n\n  async createInventoryItem(data: any): Promise<InventoryItem> {\n    try {\n      console.log(\"Creating inventory item with data:\", data);\n\n      // Check for duplicate name (case-insensitive, trimmed)\n      const trimmedName = data.name.trim();\n      const existingItem = await this.db\n        .select()\n        .from(inventoryItems)\n        .where(sql`LOWER(TRIM(${inventoryItems.name})) = LOWER(${trimmedName})`)\n        .limit(1);\n\n      if (existingItem.length > 0) {\n        throw new Error(\n          \"Item with this name already exists. Please use a different name.\",\n        );\n      }\n\n      // Ensure proper data types and handle optional fields\n      const cleanData = {\n        name: trimmedName,\n        currentStock: data.currentStock ? String(data.currentStock) : \"0\",\n        openingStock: data.openingStock ? String(data.openingStock) : String(data.currentStock || \"0\"),\n        purchasedQuantity: data.purchasedQuantity ? String(data.purchasedQuantity) : \"0\",\n        consumedQuantity: data.consumedQuantity ? String(data.consumedQuantity) : \"0\",\n        closingStock: data.closingStock ? String(data.closingStock) : String(data.currentStock || \"0\"),\n        minLevel: data.minLevel ? String(data.minLevel) : \"0\",\n        unitId: data.unitId || null,\n        secondaryUnitId: data.secondaryUnitId || null,\n        conversionRate: data.conversionRate ? String(data.conversionRate) : null,\n        costPerUnit: data.costPerUnit ? String(data.costPerUnit) : \"0\",\n        supplier: data.supplier || null,\n        categoryId: data.categoryId || null,\n        isIngredient: data.isIngredient || false,\n        lastRestocked: data.lastRestocked ? new Date(data.lastRestocked) : new Date(),\n        notes: data.notes || null,\n      };\n\n      const result = await this.db\n        .insert(inventoryItems)\n        .values(cleanData)\n        .returning();\n      console.log(\"Inventory item created successfully:\", result[0]);\n      return result[0];\n    } catch (error) {\n      console.error(\"Error creating inventory item:\", error);\n      throw error;\n    }\n  }\n\n  async updateInventoryItem(\n    id: number,\n    updateData: Partial<InsertInventoryItem>,\n  ): Promise<InventoryItem> {\n    try {\n      // Clean the data and ensure proper types\n      const cleanData = { ...updateData };\n\n      // Handle timestamp fields\n      if (cleanData.lastRestocked && typeof cleanData.lastRestocked !== 'string') {\n        cleanData.lastRestocked = new Date(cleanData.lastRestocked);\n      } else if (typeof cleanData.lastRestocked === 'string') {\n        // Ensure string dates are parsed\n        cleanData.lastRestocked = new Date(cleanData.lastRestocked);\n      }\n\n      // Ensure numeric fields are strings if they exist\n      const numericFields = ['currentStock', 'openingStock', 'purchasedQuantity', 'consumedQuantity', 'closingStock', 'minLevel', 'costPerUnit', 'conversionRate'];\n      numericFields.forEach(field => {\n        if (cleanData[field] !== undefined && cleanData[field] !== null) {\n          cleanData[field] = String(cleanData[field]);\n        }\n      });\n\n      // Remove undefined fields\n      Object.keys(cleanData).forEach(key => {\n        if (cleanData[key] === undefined || cleanData[key] === null) {\n          delete cleanData[key];\n        }\n      });\n\n      const result = await this.db\n        .update(inventoryItems)\n        .set(cleanData)\n        .where(eq(inventoryItems.id, id))\n        .returning();\n      return result[0];\n    } catch (error) {\n      console.error(\"Error updating inventory item:\", error);\n      throw error;\n    }\n  }\n\n  async updateInventoryWithPurchase(\n    inventoryItemId: number,\n    purchaseQuantity: number,\n    purchaseRate: number,\n    purchaseDate: Date,\n  ): Promise<void> {\n    try {\n      // Get current inventory item\n      const currentItem = await this.getInventoryItemById(inventoryItemId);\n      if (!currentItem) {\n        throw new Error(\"Inventory item not found\");\n      }\n\n      const currentStock = parseFloat(currentItem.currentStock);\n      const currentRate = parseFloat(currentItem.costPerUnit);\n\n      // Calculate weighted average cost\n      const totalCurrentValue = currentStock * currentRate;\n      const totalPurchaseValue = purchaseQuantity * purchaseRate;\n      const totalQuantity = currentStock + purchaseQuantity;\n      const totalValue = totalCurrentValue + totalPurchaseValue;\n\n      const newWeightedAverageRate =\n        totalQuantity > 0 ? totalValue / totalQuantity : purchaseRate;\n\n      // Update inventory item\n      await this.updateInventoryItem(inventoryItemId, {\n        currentStock: totalQuantity.toString(),\n        costPerUnit: newWeightedAverageRate.toString(),\n        lastRestocked: purchaseDate,\n      });\n\n      console.log(`Updated inventory item ${inventoryItemId}:`, {\n        previousStock: currentStock,\n        purchaseQuantity,\n        newStock: totalQuantity,\n        previousRate: currentRate,\n        purchaseRate,\n        newWeightedRate: newWeightedAverageRate,\n      });\n    } catch (error) {\n      console.error(\"Error updating inventory with purchase:\", error);\n      throw error;\n    }\n  }\n\n  async updateInventoryWithWeightedAverage(\n    inventoryItemId: number,\n    purchaseQuantity: number,\n    purchaseRate: number,\n    purchaseDate: Date,\n  ): Promise<void> {\n    try {\n      // Get current inventory item (this represents the closing stock)\n      const currentItem = await this.getInventoryItemById(inventoryItemId);\n      if (!currentItem) {\n        throw new Error(\"Inventory item not found\");\n      }\n\n      const closingStock = parseFloat(currentItem.currentStock || \"0\");\n      const closingRate = parseFloat(currentItem.costPerUnit || \"0\");\n\n      // Calculate closing stock value\n      const closingStockValue = closingStock * closingRate;\n\n      // Calculate purchase value\n      const purchaseValue = purchaseQuantity * purchaseRate;\n\n      // Calculate new opening stock after purchase\n      const newOpeningQuantity = closingStock + purchaseQuantity;\n      const newOpeningValue = closingStockValue + purchaseValue;\n\n      // Calculate weighted average rate for new opening stock\n      const newWeightedAverageRate =\n        newOpeningQuantity > 0\n          ? newOpeningValue / newOpeningQuantity\n          : purchaseRate;\n\n      // Update inventory item with new opening stock values\n      await this.updateInventoryItem(inventoryItemId, {\n        currentStock: newOpeningQuantity.toString(),\n        costPerUnit: newWeightedAverageRate.toString(),\n        lastRestocked: purchaseDate,\n      });\n\n      // Create inventory transaction for tracking\n      await this.createInventoryTransaction({\n        inventoryItemId: inventoryItemId,\n        type: \"in\",\n        quantity: purchaseQuantity.toString(),\n        reason: `Purchase - Weighted average update`,\n        reference: `Purchase at ${purchaseRate}/unit`,\n        createdBy: \"system\",\n      });\n\n      console.log(\n        `‚úÖ Inventory updated with weighted average for item ${inventoryItemId}:`,\n        {\n          closingStock,\n          closingRate,\n          closingValue: closingStockValue,\n          purchaseQuantity,\n          purchaseRate,\n          purchaseValue,\n          newOpeningQuantity,\n          newOpeningValue,\n          newWeightedRate: newWeightedAverageRate,\n        },\n      );\n    } catch (error) {\n      console.error(\n        \"‚ùå Error updating inventory with weighted average:\",\n        error,\n      );\n      throw error;\n    }\n  }\n\n  async deleteInventoryItem(id: number): Promise<void> {\n    try {\n      // First check if item exists\n      const existingItem = await this.db.select().from(inventoryItems).where(eq(inventoryItems.id, id)).limit(1);\n\n      if (existingItem.length === 0) {\n        throw new Error('Inventory item not found');\n      }\n\n      // Delete associated transactions\n      await this.db.delete(inventoryTransactions).where(eq(inventoryTransactions.itemId, id));\n\n      // Delete the item\n      await this.db.delete(inventoryItems).where(eq(inventoryItems.id, id));\n    } catch (error) {\n      console.error(\"Error deleting inventory item:\", error);\n      throw error;\n    }\n  }\n\n  async getInventoryCategories(): Promise<InventoryCategory[]> {\n    return await this.db\n      .select()\n      .from(inventoryCategories)\n      .orderBy(inventoryCategories.name);\n  }\n\n  async createInventoryCategory(\n    data: InsertInventoryCategory,\n  ): Promise<InventoryCategory> {\n    const [newCategory] = await this.db\n      .insert(inventoryCategories)\n      .values(data)\n      .returning();\n    return newCategory;\n  }\n\n  async updateInventoryCategory(\n    id: number,\n    data: Partial<InsertInventoryCategory>,\n  ): Promise<InventoryCategory> {\n    const [updatedCategory] = await this.db\n      .update(inventoryCategories)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(inventoryCategories.id, id))\n      .returning();\n    return updatedCategory;\n  }\n\n  async deleteInventoryCategory(id: number): Promise<void> {\n    await this.db\n      .delete(inventoryCategories)\n      .where(eq(inventoryCategories.id, id));\n  }\n\n  async createInventoryTransaction(\n    transaction: InsertInventoryTransaction,\n  ): Promise<InventoryTransaction> {\n    // Ensure quantity is a string for consistency\n    const transactionData = {\n      ...transaction,\n      quantity: String(transaction.quantity),\n    };\n\n    const [newTransaction] = await this.db\n      .insert(inventoryTransactions)\n      .values(transactionData)\n      .returning();\n\n    // Update the current stock\n    const item = await this.getInventoryItemById(transaction.inventoryItemId);\n    if (item) {\n      const quantityChange =\n        transaction.type === \"in\"\n          ? parseFloat(transaction.quantity)\n          : -parseFloat(transaction.quantity);\n\n      const newStock = parseFloat(item.currentStock || \"0\") + quantityChange;\n\n      await this.updateInventoryItem(transaction.inventoryItemId, {\n        currentStock: newStock.toString(),\n        updatedAt: new Date(),\n      });\n    }\n\n    return newTransaction;\n  }\n\n  async getInventoryTransactions(itemId?: number): Promise<any[]> {\n    let query = this.db\n      .select({\n        id: inventoryTransactions.id,\n        inventoryItemId: inventoryTransactions.inventoryItemId,\n        type: inventoryTransactions.type,\n        quantity: inventoryTransactions.quantity,\n        reason: inventoryTransactions.reason,\n        createdAt: inventoryTransactions.createdAt,\n        itemName: inventoryItems.name,\n        unit: inventoryItems.unit,\n      })\n      .from(inventoryTransactions)\n      .leftJoin(\n        inventoryItems,\n        eq(inventoryTransactions.inventoryItemId, inventoryItems.id),\n      )\n      .orderBy(desc(inventoryTransactions.createdAt));\n\n    if (itemId) {\n      query = query.where(eq(inventoryTransactions.inventoryItemId, itemId));\n    }\n\n    return await query;\n  }\n\n  async getLowStockItems() {\n    const items = await this.db\n      .select()\n      .from(inventoryItems)\n      .where(sql`${inventoryItems.closingStock} <= ${inventoryItems.minLevel}`)\n      .limit(10);\n\n    return items;\n  }\n\n  // Get ingredients from multiple sources\n  async getIngredients(): Promise<InventoryItem[]> {\n    try {\n      console.log(\"Fetching ingredients...\");\n      \n      // Get all inventory items directly with specific field selection\n      const allItems = await this.db\n        .select({\n          id: inventoryItems.id,\n          invCode: inventoryItems.invCode,\n          name: inventoryItems.name,\n          currentStock: inventoryItems.currentStock,\n          openingStock: inventoryItems.openingStock,\n          purchasedQuantity: inventoryItems.purchasedQuantity,\n          consumedQuantity: inventoryItems.consumedQuantity,\n          closingStock: inventoryItems.closingStock,\n          minLevel: inventoryItems.minLevel,\n          unit: inventoryItems.unit,\n          unitId: inventoryItems.unitId,\n          secondaryUnitId: inventoryItems.secondaryUnitId,\n          conversionRate: inventoryItems.conversionRate,\n          costPerUnit: inventoryItems.costPerUnit,\n          supplier: inventoryItems.supplier,\n          categoryId: inventoryItems.categoryId,\n          isIngredient: inventoryItems.isIngredient,\n          lastRestocked: inventoryItems.lastRestocked,\n          createdAt: inventoryItems.createdAt,\n          updatedAt: inventoryItems.updatedAt,\n        })\n        .from(inventoryItems)\n        .orderBy(inventoryItems.name);\n\n      console.log(`Found ${allItems.length} total inventory items`);\n\n      // Filter items that are suitable as ingredients\n      const ingredients = allItems.filter((item: any) => {\n        const itemName = item.name?.toLowerCase() || '';\n        \n        return item.isIngredient === true ||\n          itemName.includes(\"flour\") ||\n          itemName.includes(\"sugar\") ||\n          itemName.includes(\"butter\") ||\n          itemName.includes(\"milk\") ||\n          itemName.includes(\"egg\") ||\n          itemName.includes(\"chocolate\") ||\n          itemName.includes(\"vanilla\") ||\n          itemName.includes(\"salt\") ||\n          itemName.includes(\"baking\") ||\n          itemName.includes(\"yeast\") ||\n          itemName.includes(\"cream\") ||\n          itemName.includes(\"oil\") ||\n          itemName.includes(\"spice\") ||\n          itemName.includes(\"extract\");\n      });\n\n      console.log(`Filtered to ${ingredients.length} ingredients`);\n      return ingredients;\n    } catch (error) {\n      console.error(\"Error fetching ingredients:\", error);\n      return [];\n    }\n  }\n\n  // Sync stock levels from purchases\n  async syncStockFromPurchases() {\n    try {\n      // Get all purchase items and aggregate by inventory item\n      const purchaseAggregates = await this.db\n        .select({\n          inventoryItemId: purchaseItems.inventoryItemId,\n          totalPurchased: sql<number>`SUM(${purchaseItems.quantity})`,\n        })\n        .from(purchaseItems)\n        .groupBy(purchaseItems.inventoryItemId);\n\n      // Update inventory items with purchased quantities\n      for (const aggregate of purchaseAggregates) {\n        const inventoryItem = await this.db\n          .select()\n          .from(inventoryItems)\n          .where(eq(inventoryItems.id, aggregate.inventoryItemId))\n          .limit(1);\n\n        if (inventoryItem.length > 0) {\n          const item = inventoryItem[0];\n          const openingStock = parseFloat(item.openingStock || \"0\");\n          const purchasedQuantity = aggregate.totalPurchased || 0;\n          const consumedQuantity = parseFloat(item.consumedQuantity || \"0\");\n          const closingStock = openingStock + purchasedQuantity - consumedQuantity;\n\n          await this.db\n            .update(inventoryItems)\n            .set({\n              purchasedQuantity: purchasedQuantity.toString(),\n              closingStock: closingStock.toString(),\n              currentStock: closingStock.toString(),\n              lastRestocked: new Date(),\n            })\n            .where(eq(inventoryItems.id, aggregate.inventoryItemId));\n        }\n      }\n\n      console.log(\"Stock levels synced from purchases successfully\");\n    } catch (error) {\n      console.error(\"Error syncing stock from purchases:\", error);\n      throw error;\n    }\n  }\n\n  async updateInventoryStockAndCost(itemId: number, addedQuantity: number, newCostPerUnit: number) {\n    try {\n      const item = await this.getInventoryItemById(itemId);\n      if (!item) {\n        throw new Error(\"Inventory item not found\");\n      }\n\n      const currentStock = parseFloat(item.currentStock);\n      const currentCostPerUnit = parseFloat(item.costPerUnit);\n\n      // Calculate weighted average cost\n      const totalValue = (currentStock * currentCostPerUnit) + (addedQuantity * newCostPerUnit);\n      const totalQuantity = currentStock + addedQuantity;\n      const newWeightedCost = totalQuantity > 0 ? totalValue / totalQuantity : newCostPerUnit;\n\n      // Update inventory\n      await this.db\n        .update(inventoryItems)\n        .set({\n          currentStock: totalQuantity.toString(),\n          costPerUnit: newWeightedCost.toFixed(4),\n          lastRestocked: new Date(),\n        })\n        .where(eq(inventoryItems.id, itemId));\n\n      console.log(`Updated inventory item ${itemId}: stock=${totalQuantity}, cost=${newWeightedCost.toFixed(4)}`);\n    } catch (error) {\n      console.error(\"Error updating inventory stock and cost:\", error);\n      throw error;\n    }\n  }\n\n  // Update inventory stock specifically for purchases\n  async updateInventoryPurchaseStock(itemId: number, purchasedQuantity: number) {\n    try {\n      const item = await this.getInventoryItemById(itemId);\n      if (!item) {\n        throw new Error(\"Inventory item not found\");\n      }\n\n      const openingStock = parseFloat(item.openingStock || item.currentStock || \"0\");\n      const currentPurchased = parseFloat(item.purchasedQuantity || \"0\");\n      const consumedQuantity = parseFloat(item.consumedQuantity || \"0\");\n\n      const newPurchasedQuantity = currentPurchased + purchasedQuantity;\n      const newClosingStock = openingStock + newPurchasedQuantity - consumedQuantity;\n\n      // Update inventory with new purchase data\n      await this.db\n        .update(inventoryItems)\n        .set({\n          purchasedQuantity: newPurchasedQuantity.toString(),\n          closingStock: newClosingStock.toString(),\n          currentStock: newClosingStock.toString(),\n          lastRestocked: new Date(),\n        })\n        .where(eq(inventoryItems.id, itemId));\n\n      console.log(`Updated purchase stock for item ${itemId}: purchased=${newPurchasedQuantity}, closing=${newClosingStock}`);\n    } catch (error) {\n      console.error(\"Error updating inventory purchase stock:\", error);\n      throw error;\n    }\n  }\n\n  // Permission operations\n  async getPermissions(): Promise<Permission[]> {\n    return await this.db\n      .select()\n      .from(permissions)\n      .orderBy(permissions.resource, permissions.action);\n  }\n\n  async createPermission(data: InsertPermission): Promise<Permission> {\n    const [newPermission] = await this.db\n      .insert(permissions)\n      .values(data)\n      .returning();\n    return newPermission;\n  }\n\n  async getRolePermissions(role: string): Promise<any[]> {\n    return await this.db\n      .select({\n        id: permissions.id,\n        name: permissions.name,\n        resource: permissions.resource,\n        action: permissions.action,\n        description: permissions.description,\n      })\n      .from(permissions)\n      .innerJoin(\n        rolePermissions,\n        eq(permissions.id, rolePermissions.permissionId),\n      )\n      .where(eq(rolePermissions.role, role))\n      .orderBy(permissions.resource, permissions.action);\n  }\n\n  async setRolePermissions(\n    role: string,\n    permissionIds: number[],\n  ): Promise<void> {\n    await this.db.delete(rolePermissions).where(eq(rolePermissions.role, role));\n\n    if (permissionIds.length > 0) {\n      const rolePermissionData = permissionIds.map((permissionId) => ({\n        role,\n        permissionId,\n      }));\n      await this.db.insert(rolePermissions).values(rolePermissionData);\n    }\n  }\n\n  async getUserPermissions(userId: string): Promise<any[]> {\n    try {\n      const user = await this.getUserById(userId);\n      if (!user) return [];\n\n      // Super admin gets all permissions\n      if (user.role === \"super_admin\") {\n        return await this.db\n          .select({\n            id: permissions.id,\n            name: permissions.name,\n            resource: permissions.resource,\n            action: permissions.action,\n            description: permissions.description,\n            granted: sql<boolean>`true`,\n          })\n          .from(permissions)\n          .orderBy(permissions.resource, permissions.action);\n      }\n\n      // Admin gets most permissions except super admin specific ones\n      if (user.role === \"admin\") {\n        return await this.db\n          .select({\n            id: permissions.id,\n            name: permissions.name,\n            resource: permissions.resource,\n            action: permissions.action,\n            description: permissions.description,\n            granted: sql<boolean>`true`,\n          })\n          .from(permissions)\n          .where(sql`${permissions.resource} != 'super_admin'`)\n          .orderBy(permissions.resource, permissions.action);\n      }\n\n      // Get role-based permissions\n      const rolePermissions = await this.db\n        .select({\n          id: permissions.id,\n          name: permissions.name,\n          resource: permissions.resource,\n          action: permissions.action,\n          description: permissions.description,\n          granted: sql<boolean>`true`,\n        })\n        .from(permissions)\n        .innerJoin(\n          rolePermissions,\n          eq(permissions.id, rolePermissions.permissionId),\n        )\n        .where(eq(rolePermissions.role, user.role))\n        .orderBy(permissions.resource, permissions.action);\n\n      // Get user-specific permission overrides\n      const userPermissions = await this.db\n        .select({\n          id: permissions.id,\n          name: permissions.name,\n          resource: permissions.resource,\n          action: permissions.action,\n          description: permissions.description,\n          granted: userPermissions.granted,\n        })\n        .from(permissions)\n        .innerJoin(\n          userPermissions,\n          eq(permissions.id, userPermissions.permissionId),\n        )\n        .where(eq(userPermissions.userId, userId))\n        .orderBy(permissions.resource, permissions.action);\n\n      // Merge permissions (user-specific overrides take precedence)\n      const permissionMap = new Map();\n\n      // Add role permissions first\n      rolePermissions.forEach((perm) => {\n        permissionMap.set(perm.id, perm);\n      });\n\n      // Override with user-specific permissions\n      userPermissions.forEach((perm) => {\n        permissionMap.set(perm.id, perm);\n      });\n\n      return Array.from(permissionMap.values());\n\n      const userResults = await this.db\n        .select({\n          id: permissions.id,\n          name: permissions.name,\n          resource: permissions.resource,\n          action: permissions.action,\n          description: permissions.description,\n          granted: userPermissions.granted,\n        })\n        .from(userPermissions)\n        .innerJoin(\n          permissions,\n          eq(permissions.id, userPermissions.permissionId),\n        )\n        .where(eq(userPermissions.userId, userId));\n\n      const roleResults = await this.db\n        .select({\n          id: permissions.id,\n          name: permissions.name,\n          resource: permissions.resource,\n          action: permissions.action,\n          description: permissions.description,\n          granted: sql<boolean>`true`,\n        })\n        .from(rolePermissions)\n        .innerJoin(\n          permissions,\n          eq(permissions.id, rolePermissions.permissionId),\n        )\n        .where(eq(rolePermissions.role, user.role));\n\n      // Merge user and role permissions, user permissions override role permissions\n      const allPermissions = [...roleResults];\n      userResults.forEach((userPerm) => {\n        const existingIndex = allPermissions.findIndex(\n          (p) => p.id === userPerm.id,\n        );\n        if (existingIndex >= 0) {\n          allPermissions[existingIndex] = userPerm;\n        } else {\n          allPermissions.push(userPerm);\n        }\n      });\n\n      return allPermissions.filter((p) => p.granted);\n    } catch (error) {\n      console.error(\"Error fetching user permissions:\", error);\n      return [];\n    }\n  }\n\n  async setUserPermissions(\n    userId: string,\n    permissionUpdates: { permissionId: number; granted: boolean }[],\n  ): Promise<void> {\n    await this.db\n      .delete(userPermissions)\n      .where(eq(userPermissions.userId, userId));\n\n    if (permissionUpdates.length > 0) {\n      const userPermissionData = permissionUpdates.map((update) => ({\n        userId,\n        permissionId: update.permissionId,\n        granted: update.granted,\n      }));\n      await this.db.insert(userPermissions).values(userPermissionData);\n    }\n  }\n\n  async checkUserPermission(\n    userId: string,\n    resource: string,\n    action: string,\n  ): Promise<boolean> {\n    const userPermissions = await this.getUserPermissions(userId);\n    return userPermissions.some(\n      (perm) =>\n        perm.resource === resource &&\n        (perm.action === action || perm.action === \"read_write\"),\n    );\n  }\n\n  async initializeDefaultPermissions(): Promise<void> {\n    const existingPermissions = await this.getPermissions();\n    if (existingPermissions.length > 0) return;\n\n    const resources = [\n      \"dashboard\",\n      \"products\",\n      \"inventory\",\n      \"orders\",\n      \"production\",\n      \"customers\",\n      \"parties\",\n      \"assets\",\n      \"expenses\",\n      \"sales\",\n      \"purchases\",\n      \"reports\",\n      \"settings\",\n      \"users\",\n      \"staff\",\n      \"attendance\",\n      \"salary\",\n      \"leave_requests\",\n    ];\n\n    const actions = [\"read\", \"write\", \"read_write\"];\n\n    const defaultPermissions = [];\n    for (const resource of resources) {\n      for (const action of actions) {\n        defaultPermissions.push({\n          name: `${resource}_${action}`,\n          resource,\n          action,\n          description: `${action.charAt(0).toUpperCase() + action.slice(1)} access to ${resource}`,\n        });\n      }\n    }\n\n    for (const permission of defaultPermissions) {\n      await this.createPermission(permission);\n    }\n\n    const allPermissions = await this.getPermissions();\n\n    // Super admin gets all permissions\n    const superAdminPermissionIds = allPermissions.map((p) => p.id);\n    await this.setRolePermissions(\"super_admin\", superAdminPermissionIds);\n\n    // Admin gets all except super admin specific ones\n    const adminPermissionIds = allPermissions\n      .filter((p) => p.resource !== \"users\") // Exclude user management for admins\n      .map((p) => p.id);\n    await this.setRolePermissions(\"admin\", adminPermissionIds);\n\n    const managerPermissionIds = allPermissions\n      .filter((p) => p.action === \"read_write\" && p.resource !== \"users\")\n      .map((p) => p.id);\n    await this.setRolePermissions(\"manager\", managerPermissionIds);\n\n    const staffPermissionIds = allPermissions\n      .filter(\n        (p) =>\n          p.action === \"read\" ||\n          (p.action === \"write\" &&\n            [\"orders\", \"customers\", \"production\"].includes(p.resource)),\n      )\n      .map((p) => p.id);\n    await this.setRolePermissions(\"staff\", staffPermissionIds);\n  }\n\n  async getSettings(): Promise<any> {\n    const settingsResult = await this.db.select().from(settings);\n    const settingsObj: any = {};\n    settingsResult.forEach((setting) => {\n      settingsObj[setting.key] = setting.value;\n    });\n    return settingsObj;\n  }\n\n  async updateSettings(settingsData: any): Promise<any> {\n    for (const [key, value] of Object.entries(settingsData)) {\n      await this.updateOrCreateSetting(key, value as string);\n    }\n    return settingsData;\n  }\n\n  async updateOrCreateSetting(key: string, value: string): Promise<any> {\n    const existing = await this.db\n      .select()\n      .from(settings)\n      .where(eq(settings.key, key))\n      .limit(1);\n\n    if (existing.length > 0) {\n      const [updated] = await this.db\n        .update(settings)\n        .set({ value, updatedAt: new Date() })\n        .where(eq(settings.key, key))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await this.db\n        .insert(settings)\n        .values({ key, value, type: \"string\" })\n        .returning();\n      return created;\n    }\n  }\n\n  async saveCompanySettings(settings: any): Promise<void> {\n    await this.updateSettings(settings);\n  }\n\n  async getDashboardStats(): Promise<any> {\n    return {\n      totalProducts: 0,\n      totalOrders: 0,\n      totalRevenue: \"0\",\n      lowStockItems: 0,\n    };\n  }\n\n  async getSalesAnalytics(startDate?: Date, endDate?: Date): Promise<any> {\n    return {\n      totalSales: \"0\",\n      totalOrders: 0,\n      averageOrderValue: \"0\",\n      salesByDay: [],\n    };\n  }\n\n  async getLoginAnalytics(startDate?: string, endDate?: string) {\n    try {\n      let query = this.db.select().from(loginLogs);\n\n      if (startDate && endDate) {\n        // Ensure dates are properly formatted as strings for the database\n        const startDateStr =\n          typeof startDate === \"string\"\n            ? startDate\n            : new Date(startDate).toISOString();\n        const endDateStr =\n          typeof endDate === \"string\"\n            ? endDate\n            : new Date(endDate).toISOString();\n\n        query = query.where(\n          and(\n            gte(loginLogs.timestamp, startDateStr),\n            lte(loginLogs.timestamp, endDateStr),\n          ),\n        );\n      }\n\n      const logs = await query;\n\n      // Process logs for analytics\n      const analytics = {\n        totalLogins: logs.length,\n        uniqueUsers: new Set(logs.map((log) => log.userId)).size,\n        loginsByDay: this.groupLoginsByDay(logs),\n        loginsByUser: this.groupLoginsByUser(logs),\n        recentLogins: logs.slice(-10),\n      };\n\n      return analytics;\n    } catch (error) {\n      console.error(\"Error in getLoginAnalytics:\", error);\n      throw error;\n    }\n  }\n\n  groupLoginsByDay(logs: any[]): any {\n    const loginsByDay: any = {};\n\n    logs.forEach((log) => {\n      const date = log.timestamp.toISOString().split(\"T\")[0];\n      if (!loginsByDay[date]) {\n        loginsByDay[date] = 0;\n      }\n      loginsByDay[date]++;\n    });\n\n    return Object.entries(loginsByDay).map(([date, count]) => ({\n      date,\n      count,\n    }));\n  }\n\n  groupLoginsByUser(logs: any[]): any {\n    const loginsByUser: any = {};\n\n    logs.forEach((log) => {\n      if (!loginsByUser[log.userId]) {\n        loginsByUser[log.userId] = 0;\n      }\n      loginsByUser[log.userId]++;\n    });\n\n    return Object.entries(loginsByUser).map(([userId, count]) => ({\n      userId,\n      count,\n    }));\n  }\n\n  // Customer operations\n  async getCustomers(): Promise<Customer[]> {\n    return await this.db.select().from(customers).orderBy(customers.name);\n  }\n\n  async getCustomerById(id: number): Promise<Customer | undefined> {\n    const result = await this.db\n      .select()\n      .from(customers)\n      .where(eq(customers.id, id))\n      .limit(1);\n    return result[0];\n  }\n\n  async createCustomer(customer: InsertCustomer): Promise<Customer> {\n    const [newCustomer] = await this.db\n      .insert(customers)\n      .values(customer)\n      .returning();\n    return newCustomer;\n  }\n\n  async updateCustomer(\n    id: number,\n    customer: Partial<InsertCustomer>,\n  ): Promise<Customer> {\n    const [updatedCustomer] = await this.db\n      .update(customers)\n      .set({ ...customer, updatedAt: new Date() })\n      .where(eq(customers.id, id))\n      .returning();\n    return updatedCustomer;\n  }\n\n  async deleteCustomer(id: number): Promise<void> {\n    await this.db.delete(customers).where(eq(customers.id, id));\n  }\n\n  // Party operations\n  async getParties(): Promise<Party[]>{\n    return await this.db.select().from(parties).orderBy(parties.name);\n  }\n\n  async createParty(party: InsertParty): Promise<Party> {\n    const [newParty] = await this.db.insert(parties).values(party).returning();\n    return newParty;\n  }\n\n  async updateParty(id: number, party: Partial<InsertParty>): Promise<Party> {\n    const [updatedParty] = await this.db\n      .update(parties)\n      .set({ ...party, updatedAt: new Date() })\n      .where(eq(parties.id, id))\n      .returning();\n    return updatedParty;\n  }\n\n  async deleteParty(id: number): Promise<void> {\n    await this.db.delete(parties).where(eq(parties.id, id));\n  }\n\n  // Asset operations\n  async getAssets(): Promise<Asset[]> {\n    return await this.db.select().from(assets).orderBy(assets.name);\n  }\n\n  async createAsset(asset: InsertAsset): Promise<Asset> {\n    const [newAsset] = await this.db.insert(assets).values(asset).returning();\n    return newAsset;\n  }\n\n  async updateAsset(id: number, asset: Partial<InsertAsset>): Promise<Asset> {\n    const [updatedAsset] = await this.db\n      .update(assets)\n      .set({ ...asset, updatedAt: new Date() })\n      .where(eq(assets.id, id))\n      .returning();\n    return updatedAsset;\n  }\n\n  async getAssetById(id: number): Promise<Asset | undefined> {\n    const result = await this.db\n      .select()\n      .from(assets)\n      .where(eq(assets.id, id))\n      .limit(1);\n    return result[0];\n  }\n\n  async deleteAsset(id: number): Promise<void> {\n    await this.db.delete(assets).where(eq(assets.id, id));\n  }\n\n  // Purchase operations\n  async getPurchases(): Promise<any[]> {\n    return await this.db\n      .select({\n        id: purchases.id,\n        supplierName: purchases.supplierName,\n        partyId: purchases.partyId,\n        totalAmount: purchases.totalAmount,\n        paymentMethod: purchases.paymentMethod,\n        status: purchases.status,\n        purchaseDate: purchases.purchaseDate,\n        invoiceNumber: purchases.invoiceNumber,\n        notes: purchases.notes,\n        createdAt: purchases.createdAt,\n      })\n      .from(purchases)\n      .orderBy(desc(purchases.purchaseDate));\n  }\n\n  async getPurchasesWithItems(): Promise<any[]> {\n    // Get all purchases with their associated items\n    const purchaseList = await this.db\n      .select({\n        id: purchases.id,\n        supplierName: purchases.supplierName,\n        partyId: purchases.partyId,\n        totalAmount: purchases.totalAmount,\n        paymentMethod: purchases.paymentMethod,\n        status: purchases.status,\n        purchaseDate: purchases.purchaseDate,\n        invoiceNumber: purchases.invoiceNumber,\n        notes: purchases.notes,\n        createdAt: purchases.createdAt,\n      })\n      .from(purchases)\n      .orderBy(desc(purchases.createdAt));\n\n    // Get items for each purchase\n    for (const purchase of purchaseList) {\n      const items = await this.db\n        .select({\n          id: purchaseItems.id,\n          inventoryItemId: purchaseItems.inventoryItemId,\n          inventoryItemName: inventoryItems.name,\n          quantity: purchaseItems.quantity,\n          unitPrice: purchaseItems.unitPrice,\n          totalPrice: purchaseItems.totalPrice,\n        })\n        .from(purchaseItems)\n        .leftJoin(\n          inventoryItems,\n          eq(purchaseItems.inventoryItemId, inventoryItems.id),\n        )\n        .where(eq(purchaseItems.purchaseId, purchase.id));\n\n      purchase.items = items;\n    }\n\n    return purchaseList;\n  }\n\n  async createPurchaseWithLedger(purchaseData: any): Promise<any> {\n    try {\n      const { items, ...purchase } = purchaseData;\n\n      // Create purchase record\n      const [newPurchase] = await this.db\n        .insert(purchases)\n        .values({\n          supplierName: purchase.supplierName,\n          partyId: purchase.partyId || null,\n          totalAmount: purchase.totalAmount,\n          paymentMethod: purchase.paymentMethod,\n          status: purchase.status || \"completed\",\n          invoiceNumber: purchase.invoiceNumber || null,\n          notes: purchase.notes || null,\n          createdBy: purchase.createdBy,\n        })\n        .returning();\n\n      console.log(\"Purchase created with ID:\", newPurchase.id);\n\n      // Create purchase items and update inventory with weighted average\n      if (items && items.length > 0) {\n        for (const item of items) {\n          // Create purchase item record\n          const [purchaseItem] = await this.db\n            .insert(purchaseItems)\n            .values({\n              purchaseId: newPurchase.id,\n              inventoryItemId: item.inventoryItemId,\n              quantity: item.quantity.toString(),\n              unitPrice: item.unitPrice.toString(),\n              totalPrice: item.totalPrice.toString(),\n            })\n            .returning();\n\n          console.log(\"Purchase item created:\", purchaseItem);\n\n          // Update inventory with weighted average cost calculation\n          await this.updateInventoryWithWeightedAverage(\n            item.inventoryItemId,\n            parseFloat(item.quantity),\n            parseFloat(item.unitPrice),\n            new Date(),\n          );\n          // Update inventory specifically for purchase quantity tracking\n          await this.updateInventoryPurchaseStock(\n            item.inventoryItemId,\n            parseFloat(item.quantity),\n          );\n        }\n      }\n\n      // Create ledger transaction if party is involved\n      if (purchaseData.partyId) {\n        await this.createLedgerTransaction({\n          customerOrPartyId: purchaseData.partyId,\n          entityType: \"party\",\n          transactionDate: new Date(),\n          description: `Purchase from ${purchaseData.supplierName}${purchaseData.invoiceNumber ? ` - Invoice: ${purchaseData.invoiceNumber}` : \"\"}`,\n          referenceNumber:\n            purchaseData.invoiceNumber || `PUR-${newPurchase.id}`,\n          debitAmount: purchaseData.totalAmount,\n          creditAmount: \"0\",\n          transactionType: \"purchase\",\n          relatedPurchaseId: newPurchase.id,\n          paymentMethod: purchaseData.paymentMethod,\n          notes: purchaseData.notes,\n          createdBy: purchaseData.createdBy,\n          runningBalance: \"0\", // Will be calculated by recalculateRunningBalance\n        });\n\n        // Recalculate running balance\n        await this.recalculateRunningBalance(purchaseData.partyId, \"party\");\n      }\n\n      return newPurchase;\n    } catch (error) {\n      console.error(\"Error creating purchase with ledger:\", error);\n      throw error;\n    }\n  }\n\n  async updatePurchase(id: number, purchaseData: any): Promise<any> {\n    const [updatedPurchase] = await this.db\n      .update(purchases)\n      .set({ ...purchaseData, updatedAt: new Date() })\n      .where(eq(purchases.id, id))\n      .returning();\n    return updatedPurchase;\n  }\n\n  async deletePurchase(id: number): Promise<void> {\n    await this.db.delete(purchaseItems).where(eq(purchaseItems.purchaseId, id));\n    await this.db.delete(purchases).where(eq(purchases.id, id));\n  }\n\n  // Expense operations\n  async getExpenses(): Promise<Expense[]> {\n    return await this.db.select().from(expenses).orderBy(desc(expenses.date));\n  }\n\n  async createExpense(expense: InsertExpense): Promise<Expense> {\n    const [newExpense] = await this.db\n      .insert(expenses)\n      .values(expense)\n      .returning();\n    return newExpense;\n  }\n\n  async updateExpense(\n    id: number,\n    expense: Partial<InsertExpense>,\n  ): Promise<Expense> {\n    const [updatedExpense] = await this.db\n      .update(expenses)\n      .set({ ...expense, updatedAt: new Date() })\n      .where(eq(expenses.id, id))\n      .returning();\n    return updatedExpense;\n  }\n\n  async deleteExpense(id: number): Promise<void> {\n    await this.db.delete(expenses).where(eq(expenses.id, id));\n  }\n\n  // Order operations\n  async getOrders(): Promise<Order[]> {\n    return await this.db.select().from(orders).orderBy(desc(orders.createdAt));\n  }\n\n  async getOrderById(id: number): Promise<Order | undefined> {\n    const result = await this.db\n      .select()\n      .from(orders)\n      .where(eq(orders.id, id))\n      .limit(1);\n    return result[0];\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const [newOrder] = await this.db.insert(orders).values(order).returning();\n    return newOrder;\n  }\n\n  async updateOrder(id: number, order: Partial<InsertOrder>): Promise<Order> {\n    const [updatedOrder] = await this.db\n      .update(orders)\n      .set({ ...order, updatedAt: new Date() })\n      .where(eq(orders.id, id))\n      .returning();\n    return updatedOrder;\n  }\n\n  async deleteOrder(id: number): Promise<void> {\n    await this.db.delete(orderItems).where(eq(orderItems.orderId, id));\n    await this.db.delete(orders).where(eq(orders.id, id));\n  }\n\n  async getOrderItems(orderId: number) {\n    try {\n      const items = await this.db\n        .select({\n          id: orderItems.id,\n          orderId: orderItems.orderId,\n          productId: orderItems.productId,\n          productName: products.name,\n          quantity: orderItems.quantity,\n          unit: orderItems.unit,\n          unitId: orderItems.unitId,\n          unitName: units.name,\n          unitAbbreviation: units.abbreviation,\n          unitPrice: orderItems.unitPrice,\n          totalPrice: orderItems.totalPrice,\n          createdAt: orderItems.createdAt,\n        })\n        .from(orderItems)\n        .leftJoin(products, eq(orderItems.productId, products.id))\n        .leftJoin(units, eq(orderItems.unitId, units.id))\n        .where(eq(orderItems.orderId, orderId))\n        .orderBy(orderItems.createdAt);\n\n      return items;\n    } catch (error) {\n      console.error(\"Error fetching order items:\", error);\n      throw error;\n    }\n  }\n\n  async createOrderItem(data: any) {\n    try {\n      // Ensure unit data is properly handled\n      const orderItemData = {\n        orderId: data.orderId,\n        productId: data.productId,\n        quantity: data.quantity,\n        unit: data.unit || null,\n        unitId: data.unitId || null,\n        unitPrice: data.unitPrice,\n        totalPrice: data.totalPrice,\n      };\n\n      const result = await this.db\n        .insert(orderItems)\n        .values(orderItemData)\n        .returning();\n      return result[0];\n    } catch (error) {\n      console.error(\"Error creating order item:\", error);\n      throw error;\n    }\n  }\n\n  async getRecentOrders(limit: number): Promise<any[]> {\n    return await this.db\n      .select()\n      .from(orders)\n      .orderBy(desc(orders.createdAt))\n      .limit(limit);\n  }\n\n  async getTodayProductionSchedule(): Promise<any[]> {\n    try {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n\n      const tomorrow = new Date(today);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n\n      return await this.db\n        .select({\n          id: productionSchedule.id,\n          productName: products.name,\n          quantity: productionSchedule.quantity,\n          scheduledDate: productionSchedule.scheduledDate,\n          status: productionSchedule.status,\n        })\n        .from(productionSchedule)\n        .leftJoin(products, eq(productionSchedule.productId, products.id))\n        .where(\n          and(\n            gte(productionSchedule.scheduledDate, today.toISOString()),\n            lt(productionSchedule.scheduledDate, tomorrow.toISOString()),\n            // Only include records with valid dates\n            sql`${productionSchedule.scheduledDate} IS NOT NULL`,\n          ),\n        )\n        .orderBy(productionSchedule.scheduledDate);\n    } catch (error) {\n      console.error(\"Error fetching today's production schedule:\", error);\n      return []; // Return empty array if there's an error\n    }\n  }\n\n  async getProductionSchedule(): Promise<any[]> {\n    return await this.db\n      .select({\n        id: productionSchedule.id,\n        productId: productionSchedule.productId,\n        quantity: productionSchedule.quantity,\n        scheduledDate: productionSchedule.scheduledDate,\n        status: productionSchedule.status,\n        notes: productionSchedule.notes,\n        productName: products.name,\n      })\n      .from(productionSchedule)\n      .leftJoin(products, eq(productionSchedule.productId, products.id))\n      .orderBy(desc(productionSchedule.scheduledDate));\n  }\n\n  async createProductionScheduleItem(\n    item: InsertProductionScheduleItem,\n  ): Promise<ProductionScheduleItem> {\n    const [newItem] = await this.db\n      .insert(productionSchedule)\n      .values(item)\n      .returning();\n    return newItem;\n  }\n\n  async updateProductionScheduleItem(\n    id: number,\n    item: Partial<InsertProductionScheduleItem>,\n  ): Promise<ProductionScheduleItem> {\n    const [updatedItem] = await this.db\n      .update(productionSchedule)\n      .set({ ...item, updatedAt: new Date() })\n      .where(eq(productionSchedule.id, id))\n      .returning();\n    return updatedItem;\n  }\n\n  async getProductionScheduleByDate(date: string): Promise<any[]> {\n    const targetDate = new Date(date);\n    const nextDay = new Date(targetDate);\n    nextDay.setDate(nextDay.getDate() + 1);\n\n    return await this.db\n      .select({\n        id: productionSchedule.id,\n        productId: productionSchedule.productId,\n        quantity: productionSchedule.quantity,\n        scheduledDate: productionSchedule.scheduledDate,\n        status: productionSchedule.status,\n        notes: productionSchedule.notes,\n        productName: products.name,\n      })\n      .from(productionSchedule)\n      .leftJoin(products, eq(productionSchedule.productId, products.id))\n      .where(\n        and(\n          gte(productionSchedule.scheduledDate, targetDate),\n          lte(productionSchedule.scheduledDate, nextDay),\n        ),\n      )\n      .orderBy(productionSchedule.scheduledDate);\n  }\n\n  // Media operations\n  async getMediaItems(): Promise<any[]> {\n    return [];\n  }\n\n  async uploadMedia(userId: string, file: any): Promise<any> {\n    return {\n      id: Date.now(),\n      filename: file.filename,\n      url: `/uploads/${file.filename}`,\n    };\n  }\n\n  async deleteMedia(id: number): Promise<void> {\n    // Media deletion functionality\n  }\n\n  async getBills(): Promise<any[]> {\n    return await this.getOrders();\n  }\n\n  async createBill(billData: any): Promise<any> {\n    return await this.createOrder(billData);\n  }\n\n  async deleteBill(id: number): Promise<void> {\n    await this.deleteOrder(id);\n  }\n\n  // Enhanced notification system\n  async getNotifications(userId?: string): Promise<any[]> {\n    try {\n      // Return sample notifications for now - in production this would fetch from database\n      const sampleNotifications = [\n        {\n          id: \"1\",\n          type: \"order\",\n          title: \"New Order Received\",\n          description: \"Order #1024 from John Doe - $125.50\",\n          timestamp: new Date(Date.now() - 5 * 60 * 1000).toISOString(),\n          read: false,\n          priority: \"high\",\n          actionUrl: \"/orders/1024\",\n          data: { orderId: 1024, customerName: \"John Doe\", amount: 125.5 },\n        },\n        {\n          id: \"2\",\n          type: \"inventory\",\n          title: \"Low Stock Alert\",\n          description: \"Flour inventory is running low (5kg remaining)\",\n          timestamp: new Date(Date.now() - 15 * 60 * 1000).toISOString(),\n          read: false,\n          priority: \"critical\",\n          actionUrl: \"/inventory\",\n          data: { itemName: \"Flour\", currentStock: 5, minLevel: 10 },\n        },\n        {\n          id: \"3\",\n          type: \"production\",\n          title: \"Production Completed\",\n          description: \"Chocolate cake batch #45 completed successfully\",\n          timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n          read: false,\n          priority: \"medium\",\n          actionUrl: \"/production\",\n          data: { batchId: 45, product: \"Chocolate Cake\" },\n        },\n        {\n          id: \"4\",\n          type: \"shipping\",\n          title: \"Delivery Dispatched\",\n          description: \"Order #1020 dispatched via Express Delivery\",\n          timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n          read: true,\n          priority: \"medium\",\n          actionUrl: \"/orders/1020\",\n          data: { orderId: 1020, carrier: \"Express Delivery\" },\n        },\n        {\n          id: \"5\",\n          type: \"system\",\n          title: \"System Maintenance\",\n          description: \"Scheduled maintenance completed successfully\",\n          timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n          read: true,\n          priority: \"low\",\n          actionUrl: \"/settings\",\n          data: { maintenanceType: \"Database optimization\" },\n        },\n        {\n          id: \"6\",\n          type: \"order\",\n          title: \"Payment Received\",\n          description: \"Payment of $89.75 received for Order #1018\",\n          timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),\n          read: false,\n          priority: \"medium\",\n          actionUrl: \"/orders/1018\",\n          data: { orderId: 1018, amount: 89.75 },\n        },\n        {\n          id: \"7\",\n          type: \"production\",\n          title: \"Production Delay\",\n          description:\n            \"Vanilla cupcake batch delayed due to ingredient shortage\",\n          timestamp: new Date(Date.now() - 30 * 60 * 1000).toISOString(),\n          read: false,\n          priority: \"high\",\n          actionUrl: \"/production\",\n          data: { product: \"Vanilla Cupcakes\", reason: \"Ingredient shortage\" },\n        },\n      ];\n\n      return sampleNotifications;\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      return [];\n    }\n  }\n\n  async markNotificationAsRead(\n    notificationId: string,\n    userId: string,\n  ): Promise<void> {\n    // In production, this would update the database\n    console.log(\n      `Marking notification ${notificationId} as read for user ${userId}`,\n    );\n  }\n\n  async markAllNotificationsAsRead(userId: string): Promise<void> {\n    // In production, this would update all unread notifications for the user\n    console.log(`Marking all notifications as read for user ${userId}`);\n  }\n\n  async saveNotificationSubscription(\n    userId: string,\n    subscription: any,\n  ): Promise<void> {\n    // In production, this would save push notification subscription\n    console.log(`Saving notification subscription for user ${userId}`);\n  }\n\n  async removeNotificationSubscription(userId: string): Promise<void> {\n    // In production, this would remove push notification subscription\n    console.log(`Removing notification subscription for user ${userId}`);\n  }\n\n  async saveNotificationSettings(userId: string, settings: any): Promise<void> {\n    // In production, this would save notification preferences\n    console.log(`Saving notification settings for user ${userId}:`, settings);\n  }\n\n  async createNotification(notification: any): Promise<any> {\n    // In production, this would insert into notifications table\n    const newNotification = {\n      id: Date.now().toString(),\n      timestamp: new Date().toISOString(),\n      read: false,\n      ...notification,\n    };\n    console.log(\"Creating notification:\", newNotification);\n    return newNotification;\n  }\n\n  async triggerBusinessNotification(event: string, data: any): Promise<void> {\n    try {\n      let notification;\n\n      switch (event) {\n        case \"order_created\":\n          notification = {\n            type: \"order\",\n            title: \"New Order Received\",\n            description: `Order #${data.orderNumber} from ${data.customerName} - $${data.totalAmount}`,\n            priority: \"high\",\n            actionUrl: `/orders/${data.orderNumber}`,\n            data,\n          };\n          break;\n\n        case \"low_stock\":\n          notification = {\n            type: \"inventory\",\n            title: \"Low Stock Alert\",\n            description: `${data.itemName} is running low (${data.currentStock}${data.unit} remaining)`,\n            priority:\n              data.currentStock <= data.criticalLevel ? \"critical\" : \"high\",\n            actionUrl: \"/inventory\",\n            data,\n          };\n          break;\n\n        case \"production_completed\":\n          notification = {\n            type: \"production\",\n            title: \"Production Completed\",\n            description: `${data.productName} batch #${data.batchId} completed successfully`,\n            priority: \"medium\",\n            actionUrl: \"/production\",\n            data,\n          };\n          break;\n\n        case \"production_delayed\":\n          notification = {\n            type: \"production\",\n            title: \"Production Delay\",\n            description: `${data.productName} batch delayed: ${data.reason}`,\n            priority: \"high\",\n            actionUrl: \"/production\",\n            data,\n          };\n          break;\n\n        case \"shipment_dispatched\":\n          notification = {\n            type: \"shipping\",\n            title: \"Shipment Dispatched\",\n            description: `Order #${data.orderNumber} dispatched via ${data.carrier}`,\n            priority: \"medium\",\n            actionUrl: `/orders/${data.orderNumber}`,\n            data,\n          };\n          break;\n\n        case \"delivery_failed\":\n          notification = {\n            type: \"shipping\",\n            title: \"Delivery Failed\",\n            description: `Failed to deliver Order #${data.orderNumber}: ${data.reason}`,\n            priority: \"high\",\n            actionUrl: `/orders/${data.orderNumber}`,\n            data,\n          };\n          break;\n\n        case \"payment_received\":\n          notification = {\n            type: \"order\",\n            title: \"Payment Received\",\n            description: `Payment of $${data.amount} received for Order #${data.orderNumber}`,\n            priority: \"medium\",\n            actionUrl: `/orders/${data.orderNumber}`,\n            data,\n          };\n          break;\n\n        case \"system_alert\":\n          notification = {\n            type: \"system\",\n            title: data.title || \"System Alert\",\n            description: data.description,\n            priority: data.priority || \"medium\",\n            actionUrl: data.actionUrl || \"/settings\",\n            data,\n          };\n          break;\n\n        default:\n          console.warn(`Unknown notification event: ${event}`);\n          return;\n      }\n\n      // In production, broadcast to all relevant users based on their roles\n      const adminUsers = await this.getAllUsers(); // Fetch all users, including superadmin\n      const relevantUsers = adminUsers.filter((user) =>\n        [\"admin\", \"manager\", \"supervisor\"].includes(user.role),\n      );\n\n      for (const user of relevantUsers) {\n        await this.createNotification({\n          userId: user.id,\n          ...notification,\n        });\n      }\n\n      console.log(\n        `Triggered ${event} notification for ${relevantUsers.length} users`,\n      );\n    } catch (error) {\n      console.error(\"Error triggering business notification:\", error);\n    }\n  }\n\n  // Staff management operations\n  async getStaff(): Promise<Staff[]> {\n    return await this.db\n      .select()\n      .from(staff)\n      .orderBy(staff.firstName, staff.lastName);\n  }\n\n  async getStaffById(id: number): Promise<Staff | undefined> {\n    const result = await this.db\n      .select()\n      .from(staff)\n      .where(eq(staff.id, id))\n      .limit(1);\n    return result[0];\n  }\n\n  async createStaff(staffData: InsertStaff): Promise<Staff> {\n    const [newStaff] = await this.db\n      .insert(staff)\n      .values(staffData)\n      .returning();\n    return newStaff;\n  }\n\n  async updateStaff(\n    id: number,\n    staffData: Partial<InsertStaff>,\n  ): Promise<Staff> {\n    const [updatedStaff] = await this.db\n      .update(staff)\n      .set({ ...staffData, updatedAt: new Date() })\n      .where(eq(staff.id, id))\n      .returning();\n    return updatedStaff;\n  }\n\n  async deleteStaff(id: number): Promise<void> {\n    await this.db.delete(staff).where(eq(staff.id, id));\n  }\n\n  async getStaffByStaffId(staffId: string): Promise<Staff | null> {\n    const result = await this.db\n      .select()\n      .from(staff)\n      .where(eq(staff.staffId, staffId))\n      .limit(1);\n    return result[0] || null;\n  }\n\n  // Attendance operations\n  async getAttendance(\n    staffId?: number,\n    startDate?: Date,\n    endDate?: Date,\n  ): Promise<any[]> {\n    let query = this.db\n      .select({\n        id: attendance.id,\n        staffId: attendance.staffId,\n        date: attendance.date,\n        clockIn: attendance.clockIn,\n        clockOut: attendance.clockOut,\n        breakStart: attendance.breakStart,\n        breakEnd: attendance.breakEnd,\n        totalHours: attendance.totalHours,\n        overtimeHours: attendance.overtimeHours,\n        status: attendance.status,\n        notes: attendance.notes,\n        approvedBy: attendance.approvedBy,\n        createdAt: attendance.createdAt,\n        staffName: sql<string>`CONCAT(${staff.firstName}, ' ', ${staff.lastName})`,\n        staffPosition: staff.position,\n      })\n      .from(attendance)\n      .leftJoin(staff, eq(attendance.staffId, staff.id))\n      .orderBy(desc(attendance.date));\n\n    const conditions = [];\n    if (staffId) {\n      conditions.push(eq(attendance.staffId, staffId));\n    }\n    if (startDate) {\n      conditions.push(gte(attendance.date, startDate));\n    }\n    if (endDate) {\n      conditions.push(lte(attendance.date, endDate));\n    }\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n\n    return await query;\n  }\n\n  async createAttendance(\n    attendanceData: InsertAttendance,\n  ): Promise<Attendance> {\n    const [newAttendance] = await this.db\n      .insert(attendance)\n      .values(attendanceData)\n      .returning();\n    return newAttendance;\n  }\n\n  async updateAttendance(\n    id: number,\n    attendanceData: Partial<InsertAttendance>,\n  ): Promise<Attendance> {\n    const [updatedAttendance] = await this.db\n      .update(attendance)\n      .set({ ...attendanceData, updatedAt: new Date() })\n      .where(eq(attendance.id, id))\n      .returning();\n    return updatedAttendance;\n  }\n\n  async deleteAttendance(id: number): Promise<void> {\n    await this.db.delete(attendance).where(eq(attendance.id, id));\n  }\n\n  async clockIn(staffId: number): Promise<Attendance> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    // Check if already clocked in today\n    const existing = await this.db\n      .select()\n      .from(attendance)\n      .where(and(eq(attendance.staffId, staffId), gte(attendance.date, today)))\n      .limit(1);\n\n    if (existing.length > 0) {\n      throw new Error(\"Already clocked in today\");\n    }\n\n    const [newAttendance] = await this.db\n      .insert(attendance)\n      .values({\n        staffId,\n        date: new Date(),\n        clockIn: new Date(),\n        status: \"present\",\n      })\n      .returning();\n\n    return newAttendance;\n  }\n\n  async clockOut(staffId: number): Promise<Attendance> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const existing = await this.db\n      .select()\n      .from(attendance)\n      .where(and(eq(attendance.staffId, staffId), gte(attendance.date, today)))\n      .limit(1);\n\n    if (existing.length === 0) {\n      throw new Error(\"No clock-in record found for today\");\n    }\n\n    const clockOutTime = new Date();\n    const clockInTime = existing[0].clockIn;\n    let totalHours = 0;\n\n    if (clockInTime) {\n      totalHours =\n        (clockOutTime.getTime() - clockInTime.getTime()) / (1000 * 60 * 60);\n    }\n\n    const [updatedAttendance] = await this.db\n      .update(attendance)\n      .set({\n        clockOut: clockOutTime,\n        totalHours: totalHours.toString(),\n        updatedAt: new Date(),\n      })\n      .where(eq(attendance.id, existing[0].id))\n      .returning();\n\n    return updatedAttendance;\n  }\n\n  // Salary operations\n  async getSalaryPayments(staffId?: number): Promise<any[]> {\n    let query = this.db\n      .select({\n        id: salaryPayments.id,\n        staffId: salaryPayments.staffId,\n        payPeriodStart: salaryPayments.payPeriodStart,\n        payPeriodEnd: salaryPayments.payPeriodEnd,\n        basicSalary: salaryPayments.basicSalary,\n        overtimePay: salaryPayments.overtimePay,\n        bonus: salaryPayments.bonus,\n        allowances: salaryPayments.allowances,\n        deductions: salaryPayments.deductions,\n        tax: salaryPayments.tax,\n        netPay: salaryPayments.netPay,\n        paymentDate: salaryPayments.paymentDate,\n        paymentMethod: salaryPayments.paymentMethod,\n        status: salaryPayments.status,\n        notes: salaryPayments.notes,\n        processedBy: salaryPayments.processedBy,\n        createdAt: salaryPayments.createdAt,\n        staffName: sql<string>`CONCAT(${staff.firstName}, ' ', ${staff.lastName})`,\n        staffPosition: staff.position,\n      })\n      .from(salaryPayments)\n      .leftJoin(staff, eq(salaryPayments.staffId, staff.id))\n      .orderBy(desc(salaryPayments.payPeriodEnd));\n\n    if (staffId) {\n      query = query.where(eq(salaryPayments.staffId, staffId));\n    }\n\n    return await query;\n  }\n\n  async createSalaryPayment(\n    paymentData: InsertSalaryPayment,\n  ): Promise<SalaryPayment> {\n    const [newPayment] = await this.db\n      .insert(salaryPayments)\n      .values(paymentData)\n      .returning();\n    return newPayment;\n  }\n\n  async updateSalaryPayment(\n    id: number,\n    paymentData: Partial<InsertSalaryPayment>,\n  ): Promise<SalaryPayment> {\n    const [updatedPayment] = await this.db\n      .update(salaryPayments)\n      .set({ ...paymentData, updatedAt: new Date() })\n      .where(eq(salaryPayments.id, id))\n      .returning();\n    return updatedPayment;\n  }\n\n  async deleteSalaryPayment(id: number): Promise<void> {\n    await this.db.delete(salaryPayments).where(eq(salaryPayments.id, id));\n  }\n\n  // Leave request operations\n  async getLeaveRequests(staffId?: number): Promise<any[]> {\n    let query = this.db\n      .select({\n        id: leaveRequests.id,\n        staffId: leaveRequests.staffId,\n        leaveType: leaveRequests.leaveType,\n        startDate: leaveRequests.startDate,\n        endDate: leaveRequests.endDate,\n        totalDays: leaveRequests.totalDays,\n        reason: leaveRequests.reason,\n        status: leaveRequests.status,\n        appliedDate: leaveRequests.appliedDate,\n        reviewedBy: leaveRequests.reviewedBy,\n        reviewedDate: leaveRequests.reviewedDate,\n        reviewComments: leaveRequests.reviewComments,\n        staffName: sql<string>`CONCAT(${staff.firstName}, ' ', ${staff.lastName})`,\n        staffPosition: staff.position,\n      })\n      .from(leaveRequests)\n      .leftJoin(staff, eq(leaveRequests.staffId, staff.id))\n      .orderBy(desc(leaveRequests.appliedDate));\n\n    if (staffId) {\n      query = query.where(eq(leaveRequests.staffId, staffId));\n    }\n\n    return await query;\n  }\n\n  async createLeaveRequest(\n    requestData: InsertLeaveRequest,\n  ): Promise<LeaveRequest> {\n    const [newRequest] = await this.db\n      .insert(leaveRequests)\n      .values(requestData)\n      .returning();\n    return newRequest;\n  }\n\n  async updateLeaveRequest(\n    id: number,\n    requestData: Partial<InsertLeaveRequest>,\n  ): Promise<LeaveRequest> {\n    const [updatedRequest] = await this.db\n      .update(leaveRequests)\n      .set({ ...requestData, updatedAt: new Date() })\n      .where(eq(leaveRequests.id, id))\n      .returning();\n    return updatedRequest;\n  }\n\n  async deleteLeaveRequest(id: number): Promise<void> {\n    await this.db.delete(leaveRequests).where(eq(leaveRequests.id, id));\n  }\n\n  // Staff schedule operations\n  async getStaffSchedules(staffId?: number, date?: Date): Promise<any[]> {\n    let query = this.db\n      .select({\n        id: staffSchedules.id,\n        staffId: staffSchedules.staffId,\n        date: staffSchedules.date,\n        shiftStart: staffSchedules.shiftStart,\n        shiftEnd: staffSchedules.shiftEnd,\n        position: staffSchedules.position,\n        department: staffSchedules.department,\n        isRecurring: staffSchedules.isRecurring,\n        recurringPattern: staffSchedules.recurringPattern,\n        notes: staffSchedules.notes,\n        createdBy: staffSchedules.createdBy,\n        staffName: sql<string>`CONCAT(${staff.firstName}, ' ', ${staff.lastName})`,\n        staffPosition: staff.position,\n      })\n      .from(staffSchedules)\n      .leftJoin(staff, eq(staffSchedules.staffId, staff.id))\n      .orderBy(staffSchedules.date);\n\n    const conditions = [];\n    if (staffId) {\n      conditions.push(eq(staffSchedules.staffId, staffId));\n    }\n    if (date) {\n      const startOfDay = new Date(date);\n      startOfDay.setHours(0, 0, 0, 0);\n      const endOfDay = new Date(date);\n      endOfDay.setHours(23, 59, 59, 999);\n      conditions.push(\n        and(\n          gte(staffSchedules.date, startOfDay),\n          lte(staffSchedules.date, endOfDay),\n        ),\n      );\n    }\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n\n    return await query;\n  }\n\n  async createStaffSchedule(\n    scheduleData: InsertStaffSchedule,\n  ): Promise<StaffSchedule> {\n    const [newSchedule] = await this.db\n      .insert(staffSchedules)\n      .values(scheduleData)\n      .returning();\n    return newSchedule;\n  }\n\n  async updateStaffSchedule(\n    id: number,\n    scheduleData: Partial<InsertStaffSchedule>,\n  ): Promise<StaffSchedule> {\n    const [updatedSchedule] = await this.db\n      .update(staffSchedules)\n      .set({ ...scheduleData, updatedAt: new Date() })\n      .where(eq(staffSchedules.id, id))\n      .returning();\n    return updatedSchedule;\n  }\n\n  async deleteStaffSchedule(id: number): Promise<void> {\n    await this.db.delete(staffSchedules).where(eq(staffSchedules.id, id));\n  }\n  async createAuditLog(log: InsertAuditLog): Promise<AuditLog> {\n    try {\n      // Ensure all required fields are present\n      const auditLogData = {\n        ...log,\n        timestamp: new Date(),\n        status: log.status || \"success\",\n        userId: log.userId || \"system\",\n        userEmail: log.userEmail || \"system@bakesewa.com\",\n        userName: log.userName || \"System\",\n        ipAddress: log.ipAddress || \"127.0.0.1\",\n      };\n\n      const [auditLog] = await this.db\n        .insert(auditLogs)\n        .values(auditLogData)\n        .returning();\n      return auditLog;\n    } catch (error) {\n      console.error(\"Failed to create audit log:\", error);\n      // Still try to log the error to console for debugging\n      console.error(\"Audit log data:\", log);\n      throw error;\n    }\n  }\n\n  async getAuditLogs(filters?: {\n    userId?: string;\n    action?: string;\n    resource?: string;\n    startDate?: Date;\n    endDate?: Date;\n    limit?: number;\n    offset?: number;\n  }): Promise<AuditLog[]> {\n    try {\n      let query = this.db.select().from(auditLogs);\n\n      if (filters) {\n        const conditions = [];\n\n        if (filters.userId) {\n          conditions.push(eq(auditLogs.userId, filters.userId));\n        }\n\n        if (filters.action) {\n          conditions.push(eq(auditLogs.action, filters.action));\n        }\n\n        if (filters.resource) {\n          conditions.push(eq(auditLogs.resource, filters.resource));\n        }\n\n        if (filters.startDate) {\n          conditions.push(\n            sql`${auditLogs.timestamp} >= ${filters.startDate.toISOString()}`,\n          );\n        }\n\n        if (filters.endDate) {\n          conditions.push(\n            sql`${auditLogs.timestamp} <= ${filters.endDate.toISOString()}`,\n          );\n        }\n\n        if (conditions.length > 0) {\n          query = query.where(and(...conditions));\n        }\n\n        if (filters.offset) {\n          query = query.offset(filters.offset);\n        }\n\n        if (filters.limit) {\n          query = query.limit(filters.limit);\n        } else {\n          query = query.limit(1000);\n        }\n      } else {\n        query = query.limit(1000);\n      }\n\n      return await query.orderBy(desc(auditLogs.timestamp));\n    } catch (error) {\n      console.error(\"Failed to get audit logs:\", error);\n      return [];\n    }\n  }\n\n  async logLogin(\n    userId: string,\n    userEmail: string,\n    userName: string,\n    ipAddress: string,\n    userAgent: string,\n    success: boolean,\n    errorMessage?: string,\n  ): Promise<void> {\n    try {\n      await this.createAuditLog({\n        userId,\n        userEmail,\n        userName,\n        action: \"LOGIN\",\n        resource: \"authentication\",\n        details: {\n          userAgent,\n          success,\n          timestamp: new Date().toISOString(),\n        },\n        ipAddress,\n        userAgent,\n        status: success ? \"success\" : \"failed\",\n        errorMessage,\n      });\n    } catch (error) {\n      console.error(\"Failed to log login event:\", error);\n    }\n  }\n\n  async logLogout(\n    userId: string,\n    userEmail: string,\n    userName: string,\n    ipAddress: string,\n  ): Promise<void> {\n    try {\n      await this.createAuditLog({\n        userId,\n        userEmail,\n        userName,\n        action: \"LOGOUT\",\n        resource: \"authentication\",\n        details: {\n          timestamp: new Date().toISOString(),\n        },\n        ipAddress,\n        status: \"success\",\n      });\n    } catch (error) {\n      console.error(\"Failed to log logout event:\", error);\n    }\n  }\n\n  // Security monitoring methods\n  async getSecurityMetrics(\n    timeframe: \"hour\" | \"day\" | \"week\" = \"day\",\n  ): Promise<any> {\n    try {\n      const now = new Date();\n      let startTime: Date;\n\n      switch (timeframe) {\n        case \"hour\":\n          startTime = new Date(now.getTime() - 60 * 60 * 1000);\n          break;\n        case \"week\":\n          startTime = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n          break;\n        default:\n          startTime = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n      }\n\n      const [failedLogins, suspiciousActivities, totalActivities] =\n        await Promise.all([\n          this.db\n            .select({ count: count() })\n            .from(loginLogs)\n            .where(\n              and(\n                eq(loginLogs.status, \"failed\"),\n                gte(loginLogs.timestamp, startTime),\n              ),\n            ),\n\n          this.db\n            .select({ count: count() })\n            .from(auditLogs)\n            .where(\n              and(\n                eq(auditLogs.status, \"failed\"),\n                gte(auditLogs.timestamp, startTime),\n              ),\n            ),\n\n          this.db\n            .select({ count: count() })\n            .from(auditLogs)\n            .where(gte(auditLogs.timestamp, startTime)),\n        ]);\n\n      return {\n        failedLogins: failedLogins[0]?.count || 0,\n        suspiciousActivities: suspiciousActivities[0]?.count || 0,\n        totalActivities: totalActivities[0]?.count || 0,\n        timeframe,\n        period: { start: startTime, end: now },\n      };\n    } catch (error) {\n      console.error(\"‚ùå Failed to get security metrics:\", error);\n      return {\n        failedLogins: 0,\n        suspiciousActivities: 0,\n        totalActivities: 0,\n        timeframe,\n        error: error.message,\n      };\n    }\n  }\n}\n\nexport const storage = new Storage();","size_bytes":104059},"server/lib/unitConversion.ts":{"content":"import { storage } from \"./storage\";\n\n/**\n * Unit conversion utility for cost calculations\n */\nexport class UnitConversionCalculator {\n  private static instance: UnitConversionCalculator;\n  private conversions: any[] = [];\n  private units: any[] = [];\n\n  private constructor() {}\n\n  public static getInstance(): UnitConversionCalculator {\n    if (!UnitConversionCalculator.instance) {\n      UnitConversionCalculator.instance = new UnitConversionCalculator();\n    }\n    return UnitConversionCalculator.instance;\n  }\n\n  /**\n   * Load conversion data from database\n   */\n  async loadConversions(): Promise<void> {\n    try {\n      this.conversions = await storage.getUnitConversions();\n      this.units = await storage.getUnits();\n    } catch (error) {\n      console.error(\"Error loading unit conversions:\", error);\n    }\n  }\n\n  /**\n   * Convert quantity from one unit to another\n   */\n  async convertQuantity(\n    fromQuantity: number,\n    fromUnitId: number,\n    toUnitId: number\n  ): Promise<number> {\n    // If same unit, return original quantity\n    if (fromUnitId === toUnitId) {\n      return fromQuantity;\n    }\n\n    await this.loadConversions();\n\n    // Find direct conversion\n    const directConversion = this.conversions.find(\n      (c: any) => c.fromUnitId === fromUnitId && c.toUnitId === toUnitId && c.isActive\n    );\n\n    if (directConversion) {\n      return fromQuantity * parseFloat(directConversion.conversionFactor);\n    }\n\n    // Find reverse conversion\n    const reverseConversion = this.conversions.find(\n      (c: any) => c.fromUnitId === toUnitId && c.toUnitId === fromUnitId && c.isActive\n    );\n\n    if (reverseConversion) {\n      return fromQuantity / parseFloat(reverseConversion.conversionFactor);\n    }\n\n    // Try to find conversion through base units\n    const fromUnit = this.units.find((u: any) => u.id === fromUnitId);\n    const toUnit = this.units.find((u: any) => u.id === toUnitId);\n\n    if (fromUnit && toUnit && fromUnit.baseUnit && toUnit.baseUnit && fromUnit.baseUnit === toUnit.baseUnit) {\n      // Convert from source unit to base unit\n      const fromConversionFactor = parseFloat(fromUnit.conversionFactor) || 1;\n      const toConversionFactor = parseFloat(toUnit.conversionFactor) || 1;\n      \n      // Convert to base unit first, then to target unit\n      const baseQuantity = fromQuantity * fromConversionFactor;\n      return baseQuantity / toConversionFactor;\n    }\n\n    throw new Error(`No conversion found from unit ${fromUnitId} to unit ${toUnitId}`);\n  }\n\n  /**\n   * Calculate product cost based on ingredients with unit conversions\n   */\n  async calculateProductCost(productId: number): Promise<{\n    totalCost: number;\n    ingredientCosts: Array<{\n      ingredientId: number;\n      ingredientName: string;\n      quantity: number;\n      unit: string;\n      costPerUnit: number;\n      totalCost: number;\n      conversionUsed?: boolean;\n    }>;\n  }> {\n    const ingredients = await storage.getProductIngredients(productId);\n    const inventoryItems = await storage.getInventoryItems();\n    \n    let totalCost = 0;\n    const ingredientCosts: any[] = [];\n\n    for (const ingredient of ingredients) {\n      const inventoryItem = inventoryItems.find((item: any) => item.id === ingredient.inventoryItemId);\n      \n      if (!inventoryItem) {\n        console.warn(`Inventory item not found for ingredient ${ingredient.id}`);\n        continue;\n      }\n\n      const requiredQuantity = parseFloat(ingredient.quantity);\n      const ingredientUnit = ingredient.unit;\n      const inventoryUnit = inventoryItem.unit;\n      const costPerUnit = parseFloat(inventoryItem.costPerUnit);\n\n      let convertedQuantity = requiredQuantity;\n      let conversionUsed = false;\n\n      // If units are different, try to convert\n      if (ingredientUnit !== inventoryUnit) {\n        try {\n          // Find unit IDs\n          const ingredientUnitData = this.units.find((u: any) => u.name === ingredientUnit || u.abbreviation === ingredientUnit);\n          const inventoryUnitData = this.units.find((u: any) => u.name === inventoryUnit || u.abbreviation === inventoryUnit);\n\n          if (ingredientUnitData && inventoryUnitData) {\n            convertedQuantity = await this.convertQuantity(\n              requiredQuantity,\n              ingredientUnitData.id,\n              inventoryUnitData.id\n            );\n            conversionUsed = true;\n          } else {\n            console.warn(`Could not find unit data for conversion from ${ingredientUnit} to ${inventoryUnit}`);\n          }\n        } catch (error) {\n          console.warn(`Unit conversion failed for ${ingredientUnit} to ${inventoryUnit}:`, error);\n        }\n      }\n\n      const ingredientCost = convertedQuantity * costPerUnit;\n      totalCost += ingredientCost;\n\n      ingredientCosts.push({\n        ingredientId: ingredient.id,\n        ingredientName: inventoryItem.name,\n        quantity: convertedQuantity,\n        unit: inventoryUnit,\n        costPerUnit: costPerUnit,\n        totalCost: ingredientCost,\n        conversionUsed\n      });\n    }\n\n    return {\n      totalCost,\n      ingredientCosts\n    };\n  }\n\n  /**\n   * Update product cost automatically based on ingredient costs\n   */\n  async updateProductCost(productId: number): Promise<void> {\n    try {\n      const costCalculation = await this.calculateProductCost(productId);\n      \n      // Update product cost in database\n      await storage.updateProduct(productId, {\n        cost: costCalculation.totalCost.toString()\n      });\n\n      console.log(`Updated product ${productId} cost to ${costCalculation.totalCost}`);\n    } catch (error) {\n      console.error(`Failed to update product ${productId} cost:`, error);\n    }\n  }\n\n  /**\n   * Get available conversions for a unit\n   */\n  async getAvailableConversions(unitId: number): Promise<any[]> {\n    await this.loadConversions();\n    \n    return this.conversions.filter(\n      (c: any) => (c.fromUnitId === unitId || c.toUnitId === unitId) && c.isActive\n    );\n  }\n}\n\nexport const unitConverter = UnitConversionCalculator.getInstance();","size_bytes":6036},"server/lib/unitHelper.ts":{"content":"\nexport class UnitHelper {\n  /**\n   * Convert quantity from secondary unit to primary unit\n   */\n  static convertSecondaryToPrimary(\n    secondaryQuantity: number,\n    conversionRate: number\n  ): number {\n    return secondaryQuantity * conversionRate;\n  }\n\n  /**\n   * Convert quantity from primary unit to secondary unit\n   */\n  static convertPrimaryToSecondary(\n    primaryQuantity: number,\n    conversionRate: number\n  ): number {\n    return primaryQuantity / conversionRate;\n  }\n\n  /**\n   * Get display string for dual units\n   */\n  static getUnitDisplayString(\n    primaryQuantity: number,\n    primaryUnit: string,\n    secondaryQuantity?: number,\n    secondaryUnit?: string\n  ): string {\n    let display = `${primaryQuantity} ${primaryUnit}`;\n    if (secondaryQuantity !== undefined && secondaryUnit) {\n      display += ` (${secondaryQuantity} ${secondaryUnit})`;\n    }\n    return display;\n  }\n\n  /**\n   * Calculate stock in both units\n   */\n  static calculateDualUnitStock(\n    primaryStock: number,\n    conversionRate: number\n  ): {\n    primaryStock: number;\n    secondaryStock: number;\n  } {\n    return {\n      primaryStock,\n      secondaryStock: this.convertPrimaryToSecondary(primaryStock, conversionRate),\n    };\n  }\n}\n","size_bytes":1229},"client/src/components/admin-user-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Plus,\n  Edit,\n  Trash2,\n  Users,\n  Activity,\n  Shield,\n  Settings,\n  Eye,\n  Pencil,\n  AlertTriangle,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useAllPermissions, useRolePermissions } from \"@/hooks/usePermissions\";\nimport { useRoleAccess } from \"@/hooks/useRoleAccess\";\nimport AuditLogs from \"@/pages/LoginLogs\";\n\nexport default function AdminUserManagement() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState<any>(null);\n  const [selectedRole, setSelectedRole] = useState<string>(\"admin\");\n  const [userData, setUserData] = useState({\n    email: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    role: \"staff\",\n  });\n  const { toast } = useToast();\n  const { isSuperAdmin } = useRoleAccess();\n\n  const {\n    data: users = [],\n    isLoading,\n    error,\n  } = useQuery<any[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  const filteredUsers = isSuperAdmin()\n    ? users\n    : users.filter((user) => user.role !== \"super_admin\");\n\n  const groupPermissionsByResource = (permissions: any[]) => {\n    const grouped = permissions.reduce((acc: any, perm: any) => {\n      if (!acc[perm.resource]) {\n        acc[perm.resource] = [];\n      }\n      acc[perm.resource].push(perm);\n      return acc;\n    }, {});\n    return grouped;\n  };\n\n  const { data: allPermissions = [] } = useAllPermissions();\n  const { data: rolePermissions = [], refetch: refetchRolePermissions } =\n    useRolePermissions(selectedRole);\n\n  const updateRolePermissionsMutation = useMutation({\n    mutationFn: async ({\n      role,\n      permissionIds,\n    }: {\n      role: string;\n      permissionIds: number[];\n    }) => {\n      return apiRequest(\"PUT\", `/api/permissions/role/${role}`, {\n        permissionIds,\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"Role permissions updated successfully\" });\n      refetchRolePermissions();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to update permissions\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/admin/users\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setIsDialogOpen(false);\n      setEditingUser(null);\n      setUserData({\n        email: \"\",\n        password: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        role: \"staff\",\n      });\n      toast({\n        title: \"Success\",\n        description: \"User created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      return await apiRequest(\"PUT\", `/api/admin/users/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setIsDialogOpen(false);\n      setEditingUser(null);\n      setUserData({\n        email: \"\",\n        password: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        role: \"staff\",\n      });\n      toast({\n        title: \"Success\",\n        description: \"User updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/admin/users/${id}`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n    const data = {\n      email: formData.get(\"email\") as string,\n      firstName: formData.get(\"firstName\") as string,\n      lastName: formData.get(\"lastName\") as string,\n      role: formData.get(\"role\") as string,\n      ...((!editingUser || formData.get(\"password\")) && {\n        password: formData.get(\"password\") as string,\n      }),\n    };\n\n    if (editingUser) {\n      updateMutation.mutate({ id: editingUser.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEditUser = (user: any) => {\n    setEditingUser(user);\n    setUserData({\n      email: user.email,\n      password: \"\",\n      firstName: user.firstName,\n      lastName: user.lastName,\n      role: user.role,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const getRoleBadgeVariant = (role: string) => {\n    const variants: Record<\n      string,\n      \"default\" | \"secondary\" | \"destructive\" | \"outline\"\n    > = {\n      super_admin: \"destructive\",\n      admin: \"destructive\",\n      manager: \"default\",\n      supervisor: \"secondary\",\n      marketer: \"outline\",\n      staff: \"outline\",\n    };\n    return variants[role] || \"outline\";\n  };\n\n  const handleDeleteUser = async (userId: string) => {\n    if (confirm(\"Are you sure you want to delete this user?\")) {\n      deleteMutation.mutate(userId);\n    }\n  };\n\n  const handlePermissionChange = (permissionId: number, checked: boolean) => {\n    const currentPermissionIds = rolePermissions.map((p: any) => p.id);\n    let newPermissionIds;\n\n    if (checked) {\n      newPermissionIds = [...currentPermissionIds, permissionId];\n    } else {\n      newPermissionIds = currentPermissionIds.filter(\n        (id: number) => id !== permissionId,\n      );\n    }\n\n    updateRolePermissionsMutation.mutate({\n      role: selectedRole,\n      permissionIds: newPermissionIds,\n    });\n  };\n\n  if (error) {\n    if (\n      isUnauthorizedError(error) ||\n      error.message.includes(\"403\") ||\n      error.message.includes(\"404\")\n    ) {\n      return (\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center text-muted-foreground\">\n              <Users className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Access Denied</h3>\n              <p>You don't have permission to access user management.</p>\n              <p className=\"text-sm mt-2\">\n                Contact your administrator for access.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      );\n    }\n\n    return (\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"text-center text-red-600\">\n            <p>Error loading user management: {error.message}</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const validRoles = [\n    ...(isSuperAdmin() ? [{ value: \"super_admin\", label: \"Super Admin\" }] : []),\n    { value: \"admin\", label: \"Admin\" },\n    { value: \"manager\", label: \"Manager\" },\n    { value: \"supervisor\", label: \"Supervisor\" },\n    { value: \"marketer\", label: \"Marketer\" },\n    { value: \"staff\", label: \"Staff\" },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n            <Shield className=\"h-8 w-8\" />\n            System Administration\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Manage users, permissions, and monitor system activities\n          </p>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"users\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"users\" className=\"flex items-center gap-2\">\n            <Users className=\"h-4 w-4\" />\n            User Management\n          </TabsTrigger>\n          <TabsTrigger value=\"permissions\" className=\"flex items-center gap-2\">\n            <Settings className=\"h-4 w-4\" />\n            Role Permissions\n          </TabsTrigger>\n          <TabsTrigger value=\"audit\" className=\"flex items-center gap-2\">\n            <Activity className=\"h-4 w-4\" />\n            Audit Logs\n          </TabsTrigger>\n          <TabsTrigger value=\"security\" className=\"flex items-center gap-2\">\n            <Shield className=\"h-4 w-4\" />\n            Security Monitor\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"users\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Users className=\"h-5 w-5\" />\n                    User Management\n                  </CardTitle>\n                  <CardDescription>\n                    Manage users and their roles\n                  </CardDescription>\n                </div>\n                <Dialog\n                  open={isDialogOpen}\n                  onOpenChange={(open) => {\n                    setIsDialogOpen(open);\n                    if (!open) {\n                      setEditingUser(null);\n                      setUserData({\n                        email: \"\",\n                        password: \"\",\n                        firstName: \"\",\n                        lastName: \"\",\n                        role: \"staff\",\n                      });\n                    }\n                  }}\n                >\n                  <DialogTrigger asChild>\n                    <Button disabled={!isSuperAdmin()}>\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add User\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>\n                        {editingUser ? \"Edit User\" : \"Create New User\"}\n                      </DialogTitle>\n                      <DialogDescription>\n                        {editingUser\n                          ? \"Update user information\"\n                          : \"Add a new user to the system\"}\n                      </DialogDescription>\n                    </DialogHeader>\n                    <form onSubmit={handleSave} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"firstName\">First Name</Label>\n                          <Input\n                            id=\"firstName\"\n                            name=\"firstName\"\n                            defaultValue={userData.firstName}\n                            placeholder=\"Enter first name\"\n                            required\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"lastName\">Last Name</Label>\n                          <Input\n                            id=\"lastName\"\n                            name=\"lastName\"\n                            defaultValue={userData.lastName}\n                            placeholder=\"Enter last name\"\n                            required\n                          />\n                        </div>\n                      </div>\n                      <div>\n                        <Label htmlFor=\"email\">Email</Label>\n                        <Input\n                          id=\"email\"\n                          name=\"email\"\n                          type=\"email\"\n                          defaultValue={userData.email}\n                          placeholder=\"Enter email address\"\n                          required\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"password\">\n                          {editingUser\n                            ? \"Password (leave blank to keep current)\"\n                            : \"Password\"}\n                        </Label>\n                        <Input\n                          id=\"password\"\n                          name=\"password\"\n                          type=\"password\"\n                          placeholder=\"Enter password\"\n                          required={!editingUser}\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"role\">Role</Label>\n                        <Select name=\"role\" defaultValue={userData.role}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select role\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {validRoles.map((role) => (\n                              <SelectItem key={role.value} value={role.value}>\n                                {role.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => setIsDialogOpen(false)}\n                        >\n                          Cancel\n                        </Button>\n                        <Button\n                          type=\"submit\"\n                          disabled={\n                            createMutation.isPending || updateMutation.isPending\n                          }\n                        >\n                          {editingUser ? \"Update User\" : \"Create User\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                Showing {filteredUsers.length} users\n              </p>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"flex justify-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Name</TableHead>\n                        <TableHead>Email</TableHead>\n                        <TableHead>Role</TableHead>\n                        <TableHead>Created</TableHead>\n                        <TableHead className=\"text-right\">Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredUsers.map((user: any) => (\n                        <TableRow key={user.id}>\n                          <TableCell className=\"font-medium\">\n                            {user.firstName} {user.lastName}\n                          </TableCell>\n                          <TableCell>{user.email}</TableCell>\n                          <TableCell>\n                            <Badge variant={getRoleBadgeVariant(user.role)}>\n                              {user.role}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            {new Date(user.createdAt).toLocaleDateString()}\n                          </TableCell>\n                          <TableCell className=\"text-right\">\n                            <div className=\"flex items-center justify-end space-x-2\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleEditUser(user)}\n                                disabled={\n                                  user.role === \"super_admin\" && !isSuperAdmin()\n                                }\n                                className=\"text-blue-600 hover:text-blue-800 focus:outline-none\"\n                                title=\"Edit\"\n                              >\n                                <Pencil className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleDeleteUser(user.id)}\n                                disabled={\n                                  user.role === \"super_admin\" && !isSuperAdmin()\n                                }\n                                className=\"text-red-600 hover:text-red-800 focus:outline-none\"\n                                title=\"Delete\"\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                  {filteredUsers.length === 0 && (\n                    <div className=\"text-center py-8\">\n                      <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-semibold text-muted-foreground mb-2\">\n                        No users found\n                      </h3>\n                      <p className=\"text-muted-foreground mb-4\">\n                        Start by adding your first user\n                      </p>\n                      <Button\n                        onClick={() => setIsDialogOpen(true)}\n                        disabled={!isSuperAdmin()}\n                      >\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Add User\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"permissions\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Role Permissions Management</CardTitle>\n              <CardDescription>\n                Configure permissions for each role. Select a role to manage its\n                permissions.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"roleSelect\">Select Role</Label>\n                <Select value={selectedRole} onValueChange={setSelectedRole}>\n                  <SelectTrigger className=\"w-[200px]\">\n                    <SelectValue placeholder=\"Select a role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {validRoles.map((role) => (\n                      <SelectItem key={role.value} value={role.value}>\n                        {role.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {selectedRole && (\n                <div className=\"space-y-4\">\n                  {updateRolePermissionsMutation.isPending && (\n                    <div className=\"text-center py-4\">\n                      <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary mx-auto\"></div>\n                      <p className=\"text-sm text-muted-foreground mt-2\">\n                        Updating permissions...\n                      </p>\n                    </div>\n                  )}\n\n                  {selectedRole === \"super_admin\" && (\n                    <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 mb-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant=\"default\" className=\"bg-green-600\">\n                          Super Admin\n                        </Badge>\n                        <span className=\"text-green-800 font-medium\">\n                          Full Access to All System Resources\n                        </span>\n                      </div>\n                      <p className=\"text-green-700 text-sm mt-2\">\n                        Super Admin has unrestricted access to all pages,\n                        features, and permissions in the system.\n                      </p>\n                    </div>\n                  )}\n\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead className=\"w-[200px]\">Resource</TableHead>\n                          <TableHead className=\"w-[300px]\">\n                            Description\n                          </TableHead>\n                          <TableHead className=\"text-center w-[120px]\">\n                            Read\n                          </TableHead>\n                          <TableHead className=\"text-center w-[120px]\">\n                            Read-Write\n                          </TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {Object.entries(\n                          groupPermissionsByResource(allPermissions as any[]),\n                        ).map(([resource, permissions]: [string, any[]]) => {\n                          const hasRead = rolePermissions.some((rp: any) =>\n                            (permissions as any[]).some(\n                              (p: any) =>\n                                p.id === rp.permissionId && p.action === \"read\",\n                            ),\n                          );\n\n                          const hasReadWrite = rolePermissions.some((rp: any) =>\n                            (permissions as any[]).some(\n                              (p: any) =>\n                                p.id === rp.permissionId &&\n                                p.action === \"read_write\",\n                            ),\n                          );\n\n                          const handlePermissionChange = (\n                            permissionId: number,\n                            isGranted: boolean,\n                          ) => {\n                            const currentPermissionIds = rolePermissions.map(\n                              (rp: any) => rp.permissionId,\n                            );\n\n                            let newPermissionIds;\n                            if (isGranted) {\n                              newPermissionIds = currentPermissionIds.includes(\n                                permissionId,\n                              )\n                                ? currentPermissionIds\n                                : [...currentPermissionIds, permissionId];\n                            } else {\n                              newPermissionIds = currentPermissionIds.filter(\n                                (id: number) => id !== permissionId,\n                              );\n                            }\n\n                            updateRolePermissionsMutation.mutate({\n                              role: selectedRole,\n                              permissionIds: newPermissionIds,\n                            });\n                          };\n\n                          const handleReadToggle = (checked: boolean) => {\n                            const readPerm = (permissions as any[]).find(\n                              (p: any) => p.action === \"read\",\n                            );\n                            if (readPerm) {\n                              handlePermissionChange(readPerm.id, checked);\n                            }\n                          };\n\n                          const handleReadWriteToggle = (checked: boolean) => {\n                            const readWritePerm = (permissions as any[]).find(\n                              (p: any) => p.action === \"read_write\",\n                            );\n                            if (readWritePerm) {\n                              handlePermissionChange(readWritePerm.id, checked);\n                            }\n                          };\n\n                          const getResourceDescription = (resource: string) => {\n                            const descriptions: { [key: string]: string } = {\n                              dashboard: \"Overview and analytics\",\n                              products: \"Product catalog management\",\n                              inventory: \"Stock and materials tracking\",\n                              orders: \"Customer order processing\",\n                              production: \"Production scheduling\",\n                              customers: \"Customer relationship management\",\n                              parties: \"Supplier and vendor management\",\n                              assets: \"Asset and equipment tracking\",\n                              expenses: \"Business expense tracking\",\n                              sales: \"Sales transaction management\",\n                              purchases: \"Purchase order management\",\n                              reports: \"Reports and analytics\",\n                              settings: \"System configuration\",\n                              users: \"User account management\",\n                              staff: \"Staff management and records\",\n                              attendance: \"Staff attendance tracking\",\n                              salary: \"Salary and payroll management\",\n                              leave_requests: \"Leave request management\",\n                            };\n                            return (\n                              descriptions[resource] ||\n                              `Manage ${resource} access`\n                            );\n                          };\n\n                          return (\n                            <TableRow key={resource}>\n                              <TableCell className=\"font-medium\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <div className=\"w-8 h-8 bg-primary/10 rounded-md flex items-center justify-center\">\n                                    <i className=\"fas fa-cube text-primary text-xs\"></i>\n                                  </div>\n                                  <span className=\"capitalize\">\n                                    {resource.replace(\"_\", \" \")}\n                                  </span>\n                                </div>\n                              </TableCell>\n                              <TableCell className=\"text-sm text-muted-foreground\">\n                                {getResourceDescription(resource)}\n                              </TableCell>\n                              <TableCell className=\"text-center\">\n                                <label className=\"relative inline-flex items-center cursor-pointer\">\n                                  <input\n                                    type=\"checkbox\"\n                                    checked={\n                                      hasRead || selectedRole === \"super_admin\"\n                                    }\n                                    onChange={(e) =>\n                                      handleReadToggle(e.target.checked)\n                                    }\n                                    className=\"sr-only peer\"\n                                    disabled={selectedRole === \"super_admin\"}\n                                  />\n                                  <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600 peer-disabled:opacity-50 peer-disabled:cursor-not-allowed\"></div>\n                                </label>\n                              </TableCell>\n                              <TableCell className=\"text-center\">\n                                <label className=\"relative inline-flex items-center cursor-pointer\">\n                                  <input\n                                    type=\"checkbox\"\n                                    checked={\n                                      hasReadWrite ||\n                                      selectedRole === \"super_admin\"\n                                    }\n                                    onChange={(e) =>\n                                      handleReadWriteToggle(e.target.checked)\n                                    }\n                                    className=\"sr-only peer\"\n                                    disabled={selectedRole === \"super_admin\"}\n                                  />\n                                  <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 dark:peer-focus:ring-green-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-green-600 peer-disabled:opacity-50 peer-disabled:cursor-not-allowed\"></div>\n                                </label>\n                              </TableCell>\n                            </TableRow>\n                          );\n                        })}\n                      </TableBody>\n                    </Table>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"audit\" className=\"space-y-6\">\n          <AuditLogs />\n        </TabsContent>\n\n        <TabsContent value=\"security\" className=\"space-y-6\">\n          <SecurityMonitor />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nfunction SecurityMonitor() {\n  const { data: securityMetrics } = useQuery({\n    queryKey: [\"/api/security/comprehensive-metrics\"],\n    queryFn: () => apiRequest(\"/api/security/comprehensive-metrics\", \"GET\"),\n  });\n\n  const { data: securityAlerts } = useQuery({\n    queryKey: [\"/api/security/alerts\"],\n    queryFn: () => apiRequest(\"/api/security/alerts\", \"GET\"),\n  });\n\n  const { data: recentFailedLogins } = useQuery({\n    queryKey: [\"/api/login-logs/analytics\"],\n    queryFn: () => apiRequest(\"/api/login-logs/analytics\", \"GET\"),\n  });\n\n  const { data: suspiciousActivities } = useQuery({\n    queryKey: [\"/api/audit-logs/suspicious\"],\n    queryFn: () => apiRequest(\"/api/audit-logs?status=failed&limit=20\", \"GET\"),\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Security Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-2xl font-bold text-red-600\">\n                  {recentFailedLogins?.failedLoginsLast24h || 0}\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  Failed Logins (24h)\n                </p>\n              </div>\n              <Shield className=\"h-8 w-8 text-red-500\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-2xl font-bold text-orange-600\">\n                  {securityAlerts?.totalActive || 0}\n                </div>\n                <p className=\"text-sm text-muted-foreground\">Active Threats</p>\n              </div>\n              <Activity className=\"h-8 w-8 text-orange-500\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {securityMetrics?.riskScore || 0}%\n                </div>\n                <p className=\"text-sm text-muted-foreground\">Risk Score</p>\n              </div>\n              <Users className=\"h-8 w-8 text-green-500\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Failed Logins */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"h-5 w-5 text-red-500\" />\n            Recent Failed Login Attempts\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {recentFailedLogins?.recentFailedLogins?.length > 0 ? (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Email</TableHead>\n                    <TableHead>IP Address</TableHead>\n                    <TableHead>Location</TableHead>\n                    <TableHead>Time</TableHead>\n                    <TableHead>Device</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {recentFailedLogins.recentFailedLogins.map((log: any) => (\n                    <TableRow key={log.id}>\n                      <TableCell className=\"font-medium\">{log.email}</TableCell>\n                      <TableCell className=\"font-mono text-sm\">\n                        {log.ipAddress}\n                      </TableCell>\n                      <TableCell>{log.location || \"Unknown\"}</TableCell>\n                      <TableCell>\n                        {new Date(log.loginTime).toLocaleString()}\n                      </TableCell>\n                      <TableCell>{log.deviceType || \"Unknown\"}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <Shield className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-green-700 mb-2\">\n                All Clear!\n              </h3>\n              <p className=\"text-muted-foreground\">\n                No failed login attempts in the last 24 hours\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Suspicious Activities */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Activity className=\"h-5 w-5 text-orange-500\" />\n            Recent Failed Operations\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {suspiciousActivities?.auditLogs?.length > 0 ? (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>User</TableHead>\n                    <TableHead>Action</TableHead>\n                    <TableHead>Resource</TableHead>\n                    <TableHead>IP Address</TableHead>\n                    <TableHead>Time</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {suspiciousActivities.auditLogs.map((log: any) => (\n                    <TableRow key={log.id}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{log.userName}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {log.userEmail}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"destructive\">{log.action}</Badge>\n                      </TableCell>\n                      <TableCell className=\"capitalize\">\n                        {log.resource.replace(\"_\", \" \")}\n                      </TableCell>\n                      <TableCell className=\"font-mono text-sm\">\n                        {log.ipAddress}\n                      </TableCell>\n                      <TableCell>\n                        {new Date(log.timestamp).toLocaleString()}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <Activity className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-green-700 mb-2\">\n                All Operations Successful!\n              </h3>\n              <p className=\"text-muted-foreground\">\n                No failed operations detected recently\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Security Alerts */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"h-5 w-5 text-red-500\" />\n            Active Security Alerts\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {securityAlerts?.activeAlerts?.length > 0 ||\n          securityAlerts?.dashboardAlerts?.length > 0 ? (\n            <div className=\"space-y-4\">\n              {/* Active Alerts */}\n              {securityAlerts?.activeAlerts?.map((alert: any) => (\n                <div\n                  key={alert.id}\n                  className=\"border border-red-200 rounded-lg p-4 bg-red-50\"\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Badge\n                          variant=\"destructive\"\n                          className={`${\n                            alert.severity === \"HIGH\"\n                              ? \"bg-red-600\"\n                              : alert.severity === \"MEDIUM\"\n                                ? \"bg-orange-600\"\n                                : \"bg-yellow-600\"\n                          }`}\n                        >\n                          {alert.severity}\n                        </Badge>\n                        <span className=\"font-semibold text-red-800\">\n                          {alert.title}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-red-700 mb-2\">\n                        {alert.description}\n                      </p>\n                      <div className=\"flex items-center gap-4 text-xs text-red-600\">\n                        <span>User: {alert.userEmail}</span>\n                        <span>IP: {alert.ipAddress}</span>\n                        <span>\n                          Time: {new Date(alert.timestamp).toLocaleString()}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n\n              {/* Dashboard Alerts */}\n              {securityAlerts?.dashboardAlerts?.map((alert: any) => (\n                <div\n                  key={alert.id}\n                  className=\"border border-orange-200 rounded-lg p-4 bg-orange-50\"\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Badge\n                          variant=\"secondary\"\n                          className={`${\n                            alert.severity === \"HIGH\"\n                              ? \"bg-red-600\"\n                              : alert.severity === \"MEDIUM\"\n                                ? \"bg-orange-600\"\n                                : \"bg-yellow-600\"\n                          }`}\n                        >\n                          {alert.severity}\n                        </Badge>\n                        <span className=\"font-semibold text-orange-800\">\n                          {alert.title}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-orange-700 mb-2\">\n                        {alert.description}\n                      </p>\n                      <div className=\"flex items-center gap-4 text-xs text-orange-600\">\n                        <span>User: {alert.userEmail}</span>\n                        <span>IP: {alert.ipAddress}</span>\n                        <span>\n                          Time: {new Date(alert.timestamp).toLocaleString()}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <CheckCircle className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-green-700 mb-2\">\n                System Secure\n              </h3>\n              <p className=\"text-muted-foreground\">\n                No active security threats detected\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":43808},"client/src/components/cost-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport {\n  Form,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\n\nconst costCalculatorSchema = z.object({\n  productName: z.string().min(1, \"Product name is required\"),\n  categoryId: z.string().optional(),\n  unitId: z.string().min(1, \"Unit is required\"),\n  batchSize: z.string().min(1, \"Batch size is required\").default(\"1\"),\n  finishedGoodRequired: z\n    .string()\n    .min(1, \"FG required is required\")\n    .default(\"1\"),\n  productionQuantity: z\n    .string()\n    .min(1, \"Production quantity is required\")\n    .default(\"1\"),\n  normalLossMfg: z.string().default(\"5\"),\n  normalLossOnSold: z.string().default(\"0\"),\n  mfgAndPackagingCost: z.string().default(\"45\"),\n  overheadCost: z.string().default(\"5\"),\n  ingredients: z\n    .array(\n      z.object({\n        inventoryItemId: z.string().min(1, \"Ingredient is required\"),\n        quantity: z.string().min(1, \"Quantity is required\"),\n        unitId: z.string().min(1, \"Unit is required\"),\n      }),\n    )\n    .min(1, \"At least one ingredient is required\"),\n});\n\ninterface CostCalculatorProps {\n  onSave?: (productData: any) => void;\n}\n\nexport default function CostCalculator({ onSave }: CostCalculatorProps) {\n  const [calculations, setCalculations] = useState({\n    ingredientDetails: [] as any[],\n    subTotalForBatch: 0,\n    totalForProduction: 0,\n    totalForProductionGm: 0,\n    effectiveUnits: 0,\n    rmCostPerUnit: 0,\n    noOfFgToBeProduced: 0,\n    normalLossDuringMFG: 0,\n    normalLossOnSoldValue: 0,\n    effectiveUnitsProduced: 0,\n    estimatedCostPerUnit: 0,\n    mfgCostPerUnit: 0,\n    overheadCostPerUnit: 0,\n    finalCostPerUnit: 0,\n  });\n\n  const { formatCurrency } = useCurrency();\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n    retry: (failureCount, error) => {\n      if (isUnauthorizedError(error)) return false;\n      return failureCount < 3;\n    },\n  });\n\n  const { data: inventoryItems = [] } = useQuery({\n    queryKey: [\"/api/inventory\"],\n    retry: (failureCount, error) => {\n      if (isUnauthorizedError(error)) return false;\n      return failureCount < 3;\n    },\n  });\n\n  const { data: units = [] } = useQuery({\n    queryKey: [\"/api/units\"],\n    retry: (failureCount, error) => {\n      if (isUnauthorizedError(error)) return false;\n      return failureCount < 3;\n    },\n  });\n\n  const form = useForm({\n    resolver: zodResolver(costCalculatorSchema),\n    defaultValues: {\n      productName: \"\",\n      categoryId: \"\",\n      batchSize: \"1\",\n      finishedGoodRequired: \"1\",\n      productionQuantity: \"1\",\n      normalLossMfg: \"5\",\n      normalLossOnSold: \"0\",\n      mfgAndPackagingCost: \"45\",\n      overheadCost: \"5\",\n      ingredients: [{ inventoryItemId: \"\", quantity: \"\", unitId: \"\" }],\n    },\n  });\n\n  // Filter items that are suitable as ingredients\n  const ingredients = (inventoryItems as any[]).filter(\n    (item: any) =>\n      item.name &&\n      (item.group === \"raw-materials\" ||\n        item.group === \"ingredients\" ||\n        item.group === \"flour\" ||\n        item.group === \"dairy\" ||\n        item.group === \"sweeteners\" ||\n        item.group === \"spices\" ||\n        item.group === \"leavening\" ||\n        item.group === \"extracts\" ||\n        item.group === \"chocolate\" ||\n        item.group === \"nuts\" ||\n        item.group === \"fruits\" ||\n        !item.group ||\n        item.name.toLowerCase().includes(\"flour\") ||\n        item.name.toLowerCase().includes(\"sugar\") ||\n        item.name.toLowerCase().includes(\"butter\") ||\n        item.name.toLowerCase().includes(\"milk\") ||\n        item.name.toLowerCase().includes(\"egg\") ||\n        item.name.toLowerCase().includes(\"chocolate\") ||\n        item.name.toLowerCase().includes(\"vanilla\") ||\n        item.name.toLowerCase().includes(\"salt\") ||\n        item.name.toLowerCase().includes(\"baking\")),\n  );\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"ingredients\",\n  });\n\n  const calculateCosts = () => {\n    const formIngredients = form.getValues(\"ingredients\");\n    const batchSize = parseFloat(form.getValues(\"batchSize\") || \"1\");\n    const finishedGoodRequired = parseFloat(\n      form.getValues(\"finishedGoodRequired\") || \"1\",\n    );\n    const productionQuantity = parseFloat(\n      form.getValues(\"productionQuantity\") || \"1\",\n    );\n    const normalLossMfg = parseFloat(form.getValues(\"normalLossMfg\") || \"5\");\n    const normalLossOnSold = parseFloat(\n      form.getValues(\"normalLossOnSold\") || \"0\",\n    );\n    const mfgAndPackagingCost = parseFloat(\n      form.getValues(\"mfgAndPackagingCost\") || \"45\",\n    );\n    const overheadCost = parseFloat(form.getValues(\"overheadCost\") || \"5\");\n\n    // Calculate ingredient details\n    const ingredientDetails = formIngredients\n      .map((ingredient, index) => {\n        const item = ingredients.find(\n          (inv: any) => inv.id.toString() === ingredient.inventoryItemId,\n        );\n        if (item && ingredient.quantity && ingredient.unitId) {\n          const quantity = parseFloat(ingredient.quantity);\n          const pricePerUnit = parseFloat(item.costPerUnit);\n          const amount = quantity * pricePerUnit;\n\n          // Use the selected unit from the ingredient form\n          const selectedUnit = units.find((u: any) => u.id.toString() === ingredient.unitId);\n          const unitAbbr = selectedUnit?.abbreviation || item.unit;\n\n          return {\n            sn: index + 1,\n            particular: item.name,\n            qty: quantity,\n            unit: unitAbbr,\n            price: pricePerUnit,\n            unitType: `Per ${unitAbbr}`,\n            amount: amount,\n          };\n        }\n        return null;\n      })\n      .filter(Boolean);\n\n    // Sub-total for batch\n    const subTotalForBatch = ingredientDetails.reduce(\n      (sum, item) => sum + item.amount,\n      0,\n    );\n\n    // Scale factor for production\n    const scaleFactor = productionQuantity / batchSize;\n    const totalForProduction = subTotalForBatch * scaleFactor;\n\n    // Total weight in grams\n    const totalForProductionGm = ingredientDetails.reduce((sum, item) => {\n      let qtyInGrams = item.qty;\n\n      // Convert to grams based on unit\n      switch(item.unit.toLowerCase()) {\n        case 'kg':\n          qtyInGrams = item.qty * 1000;\n          break;\n        case 'g':\n        case 'gm':\n        case 'grams':\n          qtyInGrams = item.qty;\n          break;\n        case 'ml':\n        case 'milliliters':\n          qtyInGrams = item.qty; // Assuming 1ml = 1g for liquids\n          break;\n        case 'l':\n        case 'ltr':\n        case 'liters':\n          qtyInGrams = item.qty * 1000;\n          break;\n        default:\n          qtyInGrams = item.qty; // Default to the quantity as-is\n      }\n\n      return sum + qtyInGrams * scaleFactor;\n    }, 0);\n\n    // No. of FG to be produced\n    const noOfFgToBeProduced =\n      finishedGoodRequired > 0\n        ? totalForProductionGm / finishedGoodRequired\n        : 0;\n\n    // Loss values in units\n    const normalLossDuringMFG = noOfFgToBeProduced * (normalLossMfg / 100);\n    const normalLossOnSoldValue = noOfFgToBeProduced * (normalLossOnSold / 100);\n\n    // Effective units produced after losses\n    const effectiveUnitsProduced =\n      noOfFgToBeProduced - normalLossDuringMFG - normalLossOnSoldValue;\n\n    // Cost per unit calculations\n    const estimatedCostPerUnit =\n      effectiveUnitsProduced > 0\n        ? subTotalForBatch / effectiveUnitsProduced\n        : 0;\n    const mfgCostPerUnit = estimatedCostPerUnit * (mfgAndPackagingCost / 100);\n    const overheadCostPerUnit = estimatedCostPerUnit * (overheadCost / 100);\n    const finalCostPerUnit =\n      estimatedCostPerUnit + mfgCostPerUnit + overheadCostPerUnit;\n\n    setCalculations({\n      ingredientDetails,\n      subTotalForBatch,\n      totalForProduction,\n      totalForProductionGm,\n      effectiveUnits: totalForProductionGm,\n      rmCostPerUnit: finishedGoodRequired * 350, // assumed\n      noOfFgToBeProduced,\n      normalLossDuringMFG,\n      normalLossOnSoldValue,\n      effectiveUnitsProduced,\n      estimatedCostPerUnit,\n      mfgCostPerUnit,\n      overheadCostPerUnit,\n      finalCostPerUnit,\n    });\n  };\n\n  useEffect(() => {\n    calculateCosts();\n  }, [form.watch()]);\n\n  const handleSaveProduct = () => {\n    const formData = form.getValues();\n    const productData = {\n      name: formData.productName,\n      categoryId: formData.categoryId ? parseInt(formData.categoryId) : null,\n      price: calculations.finalCostPerUnit,\n      cost: calculations.estimatedCostPerUnit,\n      batchSize: parseFloat(formData.batchSize),\n      ingredients: formData.ingredients.map((ing) => ({\n        inventoryItemId: parseInt(ing.inventoryItemId),\n        quantity: parseFloat(ing.quantity),\n        unitId: parseInt(ing.unitId),\n      })),\n    };\n\n    onSave?.(productData);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Form {...form}>\n        <form className=\"space-y-6\">\n          {/* Product Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Product Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"productName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Product Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Bread\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"categoryId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Category</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select category\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {categories.map((category: any) => (\n                            <SelectItem\n                              key={category.id}\n                              value={category.id.toString()}\n                            >\n                              {category.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Ingredients */}\n          {/* Ingredients */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Recipe Ingredients</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full border-collapse border border-gray-300 text-sm\">\n                  <thead>\n                    <tr className=\"bg-gray-100\">\n                      <th className=\"border border-gray-300 px-2 py-1\">S.N</th>\n                      <th className=\"border border-gray-300 px-2 py-1\">\n                        Ingredients Name\n                      </th>\n                      <th className=\"border border-gray-300 px-2 py-1\">\n                        Quantity\n                      </th>\n                      <th className=\"border border-gray-300 px-2 py-1\">Unit</th>\n                      <th className=\"border border-gray-300 px-2 py-1\">\n                        Action\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {fields.map((field, index) => (\n                      <tr key={field.id}>\n                        <td className=\"border border-gray-300 px-2 py-1 text-center\">\n                          {index + 1}\n                        </td>\n                        {/* Ingredient Select */}\n                        <td className=\"border border-gray-300 px-2 py-1\">\n                          <FormField\n                            control={form.control}\n                            name={`ingredients.${index}.inventoryItemId`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <Select\n                                  onValueChange={field.onChange}\n                                  value={field.value}\n                                >\n                                  <FormControl>\n                                    <SelectTrigger className=\"w-full\">\n                                      <SelectValue placeholder=\"Select ingredient\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    {ingredients.map((item: any) => (\n                                      <SelectItem\n                                        key={item.id}\n                                        value={item.id.toString()}\n                                      >\n                                        {item.name}\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage className=\"text-xs text-red-500\" />\n                              </FormItem>\n                            )}\n                          />\n                        </td>\n                        {/* Quantity Input */}\n                        <td className=\"border border-gray-300 px-2 py-1\">\n                          <FormField\n                            control={form.control}\n                            name={`ingredients.${index}.quantity`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormControl>\n                                  <Input\n                                    type=\"number\"\n                                    step=\"0.10\"\n                                    {...field}\n                                    className=\"h-9 w-full\"\n                                  />\n                                </FormControl>\n                                <FormMessage className=\"text-xs text-red-500\" />\n                              </FormItem>\n                            )}\n                          />\n                        </td>\n                        {/* Unit Select */}\n                        <td className=\"border border-gray-300 px-2 py-1\">\n                          <FormField\n                            control={form.control}\n                            name={`ingredients.${index}.unitId`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <Select\n                                  onValueChange={field.onChange}\n                                  value={field.value}\n                                >\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select a unit\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    {Array.isArray(units) && units\n                      .filter((unit: any) => unit.isActive)\n                      .map((unit: any) => (\n                        <SelectItem\n                          key={unit.id}\n                          value={unit.id.toString()}\n                        >\n                          {unit.name} ({unit.abbreviation})\n                        </SelectItem>\n                      ))}\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </td>\n                        {/* Remove Button */}\n                        <td className=\"border border-gray-300 px-2 py-1 text-center\">\n                          <Button\n                            type=\"button\"\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => remove(index)}\n                            disabled={fields.length === 1}\n                            className=\"h-9\"\n                          >\n                            Remove\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n\n                {/* Add Ingredient Button */}\n                <div className=\"pt-4 px-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() =>\n                      append({\n                        inventoryItemId: \"\",\n                        quantity: \"\",\n                        unitId: \"\",\n                      })\n                    }\n                  >\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Add Ingredient\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Production Parameters */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Production Parameters</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"batchSize\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Batch Size (kg)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" step=\"1\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"finishedGoodRequired\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>1 unit FG required (Gm RM)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" step=\"1\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* <FormField\n                  control={form.control}\n                  name=\"productionQuantity\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>No. of FG to be Produced</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" step=\"0.01\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                /> */}\n\n                <FormField\n                  control={form.control}\n                  name=\"normalLossMfg\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Normal Loss during mfg. (%)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" step=\"0.1\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"normalLossOnSold\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Normal Loss on sold FG (%)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" step=\"0.1\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"mfgAndPackagingCost\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Mfg. and packaging cost (%)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" step=\"0.1\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"overheadCost\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Overhead cost (%)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" step=\"0.1\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </form>\n      </Form>\n\n      {/* Detailed Cost Breakdown */}\n      <Card className=\"bg-gray-50\">\n        <CardHeader>\n          <CardTitle className=\"text-lg\">\n            Product: {form.getValues(\"productName\")}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {/* Computation of Total Cost */}\n          <div className=\"mb-6\">\n            <h3 className=\"font-semibold mb-3\">Computation of Total Cost</h3>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full border-collapse border border-gray-300 text-sm\">\n                <thead>\n                  <tr className=\"bg-gray-100\">\n                    <th className=\"border border-gray-300 px-2 py-1\">S.N</th>\n                    <th className=\"border border-gray-300 px-2 py-1\">\n                      Particulars\n                    </th>\n                    <th className=\"border border-gray-300 px-2 py-1\">Qty.</th>\n                    <th className=\"border border-gray-300 px-2 py-1\">Unit</th>\n                    <th className=\"border border-gray-300 px-2 py-1\">Price</th>\n                    <th className=\"border border-gray-300 px-2 py-1\">Unit</th>\n                    <th className=\"border border-gray-300 px-2 py-1\">Amount</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {calculations.ingredientDetails.map((item, index) => (\n                    <tr key={index}>\n                      <td className=\"border border-gray-300 px-2 py-1 text-center\">\n                        {item.sn}\n                      </td>\n                      <td className=\"border border-gray-300 px-2 py-1\">\n                        {item.particular}\n                      </td>\n                      <td className=\"border border-gray-300 px-2 py-1 text-right\">\n                        {item.qty}\n                      </td>\n                      <td className=\"border border-gray-300 px-2 py-1 text-center\">\n                        {item.unit}\n                      </td>\n                      <td className=\"border border-gray-300 px-2 py-1 text-right\">\n                        {formatCurrency(item.price)}\n                      </td>\n                      <td className=\"border border-gray-300 px-2 py-1 text-center\">\n                        {item.unitType}\n                      </td>\n                      <td className=\"border border-gray-300 px-2 py-1 text-right\">\n                        {formatCurrency(item.amount)}\n                      </td>\n                    </tr>\n                  ))}\n                  <tr className=\"bg-yellow-100 font-semibold\">\n                    <td className=\"border border-gray-300 px-2 py-1 text-center\">\n                      A.\n                    </td>\n                    <td className=\"border border-gray-300 px-2 py-1\">\n                      Total for {form.getValues(\"batchSize\")} kg\n                    </td>\n                    <td className=\"border border-gray-300 px-2 py-1 text-right\">\n                      {calculations.totalForProductionGm.toFixed(1)}\n                    </td>\n                    <td className=\"border border-gray-300 px-2 py-1 text-center\">\n                      gm\n                    </td>\n                    <td className=\"border border-gray-300 px-2 py-1\"></td>\n                    <td className=\"border border-gray-300 px-2 py-1\"></td>\n                    <td className=\"border border-gray-300 px-2 py-1 text-right\">\n                      {formatCurrency(calculations.subTotalForBatch ?? 0)}\n                    </td>\n                  </tr>\n\n                  {/* <tr className=\"bg-yellow-100 font-semibold\">\n                    <td className=\"border border-gray-300 px-2 py-1\"></td>\n                    <td className=\"border border-gray-300 px-2 py-1\">\n                      Total for {form.getValues(\"productionQuantity\")} kg\n                    </td>\n                    <td className=\"border border-gray-300 px-2 py-1 text-right\">\n                      {(\n                        (calculations.totalForProductionGm *\n                          parseFloat(form.getValues(\"productionQuantity\"))) /\n                        parseFloat(form.getValues(\"batchSize\"))\n                      ).toFixed(1)}\n                    </td>\n                    <td className=\"border border-gray-300 px-2 py-1 text-center\">\n                      gm\n                    </td>\n                    <td className=\"border border-gray-300 px-2 py-1\"></td>\n                    <td className=\"border border-gray-300 px-2 py-1\"></td>\n                    <td className=\"border border-gray-300 px-2 py-1 text-right\">\n                      {formatCurrency(calculations.totalForProduction)}\n                    </td>\n                  </tr> */}\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          {/* Computation of Effective Unit */}\n          <div className=\"mb-6\">\n            <h3 className=\"font-semibold mb-3\">\n              Computation of Effective Unit\n            </h3>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full border-collapse border border-gray-300 text-sm\">\n                <tbody>\n                  <tr>\n                    <td className=\"border border-gray-300 px-2 py-1\">1</td>\n                    <td className=\"border border-gray-300 px-2 py-1\">\n                      Total for {form.getValues(\"batchSize\")} kg\n                    </td>\n                    <td\n                      className=\"border border-gray-300 px-2 py-1 text-right\"\n                      colSpan={4}\n                    >\n                      {calculations.totalForProductionGm.toFixed(1)} gm\n                    </td>\n                  </tr>\n                  <tr>\n                    <td className=\"border border-gray-300 px-2 py-1\">2</td>\n                    <td className=\"border border-gray-300 px-2 py-1\">\n                      1 unit FG required ..... Gm RM\n                    </td>\n                    <td\n                      className=\"border border-gray-300 px-2 py-1 text-right\"\n                      colSpan={4}\n                    >\n                      {form.getValues(\"finishedGoodRequired\")} gm\n                    </td>\n                  </tr>\n                  <tr>\n                    <td className=\"border border-gray-300 px-2 py-1\">3</td>\n                    <td className=\"border border-gray-300 px-2 py-1\">\n                      No. of FG to be Produced\n                    </td>\n                    <td\n                      className=\"border border-gray-300 px-2 py-1 text-right\"\n                      colSpan={4}\n                    >\n                      {calculations.noOfFgToBeProduced.toFixed(2)} pcs\n                    </td>\n                  </tr>\n                  <tr>\n                    <td className=\"border border-gray-300 px-2 py-1\">4</td>\n                    <td className=\"border border-gray-300 px-2 py-1\">\n                      Less: Normal Loss during mfg.\n                    </td>\n                    <td className=\"border border-gray-300 px-2 py-1 text-right\">\n                      {form.getValues(\"normalLossMfg\")}%\n                    </td>\n                    <td\n                      className=\"border border-gray-300 px-2 py-1 text-right\"\n                      colSpan={3}\n                    >\n                      {calculations.normalLossDuringMFG.toFixed(2)} pcs\n                    </td>\n                  </tr>\n                  <tr>\n                    <td className=\"border border-gray-300 px-2 py-1\">5</td>\n                    <td className=\"border border-gray-300 px-2 py-1\">\n                      Less: Normal Loss on sold FG\n                    </td>\n                    <td className=\"border border-gray-300 px-2 py-1 text-right\">\n                      {form.getValues(\"normalLossOnSold\")}%\n                    </td>\n                    <td\n                      className=\"border border-gray-300 px-2 py-1 text-right\"\n                      colSpan={3}\n                    >\n                      {calculations.normalLossOnSoldValue.toFixed(2)} pcs\n                    </td>\n                  </tr>\n                  <tr className=\"bg-yellow-100 font-semibold\">\n                    <td className=\"border border-gray-300 px-2 py-1\">B.</td>\n                    <td className=\"border border-gray-300 px-2 py-1\">\n                      Effective No. of FG produced\n                    </td>\n                    <td\n                      className=\"border border-gray-300 px-2 py-1 text-right\"\n                      colSpan={4}\n                    >\n                      {calculations.effectiveUnitsProduced.toFixed(2)} pcs\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          {/* Cost per unit And selling price per unit */}\n          <div>\n            <h3 className=\"font-semibold mb-3\">\n              Cost per unit And selling price per unit\n            </h3>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full border-collapse border border-gray-300 text-sm\">\n                <tbody>\n                  <tr>\n                    <td className=\"border border-gray-300 px-2 py-1\">I</td>\n                    <td className=\"border border-gray-300 px-2 py-1\">\n                      Estimated Cost per unit\n                    </td>\n                    <td className=\"border border-gray-300 px-2 py-1 text-center\">\n                      A / B\n                    </td>\n                    <td className=\"border border-gray-300 px-2 py-1 text-right\">\n                      {formatCurrency(calculations.estimatedCostPerUnit)}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td className=\"border border-gray-300 px-2 py-1\">II</td>\n                    <td className=\"border border-gray-300 px-2 py-1\">\n                      Mfg. and packaging cost per unit\n                    </td>\n                    <td className=\"border border-gray-300 px-2 py-1 text-right\">\n                      {form.getValues(\"mfgAndPackagingCost\")}%\n                    </td>\n                    <td className=\"border border-gray-300 px-2 py-1 text-right\">\n                      {formatCurrency(calculations.mfgCostPerUnit)}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td className=\"border border-gray-300 px-2 py-1\">III</td>\n                    <td className=\"border border-gray-300 px-2 py-1\">\n                      Overhead cost per unit\n                    </td>\n                    <td className=\"border border-gray-300 px-2 py-1 text-right\">\n                      {form.getValues(\"overheadCost\")}%\n                    </td>\n                    <td className=\"border border-gray-300 px-2 py-1 text-right\">\n                      {formatCurrency(calculations.overheadCostPerUnit)}\n                    </td>\n                  </tr>\n                  <tr className=\"bg-green-100 font-bold\">\n                    <td className=\"border border-gray-300 px-2 py-1\"></td>\n                    <td className=\"border border-gray-300 px-2 py-1\">\n                      Cost per unit\n                    </td>\n                    <td className=\"border border-gray-300 px-2 py-1 text-center\">\n                      I + II + III\n                    </td>\n                    <td className=\"border border-gray-300 px-2 py-1 text-right\">\n                      {formatCurrency(calculations.finalCostPerUnit)}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Actions */}\n      <div className=\"flex justify-end space-x-2\">\n        <Button variant=\"outline\" onClick={calculateCosts}>\n          <i className=\"fas fa-calculator mr-2\"></i>\n          Recalculate\n        </Button>\n        <Button\n          onClick={handleSaveProduct}\n          disabled={!form.getValues(\"productName\")}\n        >\n          <i className=\"fas fa-save mr-2\"></i>\n          Save as Product\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":34738},"client/src/components/enhanced-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  TrendingUp,\n  ShoppingCart,\n  Package,\n  Users,\n  AlertTriangle,\n  Calendar,\n  Plus,\n  Edit,\n  Trash2,\n  MoreHorizontal,\n  ArrowRight,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport AdminUserManagement from \"@/components/admin-user-management\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\n\ninterface ProductionItem {\n  id: number;\n  productName: string;\n  quantity: number;\n  scheduledDate: string;\n  status: string;\n}\n\nexport default function EnhancedDashboard() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [isProductionDialogOpen, setIsProductionDialogOpen] = useState(false);\n  const [editingProduction, setEditingProduction] =\n    useState<ProductionItem | null>(null);\n  const [productionSchedule, setProductionSchedule] = useState<\n    ProductionItem[]\n  >([]);\n\n  const { data: stats = {} } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: recentOrders = [] } = useQuery({\n    queryKey: [\"/api/dashboard/recent-orders\"],\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  // Check for new public orders (orders without createdBy user)\n  const publicOrders = recentOrders.filter((order: any) => !order.createdBy);\n  const hasNewPublicOrders = publicOrders.length > 0;\n\n  const { data: lowStockItems = [] } = useQuery({\n    queryKey: [\"/api/dashboard/low-stock\"],\n  });\n\n  const { data: upcomingProduction = [] } = useQuery({\n    queryKey: [\"/api/dashboard/production-schedule\"],\n  });\n\n  const { data: activeProducts = [] } = useQuery({\n    queryKey: [\"/api/products\"],\n    select: (data: any) => data.filter((p: any) => p.isActive),\n  });\n\n  const { formatCurrencyWithCommas } = useCurrency();\n\n  const statsCards = [\n    {\n      title: \"Total Revenue\",\n      value: formatCurrencyWithCommas(stats.totalRevenue || 0),\n      icon: TrendingUp,\n      trend: \"+12.5%\",\n      description: \"vs last month\",\n    },\n    {\n      title: \"Orders Today\",\n      value: stats.ordersToday || 0,\n      icon: ShoppingCart,\n      trend: \"+5.2%\",\n      description: \"vs yesterday\",\n    },\n    {\n      title: \"Active Products\",\n      value: stats.activeProducts || 0,\n      icon: Package,\n      trend: \"+2.1%\",\n      description: \"vs last week\",\n    },\n    {\n      title: \"Customers\",\n      value: stats.totalCustomers || 0,\n      icon: Users,\n      trend: \"+8.3%\",\n      description: \"vs last month\",\n    },\n  ];\n\n  // Handle authentication errors properly without causing render issues\n\n  return (\n    <div className=\"p-4 sm:p-6 space-y-6\">\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <p className=\"text-muted-foreground\">\n            Welcome back! Here's what's happening today.\n          </p>\n        </div>\n        <Button\n          onClick={() => setIsProductionDialogOpen(true)}\n          className=\"w-full sm:w-auto\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Schedule Production\n        </Button>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {statsCards.map((stat, index) => (\n          <Card key={index}>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">{stat.title}</p>\n                  <p className=\"text-2xl font-bold\">{stat.value}</p>\n                  <p className=\"text-xs text-green-600\">\n                    {stat.trend} {stat.description}\n                  </p>\n                </div>\n                <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                  <stat.icon className=\"h-4 w-4 text-primary\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Recent Orders */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <ShoppingCart className=\"h-5 w-5\" />\n              Recent Orders\n              {hasNewPublicOrders && (\n                <Badge variant=\"destructive\" className=\"ml-2\">\n                  {publicOrders.length} New Public Order\n                  {publicOrders.length > 1 ? \"s\" : \"\"}\n                </Badge>\n              )}\n            </CardTitle>\n            <CardDescription>Latest customer orders</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {recentOrders.length > 0 ? (\n                recentOrders.slice(0, 5).map((order: any) => (\n                  <div\n                    key={order.id}\n                    className=\"flex items-center justify-between p-3 border rounded-lg\"\n                  >\n                    <div>\n                      <p className=\"font-medium\">{order.customerName}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Order #{order.orderNumber}\n                      </p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-semibold\">\n                        Rs. {parseFloat(order.totalAmount || 0).toFixed(2)}\n                      </p>\n                      <Badge\n                        variant={\n                          order.status === \"completed\"\n                            ? \"default\"\n                            : order.status === \"in_progress\"\n                              ? \"secondary\"\n                              : \"outline\"\n                        }\n                      >\n                        {order.status}\n                      </Badge>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <p className=\"text-center text-muted-foreground py-4\">\n                  No recent orders\n                </p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Low Stock Alert */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <AlertTriangle className=\"h-5 w-5 mr-2 text-orange-500\" />\n              Low Stock Alert\n            </CardTitle>\n            <CardDescription>Stock items running low</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {lowStockItems.length > 0 ? (\n                lowStockItems.slice(0, 5).map((item: any) => (\n                  <div\n                    key={item.id}\n                    className=\"flex items-center justify-between p-3 bg-orange-50 border border-orange-200 rounded-lg\"\n                  >\n                    <div>\n                      <p className=\"font-medium text-orange-800\">{item.name}</p>\n                      <p className=\"text-sm text-orange-600\">\n                        {item.currentStock} {item.unit} remaining\n                      </p>\n                    </div>\n                    <Badge variant=\"destructive\">Low</Badge>\n                  </div>\n                ))\n              ) : (\n                <p className=\"text-center text-muted-foreground py-4\">\n                  All stock items well stocked\n                </p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Production Schedule */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Calendar className=\"h-5 w-5 mr-2\" />\n            Production Schedule\n          </CardTitle>\n          <CardDescription>Upcoming production items</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Product</TableHead>\n                  <TableHead>Quantity</TableHead>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {upcomingProduction.length > 0 ? (\n                  upcomingProduction.slice(0, 5).map((item: ProductionItem) => (\n                    <TableRow key={item.id}>\n                      <TableCell className=\"font-medium\">\n                        {item.productName}\n                      </TableCell>\n                      <TableCell>{item.quantity}</TableCell>\n                      <TableCell>\n                        {new Date(item.scheduledDate).toLocaleDateString()}\n                      </TableCell>\n                      <TableCell>\n                        <Badge\n                          variant={\n                            item.status === \"completed\"\n                              ? \"default\"\n                              : item.status === \"in_progress\"\n                                ? \"secondary\"\n                                : item.status === \"pending\"\n                                  ? \"outline\"\n                                  : \"secondary\" // Default to secondary for any other status\n                          }\n                        >\n                          {item.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <Dialog\n                          open={\n                            isProductionDialogOpen &&\n                            editingProduction?.id === item.id\n                          }\n                          onOpenChange={setIsProductionDialogOpen}\n                        >\n                          <DialogTrigger asChild>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              onClick={() => {\n                                setEditingProduction(item);\n                                setIsProductionDialogOpen(true);\n                              }}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"sm:max-w-[425px]\">\n                            <DialogHeader>\n                              <DialogTitle>\n                                Edit Production Schedule\n                              </DialogTitle>\n                              <DialogDescription>\n                                Make changes to this production item. Click save\n                                when you're done.\n                              </DialogDescription>\n                            </DialogHeader>\n                            <form\n                              onSubmit={(e) => {\n                                e.preventDefault();\n                                // Handle update logic here\n                                toast({\n                                  title: \"Production updated\",\n                                  description: `Production for ${editingProduction?.productName} has been updated.`,\n                                  variant: \"success\",\n                                });\n                                setIsProductionDialogOpen(false);\n                                setEditingProduction(null);\n                              }}\n                            >\n                              <div className=\"grid gap-4 py-4\">\n                                <div className=\"grid grid-cols-4 items-center gap-4\">\n                                  <label\n                                    htmlFor=\"productName\"\n                                    className=\"text-right\"\n                                  >\n                                    Product Name\n                                  </label>\n                                  <Input\n                                    id=\"productName\"\n                                    value={editingProduction?.productName || \"\"}\n                                    onChange={(e) =>\n                                      setEditingProduction((prev) =>\n                                        prev\n                                          ? {\n                                              ...prev,\n                                              productName: e.target.value,\n                                            }\n                                          : null,\n                                      )\n                                    }\n                                    className=\"col-span-3\"\n                                  />\n                                </div>\n                                <div className=\"grid grid-cols-4 items-center gap-4\">\n                                  <label\n                                    htmlFor=\"quantity\"\n                                    className=\"text-right\"\n                                  >\n                                    Quantity\n                                  </label>\n                                  <Input\n                                    id=\"quantity\"\n                                    type=\"number\"\n                                    value={editingProduction?.quantity || 0}\n                                    onChange={(e) =>\n                                      setEditingProduction((prev) =>\n                                        prev\n                                          ? {\n                                              ...prev,\n                                              quantity: parseInt(\n                                                e.target.value,\n                                              ),\n                                            }\n                                          : null,\n                                      )\n                                    }\n                                    className=\"col-span-3\"\n                                  />\n                                </div>\n                                <div className=\"grid grid-cols-4 items-center gap-4\">\n                                  <label\n                                    htmlFor=\"scheduledDate\"\n                                    className=\"text-right\"\n                                  >\n                                    Scheduled Date\n                                  </label>\n                                  <Input\n                                    id=\"scheduledDate\"\n                                    type=\"date\"\n                                    value={\n                                      editingProduction?.scheduledDate\n                                        ? new Date(\n                                            editingProduction.scheduledDate,\n                                          )\n                                            .toISOString()\n                                            .substr(0, 10)\n                                        : \"\"\n                                    }\n                                    onChange={(e) =>\n                                      setEditingProduction((prev) =>\n                                        prev\n                                          ? {\n                                              ...prev,\n                                              scheduledDate: e.target.value,\n                                            }\n                                          : null,\n                                      )\n                                    }\n                                    className=\"col-span-3\"\n                                  />\n                                </div>\n                                <div className=\"grid grid-cols-4 items-center gap-4\">\n                                  <label\n                                    htmlFor=\"status\"\n                                    className=\"text-right\"\n                                  >\n                                    Status\n                                  </label>\n                                  <Select\n                                    onValueChange={(value) =>\n                                      setEditingProduction((prev) =>\n                                        prev\n                                          ? { ...prev, status: value }\n                                          : null,\n                                      )\n                                    }\n                                    value={editingProduction?.status}\n                                  >\n                                    <SelectTrigger className=\"col-span-3\">\n                                      <SelectValue placeholder=\"Select status\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      <SelectItem value=\"pending\">\n                                        Pending\n                                      </SelectItem>\n                                      <SelectItem value=\"in_progress\">\n                                        In Progress\n                                      </SelectItem>\n                                      <SelectItem value=\"completed\">\n                                        Completed\n                                      </SelectItem>\n                                      <SelectItem value=\"cancelled\">\n                                        Cancelled\n                                      </SelectItem>\n                                    </SelectContent>\n                                  </Select>\n                                </div>\n                              </div>\n                              <DialogFooter>\n                                <Button type=\"submit\">Save Changes</Button>\n                              </DialogFooter>\n                            </form>\n                          </DialogContent>\n                        </Dialog>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => {\n                            // Handle delete logic here\n                            toast({\n                              title: \"Production deleted\",\n                              description: `Production for ${item.productName} has been deleted.`,\n                              variant: \"destructive\",\n                            });\n                          }}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell\n                      colSpan={5}\n                      className=\"text-center py-4 text-muted-foreground\"\n                    >\n                      No upcoming production scheduled\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Production Scheduling Dialog (for adding new items) */}\n      <Dialog\n        open={isProductionDialogOpen && !editingProduction}\n        onOpenChange={setIsProductionDialogOpen}\n      >\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>Schedule New Production</DialogTitle>\n            <DialogDescription>\n              Add a new item to the production schedule. Click save when you're\n              done.\n            </DialogDescription>\n          </DialogHeader>\n          <form\n            onSubmit={(e) => {\n              e.preventDefault();\n              // Handle add logic here\n              const newItem: ProductionItem = {\n                id: Date.now(), // Simple unique ID for example\n                productName: (e.target as any).productName.value,\n                quantity: parseInt((e.target as any).quantity.value),\n                scheduledDate: (e.target as any).scheduledDate.value,\n                status: (e.target as any).status.value,\n              };\n              setProductionSchedule((prev) => [...prev, newItem]);\n              toast({\n                title: \"Production scheduled\",\n                description: `New production for ${newItem.productName} has been scheduled.`,\n                variant: \"success\",\n              });\n              setIsProductionDialogOpen(false);\n            }}\n          >\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <label htmlFor=\"productName\" className=\"text-right\">\n                  Product\n                </label>\n                <Select name=\"productName\" required>\n                  <SelectTrigger className=\"col-span-3\">\n                    <SelectValue placeholder=\"Select Product\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {activeProducts.length > 0 ? (\n                      activeProducts.map((product: any) => (\n                        <SelectItem key={product.id} value={product.name}>\n                          {product.name}\n                        </SelectItem>\n                      ))\n                    ) : (\n                      <SelectItem value=\"none\" disabled>\n                        No products available\n                      </SelectItem>\n                    )}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <label htmlFor=\"quantity\" className=\"text-right\">\n                  Quantity\n                </label>\n                <Input\n                  id=\"quantity\"\n                  type=\"number\"\n                  className=\"col-span-3\"\n                  required\n                />\n              </div>\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <label htmlFor=\"scheduledDate\" className=\"text-right\">\n                  Scheduled Date\n                </label>\n                <Input\n                  id=\"scheduledDate\"\n                  type=\"date\"\n                  className=\"col-span-3\"\n                  required\n                />\n              </div>\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <label htmlFor=\"status\" className=\"text-right\">\n                  Status\n                </label>\n                <Select name=\"status\" defaultValue=\"pending\">\n                  <SelectTrigger className=\"col-span-3\">\n                    <SelectValue placeholder=\"Select status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                    <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <DialogFooter>\n              <Button type=\"submit\">Schedule Production</Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":24489},"client/src/components/enhanced-production-schedule.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Calendar,\n  Clock,\n  Package,\n  Scale,\n  Target,\n  Plus,\n  Edit,\n  Trash2,\n  Minus,\n} from \"lucide-react\";\nimport { format, addDays, startOfDay } from \"date-fns\";\n\nconst productionScheduleSchema = z.object({\n  scheduledDate: z.string().min(1, \"Please select a date\"),\n  priority: z.enum([\"low\", \"medium\", \"high\"], {\n    required_error: \"Please select priority\",\n  }),\n  notes: z.string().optional(),\n  products: z\n    .array(\n      z.object({\n        productId: z.number().min(1, \"Please select a product\"),\n        targetQuantity: z.number().min(1, \"Target amount must be at least 1\"),\n        unit: z.enum([\"kg\", \"packets\"], {\n          required_error: \"Please select a unit\",\n        }),\n      }),\n    )\n    .min(1, \"At least one product is required\"),\n});\n\ntype ProductionScheduleData = z.infer<typeof productionScheduleSchema>;\n\ninterface ProductionItem {\n  id: number;\n  productId: number;\n  productName: string;\n  scheduledDate: string;\n  targetQuantity: number;\n  unit: \"kg\" | \"packets\";\n  targetPackets?: number;\n  packetsPerKg?: number;\n  priority: \"low\" | \"medium\" | \"high\";\n  status: string;\n  notes?: string;\n  assignedTo?: string;\n}\n\nexport default function EnhancedProductionSchedule() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedDate, setSelectedDate] = useState(\n    format(new Date(), \"yyyy-MM-dd\"),\n  );\n  const [editingItem, setEditingItem] = useState<ProductionItem | null>(null);\n\n  const { data: products = [] } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: productionSchedule = [] } = useQuery({\n    queryKey: [\"/api/production-schedule\", selectedDate],\n  });\n\n  const { data: todaySchedule = [] } = useQuery({\n    queryKey: [\"/api/production-schedule/today\"],\n  });\n\n  const form = useForm<ProductionScheduleData>({\n    resolver: zodResolver(productionScheduleSchema),\n    defaultValues: {\n      scheduledDate: selectedDate,\n      priority: \"medium\",\n      notes: \"\",\n      products: [{ productId: 0, targetQuantity: 1, unit: \"kg\" }],\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"products\",\n  });\n\n  const createScheduleMutation = useMutation({\n    mutationFn: async (data: ProductionScheduleData) => {\n      const response = await fetch(\"/api/production-schedule\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to create schedule item\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/production-schedule\"] });\n      form.reset({\n        scheduledDate: selectedDate,\n        priority: \"medium\",\n        notes: \"\",\n        products: [{ productId: 0, targetQuantity: 1, unit: \"kg\" }],\n      });\n      toast({\n        title: \"Schedule Created\",\n        description: \"Production schedule items have been added successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Creation Failed\",\n        description: \"Failed to create production schedule items.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateScheduleMutation = useMutation({\n    mutationFn: async ({\n      id,\n      data,\n    }: {\n      id: number;\n      data: Partial<ProductionScheduleData>;\n    }) => {\n      const response = await fetch(`/api/production-schedule/${id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to update schedule item\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/production-schedule\"] });\n      setEditingItem(null);\n      toast({\n        title: \"Schedule Updated\",\n        description: \"Production schedule item has been updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Update Failed\",\n        description: \"Failed to update production schedule item.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteScheduleMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/production-schedule/${id}`, {\n        method: \"DELETE\",\n      });\n      if (!response.ok) throw new Error(\"Failed to delete schedule item\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/production-schedule\"] });\n      toast({\n        title: \"Schedule Deleted\",\n        description: \"Production schedule item has been removed.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Deletion Failed\",\n        description: \"Failed to delete production schedule item.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const calculatePackets = (productId: number, targetKg: number): number => {\n    const product = products.find((p: any) => p.id === productId);\n    if (!product || !product.packetsPerKg) return 0;\n    return Math.ceil(targetKg * product.packetsPerKg);\n  };\n\n  const onSubmit = async (data: ProductionScheduleData) => {\n    try {\n      // Create multiple schedule items, one for each product\n      for (const product of data.products) {\n        const scheduleData = {\n          productId: product.productId,\n          scheduledDate: data.scheduledDate,\n          targetQuantity: product.targetQuantity,\n          unit: product.unit,\n          targetPackets:\n            product.unit === \"kg\"\n              ? calculatePackets(product.productId, product.targetQuantity)\n              : product.targetQuantity,\n          priority: data.priority,\n          notes: data.notes,\n        };\n\n        const response = await fetch(\"/api/production-schedule\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(scheduleData),\n        });\n\n        if (!response.ok) throw new Error(\"Failed to create schedule item\");\n      }\n\n      queryClient.invalidateQueries({ queryKey: [\"/api/production-schedule\"] });\n      form.reset({\n        scheduledDate: selectedDate,\n        priority: \"medium\",\n        notes: \"\",\n        products: [{ productId: 0, targetQuantity: 1, unit: \"kg\" }],\n      });\n\n      toast({\n        title: \"Schedule Created\",\n        description: \"Production schedule items have been added successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Creation Failed\",\n        description: \"Failed to create production schedule items.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleEdit = (item: ProductionItem) => {\n    setEditingItem(item);\n    form.reset({\n      scheduledDate: item.scheduledDate,\n      priority: item.priority,\n      notes: item.notes || \"\",\n      products: [\n        {\n          productId: item.productId,\n          targetQuantity: item.targetQuantity,\n          unit: item.unit,\n        },\n      ],\n    });\n  };\n\n  const cancelEdit = () => {\n    setEditingItem(null);\n    form.reset({\n      scheduledDate: selectedDate,\n      priority: \"medium\",\n      notes: \"\",\n      products: [{ productId: 0, targetQuantity: 1, unit: \"kg\" }],\n    });\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return \"bg-red-100 text-red-800\";\n      case \"medium\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"low\":\n        return \"bg-green-100 text-green-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"bg-green-100 text-green-800\";\n      case \"in_progress\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"pending\":\n        return \"bg-gray-100 text-gray-800\";\n      case \"delayed\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  useEffect(() => {\n    form.setValue(\"scheduledDate\", selectedDate);\n  }, [selectedDate, form]);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Today's Schedule Overview */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5\" />\n            Today's Production Schedule\n          </CardTitle>\n          <CardDescription>\n            {format(new Date(), \"EEEE, MMMM do, yyyy\")}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {todaySchedule.length === 0 ? (\n            <p className=\"text-gray-500 text-center py-4\">\n              No production scheduled for today\n            </p>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {todaySchedule.map((item: ProductionItem) => (\n                <div key={item.id} className=\"p-4 border rounded-lg\">\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <h4 className=\"font-semibold\">{item.productName}</h4>\n                    <Badge className={getPriorityColor(item.priority)}>\n                      {item.priority}\n                    </Badge>\n                  </div>\n                  <div className=\"space-y-1 text-sm text-gray-600\">\n                    <div className=\"flex items-center gap-2\">\n                      <Target className=\"h-4 w-4\" />\n                      <span>\n                        {item.targetQuantity} {item.unit}\n                      </span>\n                      {item.unit === \"kg\" && item.targetPackets && (\n                        <span className=\"text-gray-400\">\n                          ({item.targetPackets} packets)\n                        </span>\n                      )}\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Clock className=\"h-4 w-4\" />\n                      <Badge className={getStatusColor(item.status)}>\n                        {item.status.replace(\"_\", \" \")}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Schedule Management */}\n      <div className=\"space-y-6\">\n        {/* Add/Edit Schedule Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Plus className=\"h-5 w-5\" />\n              {editingItem\n                ? \"Edit Schedule Item\"\n                : \"Add Multiple Products to Schedule\"}\n            </CardTitle>\n            <CardDescription>\n              Schedule multiple products for production on the same date\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div>\n                  <Label>Scheduled Date</Label>\n                  <Input\n                    type=\"date\"\n                    {...form.register(\"scheduledDate\")}\n                    min={format(new Date(), \"yyyy-MM-dd\")}\n                  />\n                  {form.formState.errors.scheduledDate && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {form.formState.errors.scheduledDate.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label>Priority</Label>\n                  <Select\n                    value={form.watch(\"priority\")}\n                    onValueChange={(value: \"low\" | \"medium\" | \"high\") =>\n                      form.setValue(\"priority\", value)\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"low\">Low Priority</SelectItem>\n                      <SelectItem value=\"medium\">Medium Priority</SelectItem>\n                      <SelectItem value=\"high\">High Priority</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label>Notes (Optional)</Label>\n                  <Textarea\n                    {...form.register(\"notes\")}\n                    placeholder=\"Additional notes or instructions\"\n                  />\n                </div>\n              </div>\n              {/* Products Section */}\n              <div className=\"overflow-x-auto rounded-lg border border-gray-200 shadow-sm\">\n                <table className=\"min-w-full divide-y divide-gray-200\">\n                  <thead className=\"bg-gray-50 text-sm font-semibold text-gray-700 uppercase tracking-wider\">\n                    <tr>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left\">\n                        Product\n                      </th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left\">\n                        Target Amount\n                      </th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left\">\n                        Unit\n                      </th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left\">\n                        Estimated Packets\n                      </th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-right\">\n                        Actions\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-100 text-sm text-gray-700\">\n                    {fields.map((field, index) => (\n                      <tr\n                        key={field.id}\n                        className=\"hover:bg-gray-50 transition-colors\"\n                      >\n                        {/* Product Select */}\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <Select\n                            value={\n                              form\n                                .watch(`products.${index}.productId`)\n                                ?.toString() || \"\"\n                            }\n                            onValueChange={(value) =>\n                              form.setValue(\n                                `products.${index}.productId`,\n                                parseInt(value),\n                              )\n                            }\n                          >\n                            <SelectTrigger className=\"w-full sm:w-[240px] h-9\">\n                              <SelectValue placeholder=\"Select product\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {products.map((product: any) => (\n                                <SelectItem\n                                  key={product.id}\n                                  value={product.id.toString()}\n                                >\n                                  {product.name}\n                                  {product.packetsPerKg && (\n                                    <span className=\"text-gray-500 ml-2\">\n                                      ({product.packetsPerKg} packets/kg)\n                                    </span>\n                                  )}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </td>\n\n                        {/* Target Quantity Input */}\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <Input\n                            type=\"number\"\n                            step=\"0.1\"\n                            {...form.register(\n                              `products.${index}.targetQuantity`,\n                              {\n                                valueAsNumber: true,\n                              },\n                            )}\n                            placeholder=\"Enter amount\"\n                            className=\"w-28 h-9 px-2\"\n                          />\n                        </td>\n\n                        {/* Unit Select */}\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <Select\n                            value={form.watch(`products.${index}.unit`)}\n                            onValueChange={(value: \"kg\" | \"packets\") =>\n                              form.setValue(`products.${index}.unit`, value)\n                            }\n                          >\n                            <SelectTrigger className=\"h-9 w-[140px]\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"kg\">\n                                <div className=\"flex items-center gap-2\">\n                                  <Scale className=\"h-4 w-4\" />\n                                  Kilograms (kg)\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"packets\">\n                                <div className=\"flex items-center gap-2\">\n                                  <Package className=\"h-4 w-4\" />\n                                  Packets\n                                </div>\n                              </SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </td>\n\n                        {/* Estimated Packets Column */}\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          {form.watch(`products.${index}.unit`) === \"kg\" &&\n                          form.watch(`products.${index}.productId`) &&\n                          form.watch(`products.${index}.targetQuantity`) ? (\n                            <div className=\"flex items-center gap-1 text-blue-700 text-sm\">\n                              <Package className=\"h-4 w-4\" />\n                              {calculatePackets(\n                                form.watch(`products.${index}.productId`),\n                                form.watch(`products.${index}.targetQuantity`),\n                              )}\n                            </div>\n                          ) : (\n                            <span className=\"text-gray-400\">‚Äî</span>\n                          )}\n                        </td>\n\n                        {/* Actions */}\n                        <td className=\"px-6 py-4 whitespace-nowrap text-right space-x-2\">\n                          {fields.length > 1 && (\n                            <Button\n                              type=\"button\"\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              onClick={() => remove(index)}\n                              className=\"p-1 h-9 w-9 flex items-center justify-center\"\n                              title=\"Remove\"\n                            >\n                              <Minus className=\"h-4 w-4\" />\n                            </Button>\n                          )}\n                        </td>\n                      </tr>\n                    ))}\n\n                    {/* Add Product Button Row */}\n                    <tr>\n                      <td colSpan={5} className=\"px-6 py-4 text-right border-t\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() =>\n                            append({\n                              productId: 0,\n                              targetQuantity: 1,\n                              unit: \"kg\",\n                            })\n                          }\n                          className=\"flex items-center gap-1 px-3 h-9 hover:shadow\"\n                        >\n                          <Plus className=\"h-4 w-4\" />\n                          Add Product\n                        </Button>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n\n              <div className=\"w-full flex justify-end\">\n                <div className=\"flex gap-2\">\n                  <Button\n                    type=\"submit\"\n                    disabled={\n                      createScheduleMutation.isPending ||\n                      updateScheduleMutation.isPending\n                    }\n                    className=\"flex-1\"\n                  >\n                    {editingItem ? \"Update Schedule\" : \"Add to Schedule\"}\n                  </Button>\n                  {editingItem && (\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={cancelEdit}\n                      className=\"text-red-600 hover:text-red-800 focus:outline-none\"\n                    >\n                      Cancel\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":22127},"client/src/components/enhanced-stock-item-form.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useUnits } from \"@/hooks/useUnits\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport { ChevronDown, Plus, AlertCircle, Package } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\ninterface StockItemFormProps {\n  isOpen: boolean;\n  onClose: () => void;\n  editingItem?: any;\n}\n\ninterface CategoryDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onCategoryCreated: () => void;\n}\n\nfunction CategoryDialog({\n  isOpen,\n  onClose,\n  onCategoryCreated,\n}: CategoryDialogProps) {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const createCategoryMutation = useMutation({\n    mutationFn: (data: { name: string; description?: string }) =>\n      apiRequest(\"POST\", \"/api/inventory-categories\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/inventory-categories\"],\n      });\n      toast({\n        title: \"Success\",\n        description: \"Category created successfully\",\n      });\n      onCategoryCreated();\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    const formData = new FormData(e.target as HTMLFormElement);\n    const name = formData.get(\"name\") as string;\n    const description = formData.get(\"description\") as string;\n\n    if (!name.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Category name is required\",\n        variant: \"destructive\",\n      });\n      setIsSubmitting(false);\n      return;\n    }\n\n    createCategoryMutation.mutate({\n      name: name.trim(),\n      description: description.trim(),\n    });\n    setIsSubmitting(false);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Add New Category</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"categoryName\">Category Name *</Label>\n            <Input\n              id=\"categoryName\"\n              name=\"name\"\n              placeholder=\"Enter category name\"\n              required\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"categoryDescription\">Description</Label>\n            <Input\n              id=\"categoryDescription\"\n              name=\"description\"\n              placeholder=\"Enter description (optional)\"\n            />\n          </div>\n          <div className=\"flex justify-end space-x-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={isSubmitting}>\n              {isSubmitting ? \"Creating...\" : \"Create Category\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport function EnhancedStockItemForm({\n  isOpen,\n  onClose,\n  editingItem,\n}: StockItemFormProps) {\n  const { toast } = useToast();\n  const { symbol } = useCurrency();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showAdditionalDetails, setShowAdditionalDetails] = useState(false);\n  const [showCategoryDialog, setShowCategoryDialog] = useState(false);\n  \n  const [formData, setFormData] = useState({\n    name: \"\",\n    primaryUnitId: \"\",\n    secondaryUnitId: \"\",\n    conversionRate: \"\",\n    costPerUnit: \"\",\n    group: \"\",\n    minLevel: \"\",\n    openingStock: \"\",\n    purchasedQuantity: \"\",\n    consumedQuantity: \"\",\n    closingStock: \"\",\n    supplier: \"\",\n    notes: \"\",\n    invCode: \"\",\n  });\n\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\n\n  const { data: units = [], isLoading: unitsLoading } = useUnits();\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/inventory-categories\"],\n    queryFn: () => apiRequest(\"GET\", \"/api/inventory-categories\"),\n  });\n\n  // Fetch ingredients from recipes and inventory\n  const { data: ingredients = [] } = useQuery({\n    queryKey: [\"/api/ingredients/all\"],\n    queryFn: () => apiRequest(\"GET\", \"/api/ingredients\"),\n  });\n\n  // Filter active units\n  const activeUnits = Array.isArray(units)\n    ? units.filter((unit: any) => unit && unit.isActive)\n    : [];\n\n  useEffect(() => {\n    if (editingItem) {\n      // Determine group value from editingItem\n      let groupValue = \"\";\n      if (editingItem.categoryId) {\n        groupValue = editingItem.categoryId.toString();\n      } else if (editingItem.isIngredient) {\n        groupValue = \"ingredients\";\n      } else if (editingItem.group && editingItem.group !== \"uncategorized\") {\n        groupValue = editingItem.group;\n      }\n      \n      setFormData({\n        name: editingItem.name || \"\",\n        primaryUnitId: editingItem.unitId?.toString() || \"\",\n        secondaryUnitId: editingItem.secondaryUnitId?.toString() || \"\",\n        conversionRate: editingItem.conversionRate || \"\",\n        costPerUnit: editingItem.costPerUnit || \"\",\n        group: groupValue,\n        minLevel: editingItem.minLevel || \"\",\n        openingStock: editingItem.openingStock || editingItem.currentStock || \"\",\n        purchasedQuantity: editingItem.purchasedQuantity || \"0\",\n        consumedQuantity: editingItem.consumedQuantity || \"0\",\n        closingStock: editingItem.closingStock || editingItem.currentStock || \"\",\n        supplier: editingItem.supplier || \"\",\n        notes: editingItem.notes || \"\",\n        invCode: editingItem.invCode || editingItem.id?.toString() || \"\",\n      });\n    } else {\n      setFormData({\n        name: \"\",\n        primaryUnitId: \"\",\n        secondaryUnitId: \"\",\n        conversionRate: \"\",\n        costPerUnit: \"\",\n        group: \"\",\n        minLevel: \"\",\n        openingStock: \"\",\n        purchasedQuantity: \"0\",\n        consumedQuantity: \"0\",\n        closingStock: \"\",\n        supplier: \"\",\n        notes: \"\",\n        invCode: \"\",\n      });\n    }\n  }, [editingItem, isOpen]);\n\n  // Auto-calculate closing stock\n  useEffect(() => {\n    const opening = parseFloat(formData.openingStock) || 0;\n    const purchased = parseFloat(formData.purchasedQuantity) || 0;\n    const consumed = parseFloat(formData.consumedQuantity) || 0;\n    const closing = opening + purchased - consumed;\n    \n    setFormData(prev => ({\n      ...prev,\n      closingStock: closing.toString()\n    }));\n  }, [formData.openingStock, formData.purchasedQuantity, formData.consumedQuantity]);\n\n  const saveMutation = useMutation({\n    mutationFn: (data: any) => {\n      const url = editingItem\n        ? `/api/inventory/${editingItem.id}`\n        : \"/api/inventory\";\n      const method = editingItem ? \"PUT\" : \"POST\";\n      return apiRequest(method, url, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory/all\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/ingredients\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/low-stock\"] });\n      toast({\n        title: \"Success\",\n        description: `Stock item ${editingItem ? \"updated\" : \"created\"} successfully`,\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      let errorMessage = `Failed to ${editingItem ? \"update\" : \"create\"} stock item`;\n      \n      if (error.message?.includes(\"Item with this name already exists\")) {\n        setValidationErrors({ name: \"Item with this name already exists. Please use a different name.\" });\n        errorMessage = \"Item name already exists\";\n      } else if (error.message?.includes(\"duplicate\")) {\n        setValidationErrors({ name: \"This item name is already in use. Please choose a different name.\" });\n        errorMessage = \"Duplicate item name\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n\n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData((prev) => ({\n      ...prev,\n      [field]: value,\n    }));\n\n    if (validationErrors[field]) {\n      setValidationErrors((prev) => {\n        const newErrors = { ...prev };\n        delete newErrors[field];\n        return newErrors;\n      });\n    }\n  };\n\n  const getConversionInfoText = () => {\n    if (!formData.primaryUnitId) {\n      return \"Select a Primary Unit\";\n    }\n\n    if (!formData.secondaryUnitId) {\n      return \"No Secondary Unit Selected\";\n    }\n\n    if (formData.primaryUnitId === formData.secondaryUnitId) {\n      return \"Units must be different\";\n    }\n\n    const primaryUnit = activeUnits.find((u: any) => u.id.toString() === formData.primaryUnitId);\n    const secondaryUnit = activeUnits.find((u: any) => u.id.toString() === formData.secondaryUnitId);\n\n    if (!primaryUnit || !secondaryUnit) {\n      return \"Invalid unit selection\";\n    }\n\n    const rate = formData.conversionRate?.trim();\n    if (!rate) {\n      return \"Enter a conversion rate\";\n    }\n\n    const numRate = parseFloat(rate);\n    if (isNaN(numRate) || numRate <= 0) {\n      return \"Enter a valid positive number\";\n    }\n\n    return `1 ${primaryUnit.name} = ${numRate} ${secondaryUnit.name}`;\n  };\n\n  const validateForm = () => {\n    const errors: Record<string, string> = {};\n\n    if (!formData.name.trim()) {\n      errors.name = \"Item name is required\";\n    }\n\n    if (!formData.primaryUnitId) {\n      errors.primaryUnitId = \"Primary unit is required\";\n    }\n\n    if (!formData.costPerUnit || parseFloat(formData.costPerUnit) <= 0) {\n      errors.costPerUnit = \"Valid cost per unit is required\";\n    }\n\n    if (!formData.minLevel || parseFloat(formData.minLevel) < 0) {\n      errors.minLevel = \"Minimum level must be 0 or greater\";\n    }\n\n    if (!formData.openingStock || parseFloat(formData.openingStock) < 0) {\n      errors.openingStock = \"Valid opening stock is required\";\n    }\n\n    if (formData.secondaryUnitId && (!formData.conversionRate || parseFloat(formData.conversionRate) <= 0)) {\n      errors.conversionRate = \"Valid conversion rate is required when secondary unit is selected\";\n    }\n\n    return errors;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    const errors = validateForm();\n    setValidationErrors(errors);\n\n    if (Object.keys(errors).length > 0) {\n      setIsSubmitting(false);\n      return;\n    }\n\n    const selectedPrimaryUnit = activeUnits.find(\n      (u: any) => u.id.toString() === formData.primaryUnitId,\n    );\n\n    const submitData = {\n      name: formData.name.trim(),\n      invCode: formData.invCode.trim() || `INV-${Date.now()}`,\n      currentStock: parseFloat(formData.closingStock),\n      openingStock: parseFloat(formData.openingStock),\n      purchasedQuantity: parseFloat(formData.purchasedQuantity) || 0,\n      consumedQuantity: parseFloat(formData.consumedQuantity) || 0,\n      closingStock: parseFloat(formData.closingStock),\n      minLevel: parseFloat(formData.minLevel),\n      unit: selectedPrimaryUnit?.abbreviation || \"pcs\",\n      unitId: parseInt(formData.primaryUnitId),\n      secondaryUnitId: formData.secondaryUnitId ? parseInt(formData.secondaryUnitId) : null,\n      conversionRate: formData.secondaryUnitId ? parseFloat(formData.conversionRate) : null,\n      costPerUnit: parseFloat(formData.costPerUnit),\n      supplier: formData.supplier.trim() || null,\n      group: formData.group || null,\n      categoryId: (formData.group && !isNaN(parseInt(formData.group))) ? parseInt(formData.group) : null,\n      notes: formData.notes.trim() || null,\n      lastRestocked: new Date().toISOString(),\n      isIngredient: formData.group === \"ingredients\",\n    };\n\n    saveMutation.mutate(submitData);\n    setIsSubmitting(false);\n  };\n\n  const handleCategoryCreated = () => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/inventory-categories\"] });\n  };\n\n  // Auto-generate inventory code if not provided\n  const generateInvCode = () => {\n    const code = `INV-${Date.now().toString().slice(-6)}`;\n    handleInputChange(\"invCode\", code);\n  };\n\n  return (\n    <>\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"sm:max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"text-xl font-semibold text-center flex items-center gap-2\">\n              <Package className=\"h-5 w-5\" />\n              {editingItem ? \"Edit Stock Item\" : \"Create Stock Item\"}\n            </DialogTitle>\n          </DialogHeader>\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Basic Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Basic Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Inventory Code and Item Name */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"invCode\" className=\"text-sm font-medium\">\n                      Inventory Code <span className=\"text-red-500\">*</span>\n                    </Label>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        id=\"invCode\"\n                        value={formData.invCode}\n                        onChange={(e) => handleInputChange(\"invCode\", e.target.value)}\n                        placeholder=\"INV-001\"\n                        className={validationErrors.invCode ? \"border-red-500\" : \"\"}\n                      />\n                      <Button type=\"button\" variant=\"outline\" onClick={generateInvCode}>\n                        Generate\n                      </Button>\n                    </div>\n                    {validationErrors.invCode && (\n                      <p className=\"text-red-500 text-xs mt-1\">{validationErrors.invCode}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"itemName\" className=\"text-sm font-medium\">\n                      Item Name <span className=\"text-red-500\">*</span>\n                    </Label>\n                    <Input\n                      id=\"itemName\"\n                      value={formData.name}\n                      onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                      placeholder=\"Enter unique name (e.g., Flour)\"\n                      className={validationErrors.name ? \"border-red-500\" : \"\"}\n                      required\n                    />\n                    {validationErrors.name && (\n                      <p className=\"text-red-500 text-xs mt-1\">{validationErrors.name}</p>\n                    )}\n                  </div>\n                </div>\n\n                {/* Primary Unit and Group */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"primaryUnit\" className=\"text-sm font-medium\">\n                      Primary Unit <span className=\"text-red-500\">*</span>\n                    </Label>\n                    <Select\n                      value={formData.primaryUnitId}\n                      onValueChange={(value) => handleInputChange(\"primaryUnitId\", value)}\n                    >\n                      <SelectTrigger className={validationErrors.primaryUnitId ? \"border-red-500\" : \"\"}>\n                        <SelectValue placeholder=\"Select Primary Unit\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {unitsLoading ? (\n                          <SelectItem value=\"loading\" disabled>\n                            Loading units...\n                          </SelectItem>\n                        ) : activeUnits.length > 0 ? (\n                          activeUnits.map((unit: any) => (\n                            <SelectItem key={unit.id} value={unit.id.toString()}>\n                              {unit.name} ({unit.abbreviation})\n                            </SelectItem>\n                          ))\n                        ) : (\n                          <SelectItem value=\"none\" disabled>\n                            No units available\n                          </SelectItem>\n                        )}\n                      </SelectContent>\n                    </Select>\n                    {validationErrors.primaryUnitId && (\n                      <p className=\"text-red-500 text-xs mt-1\">{validationErrors.primaryUnitId}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"group\" className=\"text-sm font-medium\">\n                      Group/Category <span className=\"text-red-500\">*</span>\n                    </Label>\n                    <div className=\"flex gap-2\">\n                      <Select\n                        value={formData.group}\n                        onValueChange={(value) => handleInputChange(\"group\", value)}\n                      >\n                        <SelectTrigger className=\"flex-1\">\n                          <SelectValue placeholder=\"Select Group\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"ingredients\">Ingredients</SelectItem>\n                          <SelectItem value=\"raw-materials\">Raw Materials</SelectItem>\n                          <SelectItem value=\"packaging\">Packaging</SelectItem>\n                          <SelectItem value=\"spices\">Spices</SelectItem>\n                          <SelectItem value=\"dairy\">Dairy</SelectItem>\n                          <SelectItem value=\"flour\">Flour</SelectItem>\n                          <SelectItem value=\"sweeteners\">Sweeteners</SelectItem>\n                          <SelectItem value=\"supplies\">Supplies</SelectItem>\n                          {categories.map((category: any) => (\n                            <SelectItem key={category.id} value={category.id.toString()}>\n                              {category.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => setShowCategoryDialog(true)}\n                      >\n                        <Plus className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Secondary Unit and Conversion */}\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"secondaryUnit\" className=\"text-sm font-medium\">\n                      Secondary Unit\n                    </Label>\n                    <Select\n                      value={formData.secondaryUnitId || \"none\"}\n                      onValueChange={(value) => \n                        handleInputChange(\"secondaryUnitId\", value === \"none\" ? \"\" : value)\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"No Secondary Unit\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"none\">No Secondary Unit</SelectItem>\n                        {activeUnits\n                          .filter((unit: any) => unit.id.toString() !== formData.primaryUnitId)\n                          .map((unit: any) => (\n                            <SelectItem key={unit.id} value={unit.id.toString()}>\n                              {unit.name} ({unit.abbreviation})\n                            </SelectItem>\n                          ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {formData.secondaryUnitId && (\n                    <div>\n                      <Label htmlFor=\"conversionRate\" className=\"text-sm font-medium\">\n                        Conversion Rate <span className=\"text-red-500\">*</span>\n                      </Label>\n                      <Input\n                        id=\"conversionRate\"\n                        type=\"number\"\n                        step=\"0.000001\"\n                        min=\"0.000001\"\n                        value={formData.conversionRate}\n                        onChange={(e) => handleInputChange(\"conversionRate\", e.target.value)}\n                        placeholder=\"e.g., 50\"\n                        className={validationErrors.conversionRate ? \"border-red-500\" : \"\"}\n                        required\n                      />\n                      {validationErrors.conversionRate && (\n                        <p className=\"text-red-500 text-xs mt-1\">{validationErrors.conversionRate}</p>\n                      )}\n                    </div>\n                  )}\n\n                  {formData.secondaryUnitId && (\n                    <div>\n                      <Label className=\"text-sm font-medium\">Conversion Info</Label>\n                      <div className=\"mt-1 p-2 bg-blue-50 rounded text-sm text-blue-700 min-h-[40px] flex items-center\">\n                        {getConversionInfoText()}\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {/* Cost Per Unit and Minimum Level */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"costPerUnit\" className=\"text-sm font-medium\">\n                      Cost Per Unit <span className=\"text-red-500\">*</span>\n                    </Label>\n                    <div className=\"flex mt-1\">\n                      <span className=\"inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm\">\n                        {symbol}\n                      </span>\n                      <Input\n                        id=\"costPerUnit\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"0.01\"\n                        value={formData.costPerUnit}\n                        onChange={(e) => handleInputChange(\"costPerUnit\", e.target.value)}\n                        placeholder=\"0.00\"\n                        className={`rounded-l-none ${validationErrors.costPerUnit ? \"border-red-500\" : \"\"}`}\n                        required\n                      />\n                    </div>\n                    {validationErrors.costPerUnit && (\n                      <p className=\"text-red-500 text-xs mt-1\">{validationErrors.costPerUnit}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"minLevel\" className=\"text-sm font-medium\">\n                      Minimum Level <span className=\"text-red-500\">*</span>\n                    </Label>\n                    <Input\n                      id=\"minLevel\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      value={formData.minLevel}\n                      onChange={(e) => handleInputChange(\"minLevel\", e.target.value)}\n                      placeholder=\"0.00\"\n                      className={validationErrors.minLevel ? \"border-red-500\" : \"\"}\n                      required\n                    />\n                    {validationErrors.minLevel && (\n                      <p className=\"text-red-500 text-xs mt-1\">{validationErrors.minLevel}</p>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Stock Management Section */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Stock Management</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div>\n                    <Label htmlFor=\"openingStock\" className=\"text-sm font-medium\">\n                      Opening Stock <span className=\"text-red-500\">*</span>\n                    </Label>\n                    <Input\n                      id=\"openingStock\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      value={formData.openingStock}\n                      onChange={(e) => handleInputChange(\"openingStock\", e.target.value)}\n                      placeholder=\"0.00\"\n                      className={validationErrors.openingStock ? \"border-red-500\" : \"\"}\n                      required\n                    />\n                    {validationErrors.openingStock && (\n                      <p className=\"text-red-500 text-xs mt-1\">{validationErrors.openingStock}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"purchasedQuantity\" className=\"text-sm font-medium\">\n                      Purchased\n                    </Label>\n                    <Input\n                      id=\"purchasedQuantity\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      value={formData.purchasedQuantity}\n                      onChange={(e) => handleInputChange(\"purchasedQuantity\", e.target.value)}\n                      placeholder=\"0.00\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"consumedQuantity\" className=\"text-sm font-medium\">\n                      Consumed/Used\n                    </Label>\n                    <Input\n                      id=\"consumedQuantity\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      value={formData.consumedQuantity}\n                      onChange={(e) => handleInputChange(\"consumedQuantity\", e.target.value)}\n                      placeholder=\"0.00\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"closingStock\" className=\"text-sm font-medium\">\n                      Closing Stock\n                    </Label>\n                    <Input\n                      id=\"closingStock\"\n                      value={parseFloat(formData.closingStock || \"0\").toFixed(2)}\n                      placeholder=\"0.00\"\n                      className=\"bg-gray-50\"\n                      readOnly\n                    />\n                  </div>\n                </div>\n\n                {/* Stock Calculation Display */}\n                <div className=\"mt-4 p-4 bg-blue-50 rounded-lg\">\n                  <h4 className=\"font-medium text-blue-900 mb-2\">Stock Calculation</h4>\n                  <div className=\"text-sm text-blue-800\">\n                    <p>Opening Stock: {parseFloat(formData.openingStock || \"0\").toFixed(2)}</p>\n                    <p>+ Purchased: {parseFloat(formData.purchasedQuantity || \"0\").toFixed(2)}</p>\n                    <p>- Consumed: {parseFloat(formData.consumedQuantity || \"0\").toFixed(2)}</p>\n                    <hr className=\"my-2 border-blue-200\" />\n                    <p className=\"font-medium\">= Closing Stock: {parseFloat(formData.closingStock || \"0\").toFixed(2)}</p>\n                  </div>\n                </div>\n\n                {/* Warning for minimum level */}\n                {parseFloat(formData.closingStock || \"0\") <= parseFloat(formData.minLevel || \"0\") && \n                 parseFloat(formData.closingStock || \"0\") > 0 && (\n                  <Alert className=\"mt-4 border-yellow-500 bg-yellow-50\">\n                    <AlertCircle className=\"h-4 w-4 text-yellow-600\" />\n                    <AlertDescription className=\"text-yellow-800\">\n                      Warning: Closing stock is at or below minimum level\n                    </AlertDescription>\n                  </Alert>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Additional Details */}\n            <Collapsible\n              open={showAdditionalDetails}\n              onOpenChange={setShowAdditionalDetails}\n            >\n              <CollapsibleTrigger asChild>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  className=\"w-full justify-between p-0 h-auto font-normal text-blue-600 hover:text-blue-700\"\n                >\n                  Additional Details\n                  <ChevronDown\n                    className={`h-4 w-4 transition-transform ${showAdditionalDetails ? \"rotate-180\" : \"\"}`}\n                  />\n                </Button>\n              </CollapsibleTrigger>\n              <CollapsibleContent className=\"space-y-4 mt-4\">\n                <Card>\n                  <CardContent className=\"pt-6 space-y-4\">\n                    <div>\n                      <Label htmlFor=\"supplier\" className=\"text-sm font-medium\">\n                        Supplier\n                      </Label>\n                      <Input\n                        id=\"supplier\"\n                        value={formData.supplier}\n                        onChange={(e) => handleInputChange(\"supplier\", e.target.value)}\n                        placeholder=\"Enter supplier name\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"notes\" className=\"text-sm font-medium\">\n                        Notes\n                      </Label>\n                      <Input\n                        id=\"notes\"\n                        value={formData.notes}\n                        onChange={(e) => handleInputChange(\"notes\", e.target.value)}\n                        placeholder=\"Additional notes\"\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              </CollapsibleContent>\n            </Collapsible>\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-between pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"bg-green-500 hover:bg-green-600 text-white min-w-[120px]\"\n              >\n                {isSubmitting ? \"Saving...\" : \"Save Item\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      <CategoryDialog\n        isOpen={showCategoryDialog}\n        onClose={() => setShowCategoryDialog(false)}\n        onCategoryCreated={handleCategoryCreated}\n      />\n    </>\n  );\n}\n","size_bytes":31596},"client/src/components/error-boundary.tsx":{"content":"\nimport React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n}\n\ninterface ErrorBoundaryProps {\n  children: React.ReactNode;\n}\n\nclass ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('Error caught by boundary:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n          <Card className=\"w-full max-w-md mx-4\">\n            <CardHeader>\n              <CardTitle className=\"text-center text-red-600\">\n                <i className=\"fas fa-exclamation-triangle text-2xl mb-2\"></i>\n                <br />\n                Something went wrong\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-center space-y-4\">\n              <p className=\"text-gray-600\">\n                An unexpected error occurred. Please refresh the page to try again.\n              </p>\n              <Button \n                onClick={() => window.location.reload()}\n                className=\"w-full\"\n              >\n                <i className=\"fas fa-refresh mr-2\"></i>\n                Refresh Page\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","size_bytes":1795},"client/src/components/footer.tsx":{"content":"import { Facebook, Instagram, Linkedin, Globe } from \"lucide-react\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-white border-t border-gray-200 px-4 py-3 text-center text-sm text-gray-600\">\n      {/* Copyright */}\n      <p className=\"mb-2\">\n        ¬© {new Date().getFullYear()} M.A.P. Tech Pvt. Ltd. All rights reserved.\n      </p>\n\n      {/* Social Media Links */}\n      <a\n        href=\"https://facebook.com/maptechnepal \"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        aria-label=\"Facebook\"\n      >\n        <Facebook className=\"h-5 w-5 text-gray-500 hover:text-blue-600\" />\n      </a>\n      <a\n        href=\"https://instagram.com/maptechnepal \"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        aria-label=\"Instagram\"\n      >\n        <Instagram className=\"h-5 w-5 text-gray-500 hover:text-pink-600\" />\n      </a>\n      <a\n        href=\"https://linkedin.com/company/maptech-nepal \"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        aria-label=\"LinkedIn\"\n      >\n        <Linkedin className=\"h-5 w-5 text-gray-500 hover:text-blue-700\" />\n      </a>\n      <a\n        href=\"https://maptech.com.np \"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        aria-label=\"Website\"\n      >\n        <Globe className=\"h-5 w-5 text-gray-500 hover:text-green-600\" />\n      </a>\n    </footer>\n  );\n}\n","size_bytes":1379},"client/src/components/header.tsx":{"content":"import React, { useState } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { useLocation, Link } from \"wouter\";\nimport { useCompanyBranding } from \"@/hooks/use-company-branding\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Menu,\n  Globe,\n  LogOut,\n  User,\n  Settings,\n  Calendar,\n  Bell,\n  HelpCircle,\n} from \"lucide-react\";\nimport ProfileEditor from \"./profile-editor\";\nimport NotificationDropdown from \"./notification-dropdown\";\n\ninterface HeaderProps {\n  onMenuClick?: () => void;\n}\n\nexport default function Header({ onMenuClick }: HeaderProps) {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n  const { branding } = useCompanyBranding();\n  const { t, language, setLanguage } = useLanguage();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      toast({\n        title: \"Search\",\n        description: `Searching for: ${searchQuery}`,\n      });\n    }\n  };\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      toast({\n        title: \"Success\",\n        description: \"Logged out successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to logout\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getCurrentDate = () => {\n    return new Date().toLocaleDateString(\"en-US\", {\n      weekday: \"long\",\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    });\n  };\n\n  const getPageTitle = () => {\n    const pathTitles: Record<string, string> = {\n      \"/\": t(\"dashboard\"),\n      \"/products\": t(\"products\"),\n      \"/inventory\": t(\"inventory\"),\n      \"/stock\": t(\"stock\"),\n      \"/orders\": t(\"orders\"),\n      \"/production\": t(\"production\"),\n      \"/parties\": t(\"parties\"),\n      \"/customers\": t(\"customers\"),\n      \"/assets\": t(\"assets\"),\n      \"/expenses\": t(\"expenses\"),\n      \"/reports\": t(\"reports\"),\n      \"/day-book\": t(\"dayBook\"),\n      \"/transactions\": t(\"transactions\"),\n      \"/billing\": t(\"billing\"),\n      \"/settings\": t(\"settings\"),\n      \"/notifications\": t(\"notifications\"),\n      \"/admin/users\": t(\"userManagement\"),\n      \"/admin/login-logs\": t(\"loginLogs\"),\n      \"/category-management\": t(\"categoryManagement\"),\n      \"/sales\": t(\"sales\"),\n      \"/purchases\": t(\"purchases\"),\n      \"/ingredients\": t(\"ingredients\"),\n      \"/units\": t(\"units\"),\n      \"/unit-conversion\": t(\"unitConversions\"),\n    };\n\n    return pathTitles[location] || t(\"dashboard\");\n  };\n\n  return (\n    <header className=\"bg-white/95 backdrop-blur-md border-b border-gray-200/60 px-4 py-3.5 shadow-sm flex-shrink-0\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onMenuClick}\n            className=\"lg:hidden hover:bg-gray-100 transition-all duration-200 hover:scale-105\"\n          >\n            <Menu className=\"h-5 w-5\" />\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">\n              {getPageTitle()}\n            </h1>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-2 lg:space-x-4\">\n          {/* Page title and date */}\n          <div className=\"hidden lg:block\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex items-center gap-2 px-3 py-2 bg-primary/10 rounded-lg\">\n                <Calendar className=\"h-4 w-4 text-primary\" />\n                <span className=\"text-sm font-medium text-primary\">\n                  {getCurrentDate()}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Language Selector */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"sm\" className=\"p-2\">\n                <Globe className=\"h-5 w-5\" />\n                {/* <span className=\"hidden lg:inline ml-2\">\n                  {language === \"en\" ? \"English\" : \"‡§®‡•á‡§™‡§æ‡§≤‡•Ä\"}\n                </span> */}\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem onClick={() => setLanguage(\"en\")}>\n                <span className=\"mr-2\">üá∫üá∏</span> English\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => setLanguage(\"ne\")}>\n                <span className=\"mr-2\">üá≥üáµ</span> ‡§®‡•á‡§™‡§æ‡§≤‡•Ä\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          {/* Notifications */}\n          <NotificationDropdown />\n\n          {/* Info Selector */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"sm\" className=\"p-2\">\n                <HelpCircle className=\"h-6 w-6\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem>\n                <span className=\"mr-2\">üìö</span> Support Guide\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <span className=\"mr-2\">‚ú®</span> What's New?\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <span className=\"mr-2\">‚å®Ô∏è</span> Keyboard Shortcuts\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <span className=\"mr-2\">üí¨</span> Give Feedback\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <span className=\"mr-2\">üìß</span> Send us a message\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":6150},"client/src/components/login-footer.tsx":{"content":"import React from \"react\";\nimport { Facebook, Instagram, Mail, MessageCircle } from \"lucide-react\";\n\nexport default function LoginFooter() {\n  return (\n    <div className=\"mt-4 text-center\">\n      <div className=\"flex items-center justify-center gap-4\">\n        {/* Powered by */}\n        <div className=\"flex items-center text-xs text-gray-500 mr-4\">\n          Powered by{\" \"}\n          <a\n            href=\"https://maptechnepal.com\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"inline-flex items-center gap-1 text-blue-600 hover:text-blue-800 transition-colors ml-1\"\n          >\n            <img\n              src=\"https://maptechnepal.com/_next/static/media/company__logo.388080d1.webp\"\n              alt=\"MapTech Nepal\"\n              className=\"h-3 w-auto inline\"\n            />\n          </a>\n        </div>\n\n        {/* Social icons */}\n        <a\n          href=\"mailto:support@maptechnepal.com\"\n          className=\"p-1 text-red-500 hover:text-red-600 transition-colors\"\n          title=\"Email\"\n        >\n          <Mail className=\"w-4 h-4\" />\n        </a>\n        <a\n          href=\"https://wa.me/9779745673009\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"p-1 text-green-500 hover:text-green-600 transition-colors\"\n          title=\"WhatsApp\"\n        >\n          <MessageCircle className=\"w-4 h-4\" />\n        </a>\n        <a\n          href=\"https://www.facebook.com/maptech.np/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"p-1 text-blue-600 hover:text-blue-700 transition-colors\"\n          title=\"Facebook\"\n        >\n          <Facebook className=\"w-4 h-4\" />\n        </a>\n        <a\n          href=\"https://www.instagram.com/maptech.np/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"p-1 text-pink-500 hover:text-pink-600 transition-colors\"\n          title=\"Instagram\"\n        >\n          <Instagram className=\"w-4 h-4\" />\n        </a>\n      </div>\n    </div>\n  );\n}","size_bytes":2034},"client/src/components/login-form.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCompanyBranding } from \"@/hooks/use-company-branding\";\nimport LoginFooter from \"@/components/login-footer\";\nimport Client_Logo from \"@/public/image/bakedLink_2.png\";\nimport { Eye, EyeOff } from \"lucide-react\";\n\ninterface LoginFormProps {\n  onSuccess: () => void;\n}\n\nexport default function LoginForm({ onSuccess }: LoginFormProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [loginData, setLoginData] = useState({ email: \"\", password: \"\" });\n  const [showPassword, setShowPassword] = useState(false);\n  const { toast } = useToast();\n  const { branding } = useCompanyBranding();\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await apiRequest(\"POST\", \"/api/auth/login\", loginData);\n      toast({\n        title: \"Success\",\n        description: \"Logged in successfully\",\n      });\n      onSuccess();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n      <div className=\"w-full max-w-md space-y-8\">\n        <Card className=\"transition-all duration-300 hover:shadow-lg\">\n          <CardHeader>\n            <div className=\"flex items-center justify-center w-30 h-30 rounded-xl mb-4 mx-auto\">\n              <img\n                src={Client_Logo}\n                alt=\"Logo\"\n                className=\"h-30 w-30 object-contain rounded\"\n                loading=\"lazy\"\n              />\n            </div>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={loginData.email}\n                  onChange={(e) =>\n                    setLoginData({ ...loginData, email: e.target.value })\n                  }\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    value={loginData.password}\n                    onChange={(e) =>\n                      setLoginData({ ...loginData, password: e.target.value })\n                    }\n                    required\n                    className=\"pr-10\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600\"\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4\" />\n                    )}\n                  </button>\n                </div>\n              </div>\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground transition-all duration-300 hover:scale-105 active:scale-95\"\n                disabled={isLoading}\n                style={{ backgroundColor: branding.themeColor }}\n              >\n                {isLoading ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n            </form>\n            <LoginFooter />\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4090},"client/src/components/media-library.tsx":{"content":"\nimport React, { useState, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { DeleteConfirmationDialog } from \"@/components/ui/delete-confirmation-dialog\";\nimport { Trash2, Upload, Image as ImageIcon, Search } from \"lucide-react\";\n\ninterface MediaItem {\n  id: string;\n  filename: string;\n  url: string;\n  size: number;\n  uploadedAt: string;\n  contentType: string;\n}\n\ninterface MediaLibraryProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSelect?: (imageUrl: string) => void;\n  allowUpload?: boolean;\n  allowDelete?: boolean;\n}\n\nexport default function MediaLibrary({\n  isOpen,\n  onClose,\n  onSelect,\n  allowUpload = true,\n  allowDelete = true,\n}: MediaLibraryProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedImage, setSelectedImage] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: images = [], isLoading } = useQuery({\n    queryKey: [\"/api/media\"],\n    enabled: isOpen,\n  });\n\n  const uploadMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"image\", file);\n      \n      const response = await fetch(\"/api/media/upload\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to upload image\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/media\"] });\n      toast({\n        title: \"Success\",\n        description: \"Image uploaded successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to upload image\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (imageId: string) => {\n      await apiRequest(\"DELETE\", `/api/media/${imageId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/media\"] });\n      toast({\n        title: \"Success\",\n        description: \"Image deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete image\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file type\n    if (!file.type.startsWith(\"image/\")) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a valid image file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file size (5MB limit)\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"Error\",\n        description: \"Image size must be less than 5MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    uploadMutation.mutate(file);\n  };\n\n  const handleImageSelect = (imageUrl: string) => {\n    if (onSelect) {\n      onSelect(imageUrl);\n      onClose();\n    } else {\n      setSelectedImage(imageUrl);\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  };\n\n  const filteredImages = images.filter((image: MediaItem) =>\n    image.filename.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <ImageIcon className=\"h-5 w-5\" />\n            Media Library\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Upload Section */}\n          {allowUpload && (\n            <div className=\"flex items-center gap-4 p-4 border rounded-lg bg-gray-50\">\n              <Button\n                onClick={() => fileInputRef.current?.click()}\n                disabled={uploadMutation.isPending}\n                className=\"gap-2\"\n              >\n                <Upload className=\"h-4 w-4\" />\n                {uploadMutation.isPending ? \"Uploading...\" : \"Upload Image\"}\n              </Button>\n              <input\n                ref={fileInputRef}\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleFileSelect}\n                className=\"hidden\"\n              />\n              <span className=\"text-sm text-gray-600\">\n                Supports JPG, PNG, GIF up to 5MB\n              </span>\n            </div>\n          )}\n\n          {/* Search */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder=\"Search images...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n\n          {/* Images Grid */}\n          <div className=\"max-h-[60vh] overflow-y-auto\">\n            {isLoading ? (\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                {[1, 2, 3, 4, 5, 6, 7, 8].map((i) => (\n                  <div\n                    key={i}\n                    className=\"aspect-square bg-gray-200 rounded-lg animate-pulse\"\n                  />\n                ))}\n              </div>\n            ) : filteredImages.length > 0 ? (\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                {filteredImages.map((image: MediaItem) => (\n                  <Card\n                    key={image.id}\n                    className={`cursor-pointer transition-all hover:shadow-lg ${\n                      selectedImage === image.url\n                        ? \"ring-2 ring-blue-500\"\n                        : \"\"\n                    }`}\n                    onClick={() => handleImageSelect(image.url)}\n                  >\n                    <CardContent className=\"p-2\">\n                      <div className=\"aspect-square relative mb-2\">\n                        <img\n                          src={image.url}\n                          alt={image.filename}\n                          className=\"w-full h-full object-cover rounded\"\n                          loading=\"lazy\"\n                        />\n                        {allowDelete && (\n                          <DeleteConfirmationDialog\n                            trigger={\n                              <Button\n                                size=\"sm\"\n                                variant=\"destructive\"\n                                className=\"absolute top-1 right-1 h-6 w-6 p-0\"\n                                onClick={(e) => e.stopPropagation()}\n                              >\n                                <Trash2 className=\"h-3 w-3\" />\n                              </Button>\n                            }\n                            title=\"Delete Image\"\n                            itemName={image.filename}\n                            onConfirm={() => deleteMutation.mutate(image.id)}\n                            isLoading={deleteMutation.isPending}\n                          />\n                        )}\n                      </div>\n                      <div className=\"space-y-1\">\n                        <p className=\"text-xs font-medium truncate\">\n                          {image.filename}\n                        </p>\n                        <div className=\"flex items-center justify-between\">\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {formatFileSize(image.size)}\n                          </Badge>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {image.contentType.split(\"/\")[1].toUpperCase()}\n                          </Badge>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <ImageIcon className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-600 mb-2\">\n                  No images found\n                </h3>\n                <p className=\"text-gray-500\">\n                  {searchQuery\n                    ? \"Try adjusting your search criteria\"\n                    : \"Upload your first image to get started\"}\n                </p>\n              </div>\n            )}\n          </div>\n\n          {/* Actions */}\n          {onSelect && (\n            <div className=\"flex justify-end gap-2 pt-4 border-t\">\n              <Button variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button\n                onClick={() => {\n                  if (selectedImage) {\n                    onSelect(selectedImage);\n                    onClose();\n                  }\n                }}\n                disabled={!selectedImage}\n              >\n                Select Image\n              </Button>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9984},"client/src/components/notification-dropdown.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Bell,\n  BellRing,\n  Package,\n  ShoppingCart,\n  Factory,\n  Truck,\n  AlertTriangle,\n  CheckCheck,\n  Clock,\n  ArrowRight,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { activityTracker } from \"@/lib/activityTracker\";\n\ninterface Notification {\n  id: string;\n  type: \"order\" | \"production\" | \"inventory\" | \"shipping\" | \"system\";\n  title: string;\n  description: string;\n  timestamp: string;\n  read: boolean;\n  priority: \"low\" | \"medium\" | \"high\" | \"critical\";\n  actionUrl?: string;\n  data?: any;\n}\n\nconst notificationConfig = {\n  order: {\n    icon: ShoppingCart,\n    color: \"text-blue-600\",\n    bgColor: \"bg-blue-50\",\n    borderColor: \"border-blue-200\",\n    label: \"Orders\",\n    emoji: \"üõí\",\n  },\n  production: {\n    icon: Factory,\n    color: \"text-orange-600\",\n    bgColor: \"bg-orange-50\",\n    borderColor: \"border-orange-200\",\n    label: \"Production\",\n    emoji: \"üè≠\",\n  },\n  inventory: {\n    icon: Package,\n    color: \"text-green-600\",\n    bgColor: \"bg-green-50\",\n    borderColor: \"border-green-200\",\n    label: \"Inventory\",\n    emoji: \"üì¶\",\n  },\n  shipping: {\n    icon: Truck,\n    color: \"text-purple-600\",\n    bgColor: \"bg-purple-50\",\n    borderColor: \"border-purple-200\",\n    label: \"Shipping\",\n    emoji: \"üöö\",\n  },\n  system: {\n    icon: AlertTriangle,\n    color: \"text-red-600\",\n    bgColor: \"bg-red-50\",\n    borderColor: \"border-red-200\",\n    label: \"System\",\n    emoji: \"‚ö†Ô∏è\",\n  },\n};\n\nconst priorityConfig = {\n  critical: {\n    color: \"bg-red-500\",\n    textColor: \"text-red-700\",\n    label: \"Critical\",\n  },\n  high: {\n    color: \"bg-orange-500\",\n    textColor: \"text-orange-700\",\n    label: \"High\",\n  },\n  medium: {\n    color: \"bg-yellow-500\",\n    textColor: \"text-yellow-700\",\n    label: \"Medium\",\n  },\n  low: {\n    color: \"bg-green-500\",\n    textColor: \"text-green-700\",\n    label: \"Low\",\n  },\n};\n\nexport default function NotificationDropdown() {\n  const [isOpen, setIsOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch notifications\n  const { data: notifications = [], isLoading } = useQuery({\n    queryKey: [\"/api/notifications\"],\n    // refetchInterval: 30000, // Poll every 30 seconds\n    // refetchIntervalInBackground: true,\n  });\n\n  // Mark notification as read\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: string) => {\n      const response = await fetch(\n        `/api/notifications/${notificationId}/read`,\n        {\n          method: \"PUT\",\n          credentials: \"include\",\n        },\n      );\n      if (!response.ok) throw new Error(\"Failed to mark as read\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n  });\n\n  // Mark all as read\n  const markAllAsReadMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/notifications/mark-all-read\", {\n        method: \"PUT\",\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to mark all as read\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n      toast({\n        title: \"Success\",\n        description: \"All notifications marked as read\",\n      });\n    },\n  });\n\n  // Calculate unread count\n  const notificationData = (notifications as Notification[]) || [];\n  const unreadCount = notificationData.filter(\n    (n: Notification) => !n.read,\n  ).length;\n\n  // Sort notifications by priority and timestamp\n  const sortedNotifications = [...notificationData].sort(\n    (a: Notification, b: Notification) => {\n      const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\n\n      // First sort by priority\n      const priorityDiff =\n        priorityOrder[b.priority] - priorityOrder[a.priority];\n      if (priorityDiff !== 0) return priorityDiff;\n\n      // Then by read status (unread first)\n      const readDiff = Number(a.read) - Number(b.read);\n      if (readDiff !== 0) return readDiff;\n\n      // Finally by timestamp (newest first)\n      return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();\n    },\n  );\n\n  // Group notifications by type\n  const groupedNotifications = sortedNotifications.reduce(\n    (groups: any, notification: Notification) => {\n      const type = notification.type;\n      if (!groups[type]) {\n        groups[type] = [];\n      }\n      groups[type].push(notification);\n      return groups;\n    },\n    {},\n  );\n\n  const formatTimeAgo = (timestamp: string) => {\n    const now = new Date();\n    const time = new Date(timestamp);\n    const diffInSeconds = Math.floor((now.getTime() - time.getTime()) / 1000);\n\n    if (diffInSeconds < 60) return \"Just now\";\n    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;\n    if (diffInSeconds < 86400)\n      return `${Math.floor(diffInSeconds / 3600)}h ago`;\n    return `${Math.floor(diffInSeconds / 86400)}d ago`;\n  };\n\n  const handleNotificationClick = async (notification: Notification) => {\n    // Mark as read if unread\n    if (!notification.read) {\n      markAsReadMutation.mutate(notification.id);\n    }\n\n    // Track activity\n    activityTracker.track(\"CLICK\", \"notification\", notification.id, {\n      type: notification.type,\n      priority: notification.priority,\n    });\n\n    // Navigate to action URL if provided\n    if (notification.actionUrl) {\n      window.location.href = notification.actionUrl;\n    }\n\n    setIsOpen(false);\n  };\n\n  const handleMarkAllAsRead = () => {\n    markAllAsReadMutation.mutate();\n  };\n\n  const getNotificationIcon = (type: string) => {\n    const config = notificationConfig[type as keyof typeof notificationConfig];\n    const IconComponent = config?.icon || Bell;\n    return <IconComponent className={`h-4 w-4 ${config?.color}`} />;\n  };\n\n  // Critical notifications count for extra highlighting\n  const criticalCount = notificationData.filter(\n    (n: Notification) => !n.read && n.priority === \"critical\",\n  ).length;\n\n  return (\n    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"sm\" className=\"relative p-2\">\n          {criticalCount > 0 ? (\n            <BellRing className=\"h-6 w-6 \" />\n          ) : (\n            <Bell className=\"h-6 w-6\" />\n          )}\n          {unreadCount > 0 && (\n            <Badge\n              variant=\"destructive\"\n              className={`absolute -top-1 -right-1 h-5 w-5 text-xs flex items-center justify-center ${\n                criticalCount > 0 ? \"bg-red-600\" : \"\"\n              }`}\n            >\n              {unreadCount > 99 ? \"99+\" : unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </DropdownMenuTrigger>\n\n      <DropdownMenuContent\n        align=\"end\"\n        className=\"w-96 max-h-[80vh]\"\n        sideOffset={5}\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 border-b\">\n          <div className=\"flex items-center gap-2\">\n            <Bell className=\"h-5 w-5\" />\n            <h3 className=\"font-semibold\">Notifications</h3>\n            {unreadCount > 0 && (\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {unreadCount} new\n              </Badge>\n            )}\n          </div>\n          {unreadCount > 0 && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleMarkAllAsRead}\n              disabled={markAllAsReadMutation.isPending}\n              className=\"text-xs\"\n            >\n              <CheckCheck className=\"h-3 w-3 mr-1\" />\n              Mark all read\n            </Button>\n          )}\n        </div>\n\n        {/* Notifications List */}\n        <ScrollArea className=\"max-h-96\">\n          {isLoading ? (\n            <div className=\"p-4 text-center text-muted-foreground\">\n              Loading notifications...\n            </div>\n          ) : sortedNotifications.length === 0 ? (\n            <div className=\"p-8 text-center text-muted-foreground\">\n              <Bell className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p className=\"text-sm\">No notifications</p>\n              <p className=\"text-xs mt-1\">You're all caught up!</p>\n            </div>\n          ) : (\n            <div className=\"p-2\">\n              {Object.entries(groupedNotifications).map(\n                ([type, typeNotifications]: [string, any]) => {\n                  const config =\n                    notificationConfig[type as keyof typeof notificationConfig];\n                  const unreadInGroup = typeNotifications.filter(\n                    (n: Notification) => !n.read,\n                  ).length;\n\n                  return (\n                    <div key={type} className=\"mb-4\">\n                      {/* Group Header */}\n                      <div className=\"flex items-center gap-2 px-2 py-1 mb-2\">\n                        <span className=\"text-lg\">{config?.emoji}</span>\n                        <span className=\"text-sm font-medium text-muted-foreground\">\n                          {config?.label}\n                        </span>\n                        {unreadInGroup > 0 && (\n                          <Badge variant=\"outline\" className=\"text-xs h-5\">\n                            {unreadInGroup}\n                          </Badge>\n                        )}\n                      </div>\n\n                      {/* Notifications in Group */}\n                      {typeNotifications.map((notification: Notification) => {\n                        const priorityStyle =\n                          priorityConfig[notification.priority];\n\n                        return (\n                          <DropdownMenuItem\n                            key={notification.id}\n                            className={`flex items-start gap-3 p-3 rounded-lg cursor-pointer transition-all hover:bg-muted/50 ${\n                              !notification.read\n                                ? `${config?.bgColor} ${config?.borderColor} border-l-4`\n                                : \"\"\n                            } ${notification.priority === \"critical\" ? \"ring-1 ring-red-200\" : \"\"}`}\n                            onClick={() =>\n                              handleNotificationClick(notification)\n                            }\n                          >\n                            <div className=\"flex-shrink-0 mt-1\">\n                              <div\n                                className={`w-8 h-8 rounded-full flex items-center justify-center ${config?.bgColor}`}\n                              >\n                                {getNotificationIcon(type)}\n                              </div>\n                            </div>\n\n                            <div className=\"flex-1 min-w-0\">\n                              <div className=\"flex items-start justify-between gap-2\">\n                                <div className=\"flex-1\">\n                                  <div className=\"flex items-center gap-2 mb-1\">\n                                    <h4\n                                      className={`text-sm font-medium truncate ${\n                                        !notification.read\n                                          ? \"font-semibold\"\n                                          : \"\"\n                                      }`}\n                                    >\n                                      {notification.title}\n                                    </h4>\n                                    {!notification.read && (\n                                      <div className=\"w-2 h-2 bg-blue-500 rounded-full flex-shrink-0\" />\n                                    )}\n                                  </div>\n                                  <p className=\"text-xs text-muted-foreground line-clamp-2 mb-2\">\n                                    {notification.description}\n                                  </p>\n                                  <div className=\"flex items-center justify-between\">\n                                    <div className=\"flex items-center gap-2\">\n                                      <div className=\"flex items-center gap-1\">\n                                        <Clock className=\"h-3 w-3 text-muted-foreground\" />\n                                        <span className=\"text-xs text-muted-foreground\">\n                                          {formatTimeAgo(\n                                            notification.timestamp,\n                                          )}\n                                        </span>\n                                      </div>\n                                      {notification.priority !== \"low\" && (\n                                        <Badge\n                                          variant=\"outline\"\n                                          className={`text-xs h-4 px-1 ${priorityStyle.textColor}`}\n                                        >\n                                          <div\n                                            className={`w-2 h-2 rounded-full mr-1 ${priorityStyle.color}`}\n                                          />\n                                          {priorityStyle.label}\n                                        </Badge>\n                                      )}\n                                    </div>\n                                    {notification.actionUrl && (\n                                      <ArrowRight className=\"h-3 w-3 text-muted-foreground\" />\n                                    )}\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </DropdownMenuItem>\n                        );\n                      })}\n\n                      {Object.keys(groupedNotifications).indexOf(type) <\n                        Object.keys(groupedNotifications).length - 1 && (\n                        <Separator className=\"my-2\" />\n                      )}\n                    </div>\n                  );\n                },\n              )}\n            </div>\n          )}\n        </ScrollArea>\n\n        {/* Footer */}\n        {sortedNotifications.length > 0 && (\n          <>\n            <Separator />\n            <div className=\"p-2\">\n              <Button\n                variant=\"ghost\"\n                className=\"w-full text-sm justify-center\"\n                onClick={() => {\n                  window.location.href = \"/notifications\";\n                  setIsOpen(false);\n                }}\n              >\n                View All Notifications\n              </Button>\n            </div>\n          </>\n        )}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n","size_bytes":15239},"client/src/components/notification-settings.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Switch } from '@/components/ui/switch';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { useNotifications } from '@/hooks/useNotifications';\nimport { Bell, BellOff, TestTube } from 'lucide-react';\n\nexport default function NotificationSettings() {\n  const { toast } = useToast();\n  const {\n    isSupported: notificationsSupported,\n    permission,\n    subscription,\n    requestPermission,\n    subscribe,\n    unsubscribe,\n    rules,\n    updateRule,\n    sendTestNotification,\n  } = useNotifications();\n\n  const [isTestingNotification, setIsTestingNotification] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handlePermissionRequest = async () => {\n    setIsLoading(true);\n    const granted = await requestPermission();\n    if (granted) {\n      toast({\n        title: \"Permission Granted\",\n        description: \"You can now receive push notifications.\",\n      });\n    } else {\n      toast({\n        title: \"Permission Denied\",\n        description: \"Please enable notifications in your browser settings.\",\n        variant: \"destructive\",\n      });\n    }\n    setIsLoading(false);\n  };\n\n  const handleTestNotification = async () => {\n    setIsTestingNotification(true);\n    try {\n      await sendTestNotification();\n      toast({\n        title: \"Test Notification Sent\",\n        description: \"Check your notifications to see if it was received.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Test Failed\",\n        description: \"Failed to send test notification. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n    setIsTestingNotification(false);\n  };\n\n  const handleRuleUpdate = async (ruleId: string, enabled: boolean) => {\n    try {\n      await updateRule(ruleId, { enabled });\n      toast({\n        title: \"Rule Updated\",\n        description: \"Notification rule has been updated successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Update Failed\",\n        description: \"Failed to update notification rule. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (!notificationsSupported) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BellOff className=\"h-5 w-5\" />\n            Notifications Not Supported\n          </CardTitle>\n          <CardDescription>\n            Your browser does not support push notifications.\n          </CardDescription>\n        </CardHeader>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Bell className=\"h-5 w-5\" />\n            Push Notifications\n          </CardTitle>\n          <CardDescription>\n            Configure how you want to receive notifications from the system.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <Label>Notification Permission</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Status: {permission === 'granted' ? 'Enabled' : permission === 'denied' ? 'Denied' : 'Not requested'}\n              </p>\n            </div>\n            {permission !== 'granted' && (\n              <Button\n                onClick={handlePermissionRequest}\n                disabled={isLoading}\n                variant=\"outline\"\n              >\n                {isLoading ? 'Requesting...' : 'Enable Notifications'}\n              </Button>\n            )}\n          </div>\n\n          {permission === 'granted' && (\n            <>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label>Subscription Status</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {subscription ? 'Active' : 'Inactive'}\n                  </p>\n                </div>\n                <Button\n                  onClick={subscription ? unsubscribe : subscribe}\n                  variant=\"outline\"\n                >\n                  {subscription ? 'Unsubscribe' : 'Subscribe'}\n                </Button>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label>Test Notifications</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Send a test notification to verify everything is working\n                  </p>\n                </div>\n                <Button\n                  onClick={handleTestNotification}\n                  disabled={isTestingNotification || !subscription}\n                  variant=\"outline\"\n                >\n                  <TestTube className=\"h-4 w-4 mr-2\" />\n                  {isTestingNotification ? 'Sending...' : 'Send Test'}\n                </Button>\n              </div>\n            </>\n          )}\n        </CardContent>\n      </Card>\n\n      {permission === 'granted' && subscription && rules && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Notification Rules</CardTitle>\n            <CardDescription>\n              Configure which types of notifications you want to receive.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {rules.map((rule) => (\n              <div key={rule.id} className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label>{rule.name}</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {rule.description}\n                  </p>\n                </div>\n                <Switch\n                  checked={rule.enabled}\n                  onCheckedChange={(enabled) => handleRuleUpdate(rule.id, enabled)}\n                />\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":6331},"client/src/components/order-form.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertOrderSchema } from \"@shared/schema\";\nimport {\n  Form,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\nimport { z } from \"zod\";\n\nconst orderFormSchema = z.object({\n  customerName: z.string().min(1, \"Customer name is required\"),\n  customerEmail: z.string().email(\"Invalid email\").optional().or(z.literal(\"\")),\n  customerPhone: z.string().optional(),\n  company: z.string().optional(),\n  totalAmount: z.string().min(1, \"Total amount is required\"),\n  dueDate: z.string().optional(),\n  notes: z.string().optional(),\n  items: z\n    .array(\n      z.object({\n        productId: z.string().min(1, \"Product is required\"),\n        quantity: z.string().min(1, \"Quantity is required\"),\n        unitPrice: z.string().min(1, \"Unit price is required\"),\n      }),\n    )\n    .min(1, \"At least one item is required\"),\n});\n\ninterface OrderFormProps {\n  onSuccess?: () => void;\n}\n\nexport default function OrderForm({ onSuccess }: OrderFormProps) {\n  const { toast } = useToast();\n  const { formatCurrency, symbol } = useCurrency();\n\n  const { data: products = [] } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  const form = useForm({\n    resolver: zodResolver(orderFormSchema),\n    defaultValues: {\n      customerName: \"\",\n      customerEmail: \"\",\n      customerPhone: \"\",\n      company: \"\",\n      totalAmount: \"\",\n      dueDate: \"\",\n      notes: \"\",\n      items: [{ productId: \"\", quantity: \"\", unitPrice: \"\" }],\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"items\",\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: any) => {\n      console.log(\"Order form data:\", data);\n\n      // Validate items\n      if (!data.items || data.items.length === 0) {\n        throw new Error(\"At least one item is required\");\n      }\n\n      const transformedData = {\n        customerName: data.customerName.trim(),\n        customerEmail:\n          data.customerEmail && data.customerEmail.trim()\n            ? data.customerEmail.trim()\n            : null,\n        customerPhone:\n          data.customerPhone && data.customerPhone.trim()\n            ? data.customerPhone.trim()\n            : null,\n        company:\n          data.company && data.company.trim() ? data.company.trim() : null,\n        totalAmount: data.totalAmount,\n        dueDate: data.dueDate || null,\n        notes: data.notes && data.notes.trim() ? data.notes.trim() : null,\n        status: \"pending\",\n        items: data.items.map((item: any) => {\n          const product = products.find((p: any) => p.id.toString() === item.productId);\n          return {\n            productId: item.productId,\n            quantity: item.quantity,\n            unitPrice: item.unitPrice,\n            unit: product?.unit || null,\n            unitId: product?.unitId || null,\n          };\n        }),\n      };\n\n      console.log(\"Transformed order data:\", transformedData);\n      return apiRequest(\"POST\", \"/api/orders\", transformedData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/dashboard/recent-orders\"],\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Order created successfully\",\n      });\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      console.error(\"Order creation error:\", error);\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create order\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const calculateTotal = () => {\n    const items = form.getValues(\"items\");\n    const total = items.reduce((sum, item) => {\n      const quantity = parseFloat(item.quantity || \"0\");\n      const unitPrice = parseFloat(item.unitPrice || \"0\");\n      return sum + quantity * unitPrice;\n    }, 0);\n\n    form.setValue(\"totalAmount\", total.toFixed(2));\n  };\n\n  const updateItemPrice = (index: number, productId: string) => {\n    const product = products.find((p: any) => p.id.toString() === productId);\n    if (product) {\n      form.setValue(`items.${index}.unitPrice`, product.price.toString());\n      calculateTotal();\n    }\n  };\n\n  // Auto-calculate total when items change\n  const watchedItems = form.watch(\"items\");\n  React.useEffect(() => {\n    calculateTotal();\n  }, [watchedItems]);\n\n  return (\n    <Form {...form}>\n      <form\n        onSubmit={form.handleSubmit((data) => mutation.mutate(data))}\n        className=\"space-y-6\"\n      >\n        {/* Customer Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Customer Information</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"customerName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Customer Name *</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter customer name\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"customerEmail\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"customer@example.com\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"customerPhone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Phone</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Phone number\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"company\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Company (Optional)</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Company name\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </CardContent>\n        </Card>\n\n        {/* Order Items */}\n        <div className=\"overflow-x-auto rounded-lg border border-gray-200 shadow-sm\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50 text-sm font-semibold text-gray-700 uppercase tracking-wider\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Product\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Quantity\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Unit\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Unit Price ({symbol})\n                </th>\n                <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {fields.map((field, index) => (\n                <tr key={field.id}>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <FormField\n                      control={form.control}\n                      name={`items.${index}.productId`}\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormControl>\n                            <Select\n                              onValueChange={(value) => {\n                                field.onChange(value);\n                                updateItemPrice(index, value);\n                              }}\n                              value={field.value}\n                            >\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select product\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {products.map((product: any) => (\n                                  <SelectItem\n                                    key={product.id}\n                                    value={product.id.toString()}\n                                  >\n                                    {product.name}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </td>\n\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <FormField\n                      control={form.control}\n                      name={`items.${index}.quantity`}\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              placeholder=\"1\"\n                              {...field}\n                              onChange={(e) => {\n                                field.onChange(e);\n                                calculateTotal();\n                              }}\n                              className=\"w-24\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </td>\n\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm text-gray-600\">\n                      {(() => {\n                        const productId = form.watch(`items.${index}.productId`);\n                        const product = products.find((p: any) => p.id.toString() === productId);\n                        return product?.unitAbbreviation || product?.unit || \"N/A\";\n                      })()}\n                    </div>\n                  </td>\n\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <FormField\n                      control={form.control}\n                      name={`items.${index}.unitPrice`}\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              step=\"0.01\"\n                              placeholder=\"8.50\"\n                              {...field}\n                              onChange={(e) => {\n                                field.onChange(e);\n                                calculateTotal();\n                              }}\n                              className=\"w-24\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </td>\n\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => {\n                        remove(index);\n                        calculateTotal();\n                      }}\n                      disabled={fields.length === 1}\n                    >\n                      Remove\n                    </Button>\n                  </td>\n                </tr>\n              ))}\n\n              {/* Add Item Button Row */}\n              <tr>\n                <td colSpan={5} className=\"px-6 py-4 text-right\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() =>\n                      append({ productId: \"\", quantity: \"\", unitPrice: \"\" })\n                    }\n                  >\n                    Add Item\n                  </Button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        {/* Order Summary */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Order Summary</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"totalAmount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Total Amount ({symbol})</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        {...field}\n                        readOnly\n                        className=\"bg-gray-50 font-semibold text-lg\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"dueDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Due Date</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notes</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Special instructions or requests...\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </CardContent>\n        </Card>\n\n        <div className=\"flex justify-end space-x-2\">\n          <Button type=\"button\" variant=\"outline\" onClick={onSuccess}>\n            Cancel\n          </Button>\n          <Button type=\"submit\" disabled={mutation.isPending}>\n            {mutation.isPending ? \"Creating...\" : \"Create Order\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}","size_bytes":16675},"client/src/components/permission-wrapper.tsx":{"content":"\nimport { usePermissions } from \"@/hooks/usePermissions\";\nimport { ReactNode } from \"react\";\n\ninterface PermissionWrapperProps {\n  resource: string;\n  action: 'read' | 'write' | 'read_write';\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\nexport function PermissionWrapper({ \n  resource, \n  action, \n  children, \n  fallback = null \n}: PermissionWrapperProps) {\n  const { hasPermission, isLoading } = usePermissions();\n\n  if (isLoading) {\n    return <div className=\"animate-pulse bg-gray-200 h-4 w-full rounded\"></div>;\n  }\n\n  if (!hasPermission(resource, action)) {\n    return <>{fallback}</>;\n  }\n\n  return <>{children}</>;\n}\n\ninterface ReadOnlyWrapperProps {\n  resource: string;\n  children: ReactNode;\n  readOnlyContent?: ReactNode;\n}\n\nexport function ReadOnlyWrapper({ \n  resource, \n  children, \n  readOnlyContent \n}: ReadOnlyWrapperProps) {\n  const { canWrite, canReadWrite } = usePermissions();\n\n  if (canWrite(resource) || canReadWrite(resource)) {\n    return <>{children}</>;\n  }\n\n  return <>{readOnlyContent || children}</>;\n}\n","size_bytes":1038},"client/src/components/product-form-enhanced.tsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertProductSchema } from \"@shared/schema\";\nimport {\n  Form,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport MediaLibrary from \"./media-library\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Calculator, Plus, Trash2 } from \"lucide-react\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\nimport { useUnits } from \"@/hooks/useUnits\";\nimport { z } from \"zod\";\n\nconst productFormSchema = insertProductSchema.extend({\n  categoryId: z.string().optional(),\n  unitId: z.string().optional(),\n  price: z.string().min(1, \"Price is required\"),\n  cost: z.string().min(1, \"Cost is required\"),\n  margin: z.string().min(1, \"Margin is required\"),\n\n  ingredients: z\n    .array(\n      z.object({\n        inventoryItemId: z.string().min(1, \"Ingredient is required\"),\n        quantity: z.string().min(1, \"Quantity is required\"),\n      }),\n    )\n    .default([]),\n});\n\ninterface ProductFormProps {\n  product?: any;\n  onSuccess?: () => void;\n}\n\nexport default function ProductFormEnhanced({\n  product,\n  onSuccess,\n}: ProductFormProps) {\n  const [showMediaLibrary, setShowMediaLibrary] = useState(false);\n  const [selectedImage, setSelectedImage] = useState<string>(\"\");\n  const [activeTab, setActiveTab] = useState(\"basic\");\n  const [calculations, setCalculations] = useState({\n    subTotalForBatch: 0,\n    totalForProduction: 0,\n    effectiveUnits: 0,\n    rmCostPerUnit: 0,\n    effectiveUnitsProduced: 0,\n    estimatedCostPerUnit: 0,\n    mfgCostPerUnit: 0,\n    overheadCostPerUnit: 0,\n    finalCostPerUnit: 0,\n  });\n  const { toast } = useToast();\n  const { symbol, formatCurrency } = useCurrency();\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: units = [] } = useUnits();\n\n  const { data: inventoryItems = [] } = useQuery({\n    queryKey: [\"/api/inventory/all\"],\n    queryFn: () => apiRequest(\"GET\", \"/api/inventory/all\"),\n  });\n\n  const form = useForm({\n    resolver: zodResolver(productFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      categoryId: \"\",\n      unitId: \"\",\n      price: \"\",\n      cost: \"\",\n      margin: \"\",\n      sku: \"\",\n      batchSize: \"1\",\n      finishedGoodRequired: \"1\",\n      productionQuantity: \"1\",\n      normalLossMfg: \"5\",\n      normalLossOnSold: \"0\",\n      mfgAndPackagingCost: \"45\",\n      overheadCost: \"5\",\n      ingredients: [],\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"ingredients\",\n  });\n\n  useEffect(() => {\n    if (product) {\n      form.reset({\n        name: product.name || \"\",\n        description: product.description || \"\",\n        categoryId: product.categoryId?.toString() || \"\",\n        unitId: product.unitId?.toString() || \"\",\n        price: product.price?.toString() || \"\",\n        cost: product.cost?.toString() || \"\",\n        margin: product.margin?.toString() || \"\",\n        sku: product.sku || \"\",\n        batchSize: \"1\",\n        finishedGoodRequired: \"1\",\n        productionQuantity: \"1\",\n        normalLossMfg: \"5\",\n        normalLossOnSold: \"0\",\n        mfgAndPackagingCost: \"45\",\n        overheadCost: \"5\",\n        ingredients: [],\n      });\n      setSelectedImage(product.imageUrl || \"\");\n    }\n  }, [product, form]);\n\n  const mutation = useMutation({\n    mutationFn: async (data: any) => {\n      const transformedData = {\n        ...data,\n        categoryId: data.categoryId ? parseInt(data.categoryId) : null,\n        unitId: data.unitId ? parseInt(data.unitId) : null,\n        price: parseFloat(data.price),\n        cost: parseFloat(data.cost),\n        margin: parseFloat(data.margin),\n        imageUrl: selectedImage || null,\n      };\n\n      if (product) {\n        await apiRequest(\"PUT\", `/api/products/${product.id}`, transformedData);\n      } else {\n        await apiRequest(\"POST\", \"/api/products\", transformedData);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: product\n          ? \"Product updated successfully\"\n          : \"Product created successfully\",\n      });\n      onSuccess?.();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: product\n          ? \"Failed to update product\"\n          : \"Failed to create product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const calculateMargin = () => {\n    const price = parseFloat(form.getValues(\"price\") || \"0\");\n    const cost = parseFloat(form.getValues(\"cost\") || \"0\");\n\n    if (price > 0 && cost > 0) {\n      const margin = price - cost;\n      form.setValue(\"margin\", margin.toFixed(2));\n    }\n  };\n\n  const calculateCosts = () => {\n    const formData = form.getValues();\n    const ingredients = formData.ingredients || [];\n\n    if (ingredients.length === 0) return;\n\n    const batchSize = parseFloat(formData.batchSize || \"1\");\n    const productionQuantity = parseFloat(formData.productionQuantity || \"1\");\n    const normalLossMfg = parseFloat(formData.normalLossMfg || \"5\");\n    const mfgAndPackagingCost = parseFloat(\n      formData.mfgAndPackagingCost || \"45\",\n    );\n    const overheadCost = parseFloat(formData.overheadCost || \"5\");\n\n    let subTotalForBatch = 0;\n\n    ingredients.forEach((ingredient: any) => {\n      const item = (inventoryItems as any[]).find(\n        (item: any) => item.id.toString() === ingredient.inventoryItemId,\n      );\n      if (item) {\n        const quantity = parseFloat(ingredient.quantity || \"0\");\n        const cost = parseFloat(item.costPerUnit || \"0\");\n        subTotalForBatch += quantity * cost;\n      }\n    });\n\n    const totalForProduction = subTotalForBatch * productionQuantity;\n    const effectiveUnits = batchSize * productionQuantity;\n    const rmCostPerUnit = totalForProduction / effectiveUnits;\n    const effectiveUnitsProduced = effectiveUnits * (1 - normalLossMfg / 100);\n    const estimatedCostPerUnit = totalForProduction / effectiveUnitsProduced;\n    const mfgCostPerUnit = estimatedCostPerUnit * (mfgAndPackagingCost / 100);\n    const overheadCostPerUnit = estimatedCostPerUnit * (overheadCost / 100);\n    const finalCostPerUnit =\n      estimatedCostPerUnit + mfgCostPerUnit + overheadCostPerUnit;\n\n    setCalculations({\n      subTotalForBatch,\n      totalForProduction,\n      effectiveUnits,\n      rmCostPerUnit,\n      effectiveUnitsProduced,\n      estimatedCostPerUnit,\n      mfgCostPerUnit,\n      overheadCostPerUnit,\n      finalCostPerUnit,\n    });\n\n    // Auto-update cost field\n    form.setValue(\"cost\", finalCostPerUnit.toFixed(2));\n  };\n\n  useEffect(() => {\n    calculateCosts();\n  }, [\n    form.watch(\"ingredients\"),\n    form.watch(\"batchSize\"),\n    form.watch(\"productionQuantity\"),\n    form.watch(\"normalLossMfg\"),\n    form.watch(\"mfgAndPackagingCost\"),\n    form.watch(\"overheadCost\"),\n  ]);\n\n  return (\n    <Form {...form}>\n      <form\n        onSubmit={form.handleSubmit((data) => mutation.mutate(data))}\n        className=\"space-y-6\"\n      >\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsContent value=\"basic\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Product Details</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Product Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Bread\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"categoryId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category</FormLabel>\n                        <Select\n                          onValueChange={field.onChange}\n                          value={field.value}\n                        >\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select a category\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {(categories as any[]).map((category: any) => (\n                              <SelectItem\n                                key={category.id}\n                                value={category.id.toString()}\n                              >\n                                {category.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"unitId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Unit</FormLabel>\n                        <Select\n                          onValueChange={field.onChange}\n                          value={field.value}\n                        >\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select a unit\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {Array.isArray(units) && units.length > 0 ? (\n                              units.map((unit: any) => (\n                                <SelectItem\n                                  key={unit.id}\n                                  value={unit.id.toString()}\n                                >\n                                  {unit.name} ({unit.abbreviation})\n                                </SelectItem>\n                              ))\n                            ) : (\n                              <SelectItem value=\"none\" disabled>\n                                No units available\n                              </SelectItem>\n                            )}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"sku\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>SKU (Optional)</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"350G\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea placeholder=\"Making Process...\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Product Image */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Product Image</label>\n                  <div className=\"flex items-center gap-4\">\n                    {selectedImage ? (\n                      <div className=\"relative\">\n                        <img\n                          src={selectedImage}\n                          alt=\"Product preview\"\n                          className=\"w-20 h-20 object-cover rounded-lg border\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"absolute -top-2 -right-2 h-6 w-6 rounded-full p-0\"\n                          onClick={() => setSelectedImage(\"\")}\n                        >\n                          √ó\n                        </Button>\n                      </div>\n                    ) : (\n                      <div className=\"w-20 h-20 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center\">\n                        <span className=\"text-gray-400 text-xs\">No image</span>\n                      </div>\n                    )}\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setShowMediaLibrary(true)}\n                    >\n                      Select Image\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"cost\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>\n                          Cost Price ({symbol})\n                          {calculations.finalCostPerUnit > 0 && (\n                            <Badge variant=\"secondary\" className=\"ml-2\">\n                              Calculated:{\" \"}\n                              {formatCurrency(calculations.finalCostPerUnit)}\n                            </Badge>\n                          )}\n                        </FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            {...field}\n                            onBlur={() => {\n                              field.onBlur();\n                              calculateMargin();\n                            }}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"price\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Selling Price ({symbol})</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            {...field}\n                            onBlur={() => {\n                              field.onBlur();\n                              calculateMargin();\n                            }}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"margin\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Margin Price ({symbol})</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            {...field}\n                            readOnly\n                            className=\"bg-gray-50\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"recipe\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Recipe</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Calculate product cost based on ingredients and production\n                  parameters\n                </p>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Production Parameters */}\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"batchSize\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Batch Size</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" step=\"0.01\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"productionQuantity\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Production Quantity</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" step=\"0.01\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"normalLossMfg\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Normal Loss Mfg (%)</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" step=\"0.01\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"mfgAndPackagingCost\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Mfg & Packaging (%)</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" step=\"0.01\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Ingredients Section */}\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-medium\">Ingredients</h3>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() =>\n                        append({ inventoryItemId: \"\", quantity: \"\" })\n                      }\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Ingredient\n                    </Button>\n                  </div>\n\n                  {fields.map((field, index) => (\n                    <div key={field.id} className=\"flex gap-4 items-end\">\n                      <div className=\"flex-1\">\n                        <FormField\n                          control={form.control}\n                          name={`ingredients.${index}.inventoryItemId`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Ingredient</FormLabel>\n                              <Select\n                                onValueChange={field.onChange}\n                                value={field.value}\n                              >\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select ingredient\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {(inventoryItems as any[]).map(\n                                    (item: any) => (\n                                      <SelectItem\n                                        key={item.id}\n                                        value={item.id.toString()}\n                                      >\n                                        {item.name} -{\" \"}\n                                        {formatCurrency(item.costPerUnit)}/\n                                        {item.unit}\n                                      </SelectItem>\n                                    ),\n                                  )}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"w-32\">\n                        <FormField\n                          control={form.control}\n                          name={`ingredients.${index}.quantity`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Quantity</FormLabel>\n                              <FormControl>\n                                <Input type=\"number\" step=\"0.01\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => remove(index)}\n                        className=\"mb-2\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n\n                <Separator />\n\n                {/* Cost Summary */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium\">Cost Breakdown</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span>Subtotal for Batch:</span>\n                        <span>\n                          {formatCurrency(calculations.subTotalForBatch)}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Total for Production:</span>\n                        <span>\n                          {formatCurrency(calculations.totalForProduction)}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>RM Cost per Unit:</span>\n                        <span>\n                          {formatCurrency(calculations.rmCostPerUnit)}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Estimated Cost per Unit:</span>\n                        <span>\n                          {formatCurrency(calculations.estimatedCostPerUnit)}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span>Mfg Cost per Unit:</span>\n                        <span>\n                          {formatCurrency(calculations.mfgCostPerUnit)}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Overhead Cost per Unit:</span>\n                        <span>\n                          {formatCurrency(calculations.overheadCostPerUnit)}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between font-semibold border-t pt-2\">\n                        <span>Final Cost per Unit:</span>\n                        <span>\n                          {formatCurrency(calculations.finalCostPerUnit)}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        <div className=\"flex justify-end space-x-2 pt-4\">\n          <Button type=\"button\" variant=\"outline\" onClick={onSuccess}>\n            Cancel\n          </Button>\n          <Button type=\"submit\" disabled={mutation.isPending}>\n            {mutation.isPending && (\n              <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n            )}\n            {product ? \"Update\" : \"Create\"} Product\n          </Button>\n        </div>\n\n        <MediaLibrary\n          isOpen={showMediaLibrary}\n          onClose={() => setShowMediaLibrary(false)}\n          onSelect={(imageUrl) => setSelectedImage(imageUrl)}\n        />\n      </form>\n    </Form>\n  );\n}","size_bytes":27034},"client/src/components/product-form.tsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertProductSchema } from \"@shared/schema\";\nimport {\n  Form,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport MediaLibrary from \"./media-library\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Calculator, Plus, Trash2 } from \"lucide-react\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\nimport { useUnits } from \"@/hooks/useUnits\";\nimport { z } from \"zod\";\n\nconst productFormSchema = insertProductSchema.extend({\n  categoryId: z.string().optional(),\n  unitId: z.string().optional(),\n  price: z.string().min(1, \"Price is required\"),\n  cost: z.string().min(1, \"Cost is required\"),\n  margin: z.string().min(1, \"Margin is required\"),\n  // Cost calculator fields\n  batchSize: z.string().default(\"1\"),\n  finishedGoodRequired: z.string().default(\"1\"),\n  productionQuantity: z.string().default(\"1\"),\n  normalLossMfg: z.string().default(\"5\"),\n  normalLossOnSold: z.string().default(\"0\"),\n  mfgAndPackagingCost: z.string().default(\"45\"),\n  overheadCost: z.string().default(\"5\"),\n  ingredients: z\n    .array(\n      z.object({\n        inventoryItemId: z.string().min(1, \"Ingredient is required\"),\n        quantity: z.string().min(1, \"Quantity is required\"),\n      }),\n    )\n    .default([]),\n});\n\ninterface ProductFormProps {\n  product?: any;\n  onSuccess?: () => void;\n}\n\nexport default function ProductForm({ product, onSuccess }: ProductFormProps) {\n  const [showMediaLibrary, setShowMediaLibrary] = useState(false);\n  const [selectedImage, setSelectedImage] = useState<string>(\"\");\n  const [activeTab, setActiveTab] = useState(\"basic\");\n  const [calculations, setCalculations] = useState({\n    subTotalForBatch: 0,\n    totalForProduction: 0,\n    effectiveUnits: 0,\n    rmCostPerUnit: 0,\n    effectiveUnitsProduced: 0,\n    estimatedCostPerUnit: 0,\n    mfgCostPerUnit: 0,\n    overheadCostPerUnit: 0,\n    finalCostPerUnit: 0,\n  });\n  const { toast } = useToast();\n  const { symbol, formatCurrency } = useCurrency();\n\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery({\n    queryKey: [\"categories\"],\n    queryFn: () => apiRequest(\"GET\", \"/api/categories\"),\n  });\n\n  const { data: units = [], isLoading: unitsLoading } = useUnits();\n\n  const { data: inventoryItems = [] } = useQuery({\n    queryKey: [\"/api/inventory/all\"],\n    queryFn: () => apiRequest(\"GET\", \"/api/inventory/all\"),\n  });\n\n  const form = useForm({\n    resolver: zodResolver(productFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      categoryId: \"\",\n      unitId: \"\",\n      price: \"\",\n      cost: \"\",\n      margin: \"\",\n      sku: \"\",\n      batchSize: \"1\",\n      finishedGoodRequired: \"1\",\n      productionQuantity: \"1\",\n      normalLossMfg: \"5\",\n      normalLossOnSold: \"0\",\n      mfgAndPackagingCost: \"45\",\n      overheadCost: \"5\",\n      ingredients: [],\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"ingredients\",\n  });\n\n  useEffect(() => {\n    if (product) {\n      form.reset({\n        name: product.name || \"\",\n        description: product.description || \"\",\n        categoryId: product.categoryId?.toString() || \"\",\n        unitId: product.unitId?.toString() || \"\",\n        price: product.price?.toString() || \"\",\n        cost: product.cost?.toString() || \"\",\n        margin: product.margin?.toString() || \"\",\n        sku: product.sku || \"\",\n      });\n      setSelectedImage(product.imageUrl || \"\");\n    }\n  }, [product, form]);\n\n  const mutation = useMutation({\n    mutationFn: async (data: any) => {\n      const transformedData = {\n        ...data,\n        categoryId: data.categoryId ? parseInt(data.categoryId) : null,\n        unitId: data.unitId ? parseInt(data.unitId) : null,\n        price: parseFloat(data.price),\n        cost: parseFloat(data.cost),\n        margin: parseFloat(data.margin),\n        imageUrl: selectedImage || null,\n      };\n\n      if (product) {\n        await apiRequest(\"PUT\", `/api/products/${product.id}`, transformedData);\n      } else {\n        await apiRequest(\"POST\", \"/api/products\", transformedData);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: product\n          ? \"Product updated successfully\"\n          : \"Product created successfully\",\n      });\n      onSuccess?.();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: product\n          ? \"Failed to update product\"\n          : \"Failed to create product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const calculateMargin = () => {\n    const price = parseFloat(form.getValues(\"price\") || \"0\");\n    const cost = parseFloat(form.getValues(\"cost\") || \"0\");\n\n    if (price > 0 && cost > 0) {\n      const margin = price - cost;\n      form.setValue(\"margin\", margin.toFixed(2));\n    }\n  };\n\n  const calculateCosts = () => {\n    const formData = form.getValues();\n    const ingredients = formData.ingredients || [];\n\n    if (ingredients.length === 0) return;\n\n    const batchSize = parseFloat(formData.batchSize || \"1\");\n    const finishedGoodRequired = parseFloat(\n      formData.finishedGoodRequired || \"1\",\n    );\n    const productionQuantity = parseFloat(formData.productionQuantity || \"1\");\n    const normalLossMfg = parseFloat(formData.normalLossMfg || \"5\");\n    const normalLossOnSold = parseFloat(formData.normalLossOnSold || \"0\");\n    const mfgAndPackagingCost = parseFloat(\n      formData.mfgAndPackagingCost || \"45\",\n    );\n    const overheadCost = parseFloat(formData.overheadCost || \"5\");\n\n    let subTotalForBatch = 0;\n\n    ingredients.forEach((ingredient: any) => {\n      const item = (inventoryItems as any[]).find(\n        (item: any) => item.id.toString() === ingredient.inventoryItemId,\n      );\n      if (item) {\n        const quantity = parseFloat(ingredient.quantity || \"0\");\n        const cost = parseFloat(item.costPerUnit || \"0\");\n        subTotalForBatch += quantity * cost;\n      }\n    });\n\n    const totalForProduction = subTotalForBatch * productionQuantity;\n    const totalForProductionGm = totalForProduction / 1000;\n    const effectiveUnits = batchSize * productionQuantity;\n    const rmCostPerUnit = totalForProduction / effectiveUnits;\n    const effectiveUnitsProduced = effectiveUnits * (1 - normalLossMfg / 100);\n    const estimatedCostPerUnit = totalForProduction / effectiveUnitsProduced;\n    const mfgCostPerUnit = estimatedCostPerUnit * (mfgAndPackagingCost / 100);\n    const overheadCostPerUnit = estimatedCostPerUnit * (overheadCost / 100);\n    const finalCostPerUnit =\n      estimatedCostPerUnit + mfgCostPerUnit + overheadCostPerUnit;\n\n    setCalculations({\n      subTotalForBatch,\n      totalForProduction,\n      effectiveUnits,\n      rmCostPerUnit,\n      effectiveUnitsProduced,\n      estimatedCostPerUnit,\n      mfgCostPerUnit,\n      overheadCostPerUnit,\n      finalCostPerUnit,\n    });\n\n    // Auto-update cost field\n    form.setValue(\"cost\", finalCostPerUnit.toFixed(2));\n  };\n\n  useEffect(() => {\n    calculateCosts();\n  }, [\n    form.watch(\"ingredients\"),\n    form.watch(\"batchSize\"),\n    form.watch(\"productionQuantity\"),\n    form.watch(\"normalLossMfg\"),\n    form.watch(\"mfgAndPackagingCost\"),\n    form.watch(\"overheadCost\"),\n  ]);\n\n  return (\n    <Form {...form}>\n      <form\n        onSubmit={form.handleSubmit((data) => mutation.mutate(data))}\n        className=\"space-y-6\"\n      >\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsContent value=\"basic\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Product Details</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Product Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Bread\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"categoryId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category</FormLabel>\n                        <Select\n                          onValueChange={field.onChange}\n                          value={field.value}\n                        >\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select a category\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {categories.map((category: any) => (\n                              <SelectItem\n                                key={category.id}\n                                value={category.id.toString()}\n                              >\n                                {category.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"unitId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Unit</FormLabel>\n                        <Select\n                          onValueChange={field.onChange}\n                          value={field.value}\n                        >\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select a unit\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {unitsLoading ? (\n                              <SelectItem value=\"loading\" disabled>\n                                Loading units...\n                              </SelectItem>\n                            ) : Array.isArray(units) && units.length > 0 ? (\n                              units\n                                .filter((unit: any) => unit.isActive)\n                                .map((unit: any) => (\n                                  <SelectItem\n                                    key={unit.id}\n                                    value={unit.id.toString()}\n                                  >\n                                    {unit.name} ({unit.abbreviation})\n                                  </SelectItem>\n                                ))\n                            ) : (\n                              <SelectItem value=\"none\" disabled>\n                                No units available\n                              </SelectItem>\n                            )}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"sku\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>SKU (Optional)</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"350G\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Product Image */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Product Image</label>\n                  <div className=\"flex items-center gap-4\">\n                    {selectedImage ? (\n                      <div className=\"relative\">\n                        <img\n                          src={selectedImage}\n                          alt=\"Product\"\n                          className=\"w-20 h-20 object-cover rounded-lg border\"\n                        />\n                        <Button\n                          type=\"button\"\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          className=\"absolute -top-2 -right-2 h-6 w-6 p-0\"\n                          onClick={() => setSelectedImage(\"\")}\n                        >\n                          √ó\n                        </Button>\n                      </div>\n                    ) : (\n                      <div className=\"w-20 h-20 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center\">\n                        <i className=\"fas fa-image text-gray-400 text-xl\"></i>\n                      </div>\n                    )}\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setShowMediaLibrary(true)}\n                      className=\"gap-2\"\n                    >\n                      <i className=\"fas fa-upload\"></i>\n                      {selectedImage ? \"Change Image\" : \"Select Image\"}\n                    </Button>\n                  </div>\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea placeholder=\"Making Process...\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"cost\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Cost Price ({symbol})</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            {...field}\n                            onBlur={() => {\n                              field.onBlur();\n                              calculateMargin();\n                            }}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"price\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Selling Price ({symbol})</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            {...field}\n                            onBlur={() => {\n                              field.onBlur();\n                              calculateMargin();\n                            }}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"margin\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Margin Price ({symbol})</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            {...field}\n                            readOnly\n                            className=\"bg-gray-50\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={onSuccess}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={mutation.isPending}>\n                    {mutation.isPending && (\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    )}\n                    {product ? \"Update\" : \"Create\"} Product\n                  </Button>\n                </div>\n\n                <MediaLibrary\n                  isOpen={showMediaLibrary}\n                  onClose={() => setShowMediaLibrary(false)}\n                  onSelect={(imageUrl) => setSelectedImage(imageUrl)}\n                />\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":18732},"client/src/components/profile-editor.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { User, Edit } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface ProfileEditorProps {\n  user: any;\n}\n\nexport default function ProfileEditor({ user }: ProfileEditorProps) {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [profileData, setProfileData] = useState({\n    firstName: user?.firstName || \"\",\n    lastName: user?.lastName || \"\",\n    email: user?.email || \"\",\n    currentPassword: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\",\n  });\n  const { toast } = useToast();\n\n  const updateMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"PUT\", \"/api/profile\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      setIsDialogOpen(false);\n      setProfileData(prev => ({\n        ...prev,\n        currentPassword: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\",\n      }));\n      toast({ title: \"Success\", description: \"Profile updated successfully\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (profileData.newPassword && profileData.newPassword !== profileData.confirmPassword) {\n      toast({\n        title: \"Error\",\n        description: \"New passwords don't match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const data: any = {\n      firstName: profileData.firstName,\n      lastName: profileData.lastName,\n      email: profileData.email,\n    };\n\n    if (profileData.newPassword) {\n      data.currentPassword = profileData.currentPassword;\n      data.newPassword = profileData.newPassword;\n    }\n\n    updateMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n      <DialogTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => {\n            setProfileData({\n              firstName: user?.firstName || \"\",\n              lastName: user?.lastName || \"\",\n              email: user?.email || \"\",\n              currentPassword: \"\",\n              newPassword: \"\",\n              confirmPassword: \"\",\n            });\n          }}\n        >\n          <Edit className=\"h-4 w-4 mr-2\" />\n          Edit Profile\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            Edit Profile\n          </DialogTitle>\n          <DialogDescription>\n            Update your personal information and password\n          </DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSave} className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"firstName\">First Name</Label>\n              <Input\n                id=\"firstName\"\n                value={profileData.firstName}\n                onChange={(e) => setProfileData({ ...profileData, firstName: e.target.value })}\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"lastName\">Last Name</Label>\n              <Input\n                id=\"lastName\"\n                value={profileData.lastName}\n                onChange={(e) => setProfileData({ ...profileData, lastName: e.target.value })}\n                required\n              />\n            </div>\n          </div>\n          <div>\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={profileData.email}\n              onChange={(e) => setProfileData({ ...profileData, email: e.target.value })}\n              required\n            />\n          </div>\n          <div className=\"border-t pt-4\">\n            <h4 className=\"text-sm font-medium mb-3\">Change Password (Optional)</h4>\n            <div className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"currentPassword\">Current Password</Label>\n                <Input\n                  id=\"currentPassword\"\n                  type=\"password\"\n                  value={profileData.currentPassword}\n                  onChange={(e) => setProfileData({ ...profileData, currentPassword: e.target.value })}\n                  placeholder=\"Enter current password\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"newPassword\">New Password</Label>\n                <Input\n                  id=\"newPassword\"\n                  type=\"password\"\n                  value={profileData.newPassword}\n                  onChange={(e) => setProfileData({ ...profileData, newPassword: e.target.value })}\n                  placeholder=\"Enter new password\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\n                <Input\n                  id=\"confirmPassword\"\n                  type=\"password\"\n                  value={profileData.confirmPassword}\n                  onChange={(e) => setProfileData({ ...profileData, confirmPassword: e.target.value })}\n                  placeholder=\"Confirm new password\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"flex justify-end space-x-2\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setIsDialogOpen(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={updateMutation.isPending}\n            >\n              Update Profile\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6774},"client/src/components/protected-page.tsx":{"content":"\nimport { ReactNode } from \"react\";\nimport { useRoleAccess } from \"@/hooks/useRoleAccess\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Shield, AlertTriangle } from \"lucide-react\";\n\ninterface ProtectedPageProps {\n  children: ReactNode;\n  resource: string;\n  action?: 'read' | 'write' | 'read_write';\n  fallback?: ReactNode;\n}\n\nexport function ProtectedPage({ \n  children, \n  resource, \n  action = 'read', \n  fallback \n}: ProtectedPageProps) {\n  const { canAccessPage } = useRoleAccess();\n\n  if (!canAccessPage(resource, action)) {\n    return fallback || (\n      <div className=\"flex items-center justify-center min-h-[400px] p-6\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"mx-auto w-16 h-16 bg-red-100 rounded-full flex items-center justify-center\">\n                <Shield className=\"h-8 w-8 text-red-600\" />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">Access Denied</h3>\n                <p className=\"text-gray-500 mt-2\">\n                  You don't have permission to access this page.\n                  Contact your administrator for access.\n                </p>\n              </div>\n              <div className=\"flex items-center justify-center text-sm text-amber-600 bg-amber-50 p-2 rounded-lg\">\n                <AlertTriangle className=\"h-4 w-4 mr-2\" />\n                Required: {action.replace('_', ' & ')} access to {resource.replace('_', ' ')}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":1701},"client/src/components/protected-route.tsx":{"content":"import { ReactNode } from \"react\";\nimport { usePermissions } from \"@/hooks/usePermissions\";\nimport { useRoleAccess } from \"@/hooks/useRoleAccess\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Shield, AlertTriangle } from \"lucide-react\";\n\ninterface ProtectedRouteProps {\n  resource: string;\n  action: \"read\" | \"write\" | \"read_write\";\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\nexport function ProtectedRoute({\n  resource,\n  action,\n  children,\n  fallback,\n}: ProtectedRouteProps) {\n  const { hasPermission, isLoading } = usePermissions();\n  const { isSuperAdmin } = useRoleAccess();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Checking permissions...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Superadmin has access to everything\n  if (isSuperAdmin()) {\n    return <>{children}</>;\n  }\n\n  // Check permissions for other roles\n  if (!hasPermission(resource, action)) {\n    return (\n      fallback || (\n        <div className=\"flex items-center justify-center min-h-[400px] p-6\">\n          <Card className=\"w-full max-w-md\">\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center space-y-4\">\n                <div className=\"mx-auto w-16 h-16 bg-red-100 rounded-full flex items-center justify-center\">\n                  <Shield className=\"h-8 w-8 text-red-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900\">\n                    Access Denied\n                  </h3>\n                  <p className=\"text-gray-500 mt-2\">\n                    You don't have permission to access this page. Contact your\n                    administrator for access.\n                  </p>\n                </div>\n                <div className=\"flex items-center justify-center text-sm text-amber-600 bg-amber-50 p-2 rounded-lg\">\n                  <AlertTriangle className=\"h-4 w-4 mr-2\" />\n                  Required: {action.replace(\"_\", \" & \")} access to{\" \"}\n                  {resource.replace(\"_\", \" \")}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )\n    );\n  }\n\n  if (!hasPermission(resource, action)) {\n    return (\n      fallback || (\n        <div className=\"flex items-center justify-center min-h-[400px] p-6\">\n          <Card className=\"w-full max-w-md\">\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center space-y-4\">\n                <div className=\"mx-auto w-16 h-16 bg-red-100 rounded-full flex items-center justify-center\">\n                  <Shield className=\"h-8 w-8 text-red-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900\">\n                    Access Denied\n                  </h3>\n                  <p className=\"text-gray-500 mt-2\">\n                    You don't have permission to {action}{\" \"}\n                    {resource.replace(\"_\", \" \")}. Contact your administrator for\n                    access.\n                  </p>\n                </div>\n                <div className=\"flex items-center justify-center text-sm text-amber-600 bg-amber-50 p-2 rounded-lg\">\n                  <AlertTriangle className=\"h-4 w-4 mr-2\" />\n                  Required: {action.replace(\"_\", \" & \")} access to{\" \"}\n                  {resource.replace(\"_\", \" \")}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )\n    );\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":3756},"client/src/components/public-order-form.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useForm, FormProvider, useFormContext } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\nimport { Plus, Minus, ShoppingCart, Upload, FileCheck, CheckCircle, AlertTriangle } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"; // Assuming these are available\n\n// Define the schema with added fields for file upload and terms\nconst orderFormSchema = z.object({\n  customerName: z.string().min(2, \"Name must be at least 2 characters\"),\n  customerEmail: z.string().email(\"Invalid email address\"),\n  customerPhone: z.string().min(10, \"Phone number must be at least 10 digits\"),\n  deliveryDate: z.string().min(1, \"Delivery date is required\"),\n  deliveryAddress: z\n    .string()\n    .min(10, \"Please provide complete delivery address\"),\n  specialInstructions: z.string().max(1000, \"Instructions cannot exceed 1000 characters\").optional(),\n  items: z\n    .array(\n      z.object({\n        productId: z.number(),\n        quantity: z.number().min(1, \"Quantity must be at least 1\"),\n        unitPrice: z.number(),\n        totalPrice: z.number(),\n      }),\n    )\n    .min(1, \"At least one item is required\"),\n  uploadedFiles: z.any().optional(), // For file metadata if needed by react-hook-form\n  agreeToTerms: z.boolean().refine((val) => val === true, {\n    message: \"You must agree to the terms and conditions\",\n  }),\n});\n\ntype OrderFormData = z.infer<typeof orderFormSchema>;\n\ninterface OrderItem {\n  productId: number;\n  productName: string;\n  quantity: number;\n  unitPrice: number;\n  totalPrice: number;\n}\n\n// --- Utility Functions ---\n\n// Function to simulate file upload and return file metadata\nconst simulateFileUpload = async (file: File): Promise<{ name: string; size: number; type: string }> => {\n  // In a real app, this would involve uploading to a server and returning a URL or identifier\n  console.log(`Simulating upload for: ${file.name}`);\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 500));\n  return { name: file.name, size: file.size, type: file.type };\n};\n\n// Function to handle queuing and retrying submissions\nconst submitOrderWithRetry = async (orderData: any, maxRetries: number = 3) => {\n  let retries = 0;\n  \n  // Add enhanced security and tracking data\n  const submissionData = {\n    ...orderData,\n    referenceId: `PUB-${Date.now()}-${Math.random().toString(36).substr(2, 5).toUpperCase()}`,\n    formVersion: \"2.0\",\n    submissionTimestamp: new Date().toISOString(),\n    submissionStart: Date.now(),\n    source: \"public_order_form\",\n    clientInfo: {\n      userAgent: navigator.userAgent,\n      language: navigator.language,\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    }\n  };\n\n  while (retries < maxRetries) {\n    try {\n      const response = await fetch(\"/api/public/orders\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify(submissionData),\n      });\n\n      const responseData = await response.json();\n      if (!response.ok) {\n        throw new Error(responseData.message || `Server error: ${response.status}`);\n      }\n      return responseData;\n    } catch (error: any) {\n      retries++;\n      console.error(`Submission attempt ${retries} failed:`, error.message);\n      if (retries >= maxRetries) {\n        throw error;\n      }\n      // Exponential backoff with jitter\n      const delay = Math.min(1000 * Math.pow(2, retries) + Math.random() * 1000, 10000);\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n};\n\n// --- Form Components ---\n\nfunction CustomerInfoSection() {\n  const { toast } = useToast();\n  const form = useFormContext<OrderFormData>();\n  const { register, formState: { errors }, setValue, watch } = form;\n  const submitOrderMutation = useMutation({\n    mutationFn: (data: OrderFormData) => submitOrderWithRetry(data),\n    onSuccess: (data) => {\n      toast({\n        title: \"üéâ Order Submitted Successfully!\",\n        description: `Order ${data.orderNumber} has been received. We'll contact you soon with confirmation details.`,\n        duration: 6000,\n      });\n      form.reset({\n        customerName: \"\", customerEmail: \"\", customerPhone: \"\", deliveryDate: \"\", deliveryAddress: \"\",\n        specialInstructions: \"\", items: [], uploadedFiles: [], agreeToTerms: false\n      });\n      setOrderItems([]);\n      setUploadedFiles([]);\n      setSelectedProduct(null);\n      setQuantity(1);\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"‚ùå Order Submission Failed\",\n        description: error.message || \"There was an error submitting your order. Please check your information and try again.\",\n        variant: \"destructive\",\n        duration: 8000,\n      });\n    },\n  });\n\n  const { data: products = [] } = useQuery({ queryKey: [\"/api/products\"] });\n  const { data: units = [] } = useQuery({ queryKey: [\"/api/units\"] });\n  const [orderItems, setOrderItems] = useState<OrderItem[]>([]);\n  const [selectedProduct, setSelectedProduct] = useState<number | null>(null);\n  const [quantity, setQuantity] = useState(1);\n\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n\n  const addItemToOrder = () => {\n    if (!selectedProduct) return;\n    const product = products.find((p: any) => p.id === selectedProduct);\n    if (!product) return;\n\n    const existingItemIndex = orderItems.findIndex((item) => item.productId === selectedProduct);\n\n    if (existingItemIndex >= 0) {\n      const updatedItems = [...orderItems];\n      updatedItems[existingItemIndex].quantity += quantity;\n      updatedItems[existingItemIndex].totalPrice = updatedItems[existingItemIndex].quantity * parseFloat(product.price);\n      setOrderItems(updatedItems);\n    } else {\n      const newItem: OrderItem = {\n        productId: selectedProduct,\n        productName: product.name,\n        quantity,\n        unitPrice: parseFloat(product.price),\n        totalPrice: quantity * parseFloat(product.price),\n      };\n      setOrderItems([...orderItems, newItem]);\n    }\n    setSelectedProduct(null);\n    setQuantity(1);\n  };\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    const newFiles: File[] = [];\n    const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB\n    const MAX_FILES = 10;\n\n    for (const file of files) {\n      if (uploadedFiles.length + newFiles.length >= MAX_FILES) {\n        toast({\n          title: \"Too Many Files\",\n          description: `You can only upload up to ${MAX_FILES} files.`,\n          variant: \"destructive\",\n        });\n        break;\n      }\n      if (file.size > MAX_FILE_SIZE) {\n        toast({\n          title: \"File Too Large\",\n          description: `File \"${file.name}\" exceeds the 10MB limit.`,\n          variant: \"destructive\",\n        });\n        continue;\n      }\n      if (!['image/*', 'application/pdf', 'text/plain', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'].includes(file.type)) {\n        toast({\n          title: \"Invalid File Type\",\n          description: `File \"${file.name}\" has an unsupported type.`,\n          variant: \"destructive\",\n        });\n        continue;\n      }\n      newFiles.push(file);\n    }\n\n    if (newFiles.length > 0) {\n      const uploadedMetadata = await Promise.all(newFiles.map(simulateFileUpload));\n      setUploadedFiles((prevFiles) => [...prevFiles, ...newFiles]);\n      // Update form with file metadata if needed by your schema\n      setValue(\"uploadedFiles\", [...uploadedFiles, ...newFiles]);\n    }\n  };\n\n  const removeFile = (indexToRemove: number) => {\n    setUploadedFiles((prevFiles) =>\n      prevFiles.filter((_, index) => index !== indexToRemove)\n    );\n    setValue(\"uploadedFiles\", uploadedFiles.filter((_, index) => index !== indexToRemove));\n  };\n\n  const onSubmit = (data: OrderFormData) => {\n    // Comprehensive validation\n    if (orderItems.length === 0) {\n      toast({\n        title: \"‚ùå No Items Selected\",\n        description: \"Please add at least one item to your order to proceed.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const deliveryDate = new Date(data.deliveryDate);\n    const minDeliveryDate = new Date();\n    minDeliveryDate.setHours(minDeliveryDate.getHours() + 24);\n\n    if (deliveryDate < minDeliveryDate) {\n      toast({\n        title: \"‚è∞ Invalid Delivery Date\",\n        description: \"Delivery date must be at least 24 hours from now to ensure proper preparation time.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Enhanced validation\n    const validationResult = orderFormSchema.safeParse(data);\n    if (!validationResult.success) {\n      const firstError = validationResult.error.errors[0];\n      toast({\n        title: \"üìã Please Check Your Information\",\n        description: firstError.message,\n        variant: \"destructive\",\n      });\n      console.error(\"Validation errors:\", validationResult.error.errors);\n      return;\n    }\n\n    // Validate total amount\n    const calculatedTotal = orderItems.reduce((sum, item) => sum + item.totalPrice, 0);\n    if (calculatedTotal <= 0) {\n      toast({\n        title: \"üí∞ Invalid Order Total\",\n        description: \"Order total must be greater than zero.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const orderDataToSend: any = {\n      ...data,\n      items: orderItems.map((item) => ({\n        productId: item.productId,\n        quantity: item.quantity,\n        unitPrice: item.unitPrice,\n        totalPrice: item.totalPrice,\n      })),\n      // In a real app, you would send file data or references here\n      // For now, we'll assume backend handles file uploads separately or we send metadata\n      // The `uploadedFiles` in `data` contains the File objects from the form input\n      // The backend needs to be prepared to receive and process these files\n    };\n\n    submitOrderMutation.mutate(orderDataToSend);\n  };\n\n  const totalAmount = orderItems.reduce((sum, item) => sum + item.totalPrice, 0);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Customer Information</CardTitle>\n        <CardDescription>\n          Please provide your contact details\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <Label htmlFor=\"customerName\">Full Name *</Label>\n          <Input\n            id=\"customerName\"\n            {...register(\"customerName\")}\n            placeholder=\"Enter your full name\"\n            disabled={submitOrderMutation.isPending}\n          />\n          {errors.customerName && (\n            <p className=\"text-sm text-red-600 mt-1\">{errors.customerName.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"customerEmail\">Email Address *</Label>\n          <Input\n            id=\"customerEmail\"\n            type=\"email\"\n            {...register(\"customerEmail\")}\n            placeholder=\"Enter your email\"\n            disabled={submitOrderMutation.isPending}\n          />\n          {errors.customerEmail && (\n            <p className=\"text-sm text-red-600 mt-1\">{errors.customerEmail.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"customerPhone\">Phone Number *</Label>\n          <Input\n            id=\"customerPhone\"\n            {...register(\"customerPhone\")}\n            placeholder=\"Enter your phone number\"\n            disabled={submitOrderMutation.isPending}\n          />\n          {errors.customerPhone && (\n            <p className=\"text-sm text-red-600 mt-1\">{errors.customerPhone.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"deliveryDate\">Delivery Date *</Label>\n          <Input\n            id=\"deliveryDate\"\n            type=\"date\"\n            {...register(\"deliveryDate\")}\n            min={\n              new Date(Date.now() + 24 * 60 * 60 * 1000)\n                .toISOString()\n                .split(\"T\")[0]\n            }\n            disabled={submitOrderMutation.isPending}\n          />\n          {errors.deliveryDate && (\n            <p className=\"text-sm text-red-600 mt-1\">{errors.deliveryDate.message}</p>\n          )}\n        </div>\n\n        <div className=\"md:col-span-2\">\n          <Label htmlFor=\"deliveryAddress\">Delivery Address *</Label>\n          <Textarea\n            id=\"deliveryAddress\"\n            {...register(\"deliveryAddress\")}\n            placeholder=\"Enter complete delivery address\"\n            rows={3}\n            disabled={submitOrderMutation.isPending}\n          />\n          {errors.deliveryAddress && (\n            <p className=\"text-sm text-red-600 mt-1\">{errors.deliveryAddress.message}</p>\n          )}\n        </div>\n\n        <div className=\"md:col-span-2\">\n          <Label htmlFor=\"specialInstructions\">\n            Special Instructions\n          </Label>\n          <Textarea\n            id=\"specialInstructions\"\n            {...register(\"specialInstructions\")}\n            placeholder=\"Any special requests or instructions for your order\"\n            rows={3}\n            disabled={submitOrderMutation.isPending}\n            maxLength={1000}\n          />\n          {errors.specialInstructions && (\n            <p className=\"text-sm text-red-600 mt-1\">{errors.specialInstructions.message}</p>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction ProductSelectionSection() {\n  const { toast } = useToast();\n  const { formatCurrency } = useCurrency();\n  const form = useFormContext<OrderFormData>();\n  const { register, formState: { errors }, setValue, watch } = form;\n  const { products = [], isLoading: isLoadingProducts } = useQuery({ queryKey: [\"/api/products\"] });\n  const { data: units = [], isLoading: isLoadingUnits } = useQuery({ queryKey: [\"/api/units\"] });\n\n  const orderItems = watch(\"items\"); // Use watch to get current items from form state\n  const [selectedProduct, setSelectedProduct] = useState<number | null>(null);\n  const [quantity, setQuantity] = useState(1);\n\n  const addItemToOrder = () => {\n    if (!selectedProduct) {\n      toast({ title: \"No Product Selected\", description: \"Please select a product.\", variant: \"destructive\" });\n      return;\n    }\n    const product = products.find((p: any) => p.id === selectedProduct);\n    if (!product) {\n      toast({ title: \"Product Not Found\", description: \"The selected product is invalid.\", variant: \"destructive\" });\n      return;\n    }\n    if (quantity <= 0) {\n      toast({ title: \"Invalid Quantity\", description: \"Quantity must be at least 1.\", variant: \"destructive\" });\n      return;\n    }\n\n    const existingItemIndex = orderItems.findIndex((item) => item.productId === selectedProduct);\n\n    let updatedItems;\n    if (existingItemIndex >= 0) {\n      updatedItems = [...orderItems];\n      updatedItems[existingItemIndex].quantity += quantity;\n      updatedItems[existingItemIndex].totalPrice = updatedItems[existingItemIndex].quantity * parseFloat(product.price);\n    } else {\n      const newItem: OrderItem = {\n        productId: selectedProduct,\n        productName: product.name,\n        quantity,\n        unitPrice: parseFloat(product.price),\n        totalPrice: quantity * parseFloat(product.price),\n      };\n      updatedItems = [...orderItems, newItem];\n    }\n    setValue(\"items\", updatedItems); // Update form state\n    setSelectedProduct(null);\n    setQuantity(1);\n  };\n\n  const removeItemFromOrder = (productId: number) => {\n    const updatedItems = orderItems.filter((item) => item.productId !== productId);\n    setValue(\"items\", updatedItems);\n  };\n\n  const updateItemQuantity = (productId: number, newQuantity: number) => {\n    if (newQuantity <= 0) {\n      removeItemFromOrder(productId);\n      return;\n    }\n\n    const updatedItems = orderItems.map((item) => {\n      if (item.productId === productId) {\n        const product = products.find((p: any) => p.id === productId);\n        return {\n          ...item,\n          quantity: newQuantity,\n          totalPrice: newQuantity * item.unitPrice,\n        };\n      }\n      return item;\n    });\n    setValue(\"items\", updatedItems);\n  };\n\n  const totalAmount = orderItems.reduce((sum, item) => sum + item.totalPrice, 0);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <ShoppingCart className=\"h-5 w-5\" />\n          Select Products\n        </CardTitle>\n        <CardDescription>Choose items for your order</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex gap-4 items-end mb-6\">\n          <div className=\"flex-1\">\n            <Label>Product</Label>\n            <Select\n              value={selectedProduct?.toString() || \"\"}\n              onValueChange={(value) => setSelectedProduct(parseInt(value))}\n              disabled={isLoadingProducts || isLoadingUnits}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select a product\" />\n              </SelectTrigger>\n              <SelectContent>\n                {products.map((product: any) => {\n                  const unit = units.find((u: any) => u.id === product.unitId);\n                  return (\n                    <SelectItem key={product.id} value={product.id.toString()}>\n                      {product.name} - {formatCurrency(parseFloat(product.price))}\n                      {unit && ` per ${unit.abbreviation}`}\n                    </SelectItem>\n                  );\n                })}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label>Quantity</Label>\n            <Input\n              type=\"number\"\n              min=\"1\"\n              value={quantity}\n              onChange={(e) => setQuantity(parseInt(e.target.value) || 1)}\n              className=\"w-20\"\n            />\n          </div>\n\n          <Button\n            type=\"button\"\n            onClick={addItemToOrder}\n            disabled={!selectedProduct || isLoadingProducts || isLoadingUnits}\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Item\n          </Button>\n        </div>\n\n        {orderItems.length > 0 && (\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold\">Your Order:</h3>\n            {orderItems.map((item, index) => (\n              <div\n                key={index}\n                className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\"\n              >\n                <div>\n                  <h4 className=\"font-medium\">{item.productName}</h4>\n                  <p className=\"text-sm text-gray-600\">\n                    {formatCurrency(item.unitPrice)} per {(() => {\n                      const product = products.find((p: any) => p.id === item.productId);\n                      const unit = units.find((u: any) => u.id === product?.unitId);\n                      return unit?.abbreviation || 'unit';\n                    })()}\n                  </p>\n                </div>\n\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    type=\"button\"\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => updateItemQuantity(item.productId, item.quantity - 1)}\n                    disabled={item.quantity === 1}\n                  >\n                    <Minus className=\"h-3 w-3\" />\n                  </Button>\n                  <span className=\"w-8 text-center\">{item.quantity}</span>\n                  <Button\n                    type=\"button\"\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => updateItemQuantity(item.productId, item.quantity + 1)}\n                  >\n                    <Plus className=\"h-3 w-3\" />\n                  </Button>\n                  <div className=\"ml-4 text-right\">\n                    <p className=\"font-semibold\">\n                      {formatCurrency(item.totalPrice)}\n                    </p>\n                  </div>\n                  <Button\n                    type=\"button\"\n                    size=\"sm\"\n                    variant=\"destructive\"\n                    onClick={() => removeItemFromOrder(item.productId)}\n                  >\n                    Remove\n                  </Button>\n                </div>\n              </div>\n            ))}\n\n            <div className=\"text-right pt-4 border-t\">\n              <p className=\"text-xl font-bold\">Total: {formatCurrency(totalAmount)}</p>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction FileUploadSection() {\n  const { toast } = useToast();\n  const form = useFormContext<OrderFormData>();\n  const { setValue, watch, formState: { errors } } = form;\n  const { isPending: isSubmitting } = useMutation({ mutationFn: () => Promise.resolve() }); // Dummy mutation for disabled state\n\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const uploadedFiles = watch(\"uploadedFiles\", []);\n  const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB\n  const MAX_FILES = 10;\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    const newFiles: File[] = [];\n\n    for (const file of files) {\n      if (uploadedFiles.length + newFiles.length >= MAX_FILES) {\n        toast({\n          title: \"Too Many Files\",\n          description: `You can only upload up to ${MAX_FILES} files.`,\n          variant: \"destructive\",\n        });\n        break;\n      }\n      if (file.size > MAX_FILE_SIZE) {\n        toast({\n          title: \"File Too Large\",\n          description: `File \"${file.name}\" exceeds the 10MB limit.`,\n          variant: \"destructive\",\n        });\n        continue;\n      }\n      // Basic type check - you might want a more robust check\n      if (!['image/', 'application/pdf', 'text/', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'].some(type => file.type.startsWith(type))) {\n        toast({\n          title: \"Invalid File Type\",\n          description: `File \"${file.name}\" has an unsupported type.`,\n          variant: \"destructive\",\n        });\n        continue;\n      }\n      newFiles.push(file);\n    }\n\n    if (newFiles.length > 0) {\n      // In a real scenario, you'd upload files here and get back URLs or identifiers\n      // For this example, we'll just store the File objects in form state\n      const updatedFiles = [...uploadedFiles, ...newFiles];\n      setValue(\"uploadedFiles\", updatedFiles);\n    }\n    // Clear the input to allow selecting the same file again if needed\n    event.target.value = '';\n  };\n\n  const removeFile = (indexToRemove: number) => {\n    const updatedFiles = uploadedFiles.filter((_, index) => index !== indexToRemove);\n    setValue(\"uploadedFiles\", updatedFiles);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Upload className=\"h-5 w-5\" />\n          Attachments (Optional)\n        </CardTitle>\n        <CardDescription>\n          Upload artwork, specifications, or reference images (Max 10MB per file)\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div>\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              multiple\n              accept=\"image/*,.pdf,.txt,.doc,.docx\"\n              onChange={handleFileUpload}\n              className=\"hidden\"\n            />\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => fileInputRef.current?.click()}\n              disabled={isSubmitting || uploadedFiles.length >= MAX_FILES}\n            >\n              <Upload className=\"h-4 w-4 mr-2\" />\n              Choose Files\n            </Button>\n            <p className=\"text-xs text-gray-500 mt-1\">\n              Accepted: Images, PDF, Text files (Max {MAX_FILES} files, {MAX_FILE_SIZE / 1024 / 1024}MB each)\n            </p>\n          </div>\n\n          {uploadedFiles.length > 0 && (\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">Uploaded Files:</h4>\n              {uploadedFiles.map((file, index) => (\n                <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                  <div className=\"flex items-center gap-2\">\n                    <FileCheck className=\"h-4 w-4 text-green-600\" />\n                    <span className=\"text-sm truncate\">{file.name}</span>\n                    <span className=\"text-xs text-gray-500\">\n                      ({(file.size / 1024 / 1024).toFixed(2)} MB)\n                    </span>\n                  </div>\n                  <Button\n                    type=\"button\"\n                    size=\"sm\"\n                    variant=\"destructive\"\n                    onClick={() => removeFile(index)}\n                    disabled={isSubmitting}\n                  >\n                    Remove\n                  </Button>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction TermsAndConditionsSection() {\n  const { register, formState: { errors } } = useFormContext<OrderFormData>();\n\n  return (\n    <Card>\n      <CardContent className=\"pt-6\">\n        <div className=\"flex items-start space-x-3\">\n          <input\n            id=\"agreeToTerms\"\n            type=\"checkbox\"\n            {...register(\"agreeToTerms\")}\n            className=\"mt-1\"\n          />\n          <div className=\"flex-1\">\n            <Label htmlFor=\"agreeToTerms\" className=\"text-sm\">\n              I agree to the{\" \"}\n              <a href=\"/terms\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 underline\">\n                Terms and Conditions\n              </a>{\" \"}\n              and{\" \"}\n              <a href=\"/privacy\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 underline\">\n                Privacy Policy\n              </a>\n            </Label>\n            {errors.agreeToTerms && (\n              <p className=\"text-sm text-red-600 mt-1\">{errors.agreeToTerms.message}</p>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function PublicOrderForm() {\n  const { toast } = useToast();\n  const methods = useForm<OrderFormData>({\n    resolver: zodResolver(orderFormSchema),\n    defaultValues: {\n      customerName: \"\",\n      customerEmail: \"\",\n      customerPhone: \"\",\n      deliveryDate: \"\",\n      deliveryAddress: \"\",\n      specialInstructions: \"\",\n      items: [],\n      uploadedFiles: [],\n      agreeToTerms: false,\n    },\n  });\n\n  const { handleSubmit, formState: { errors }, reset, watch } = methods;\n  const { mutate: submitOrder, isPending: isSubmitting } = useMutation({\n    mutationFn: (data: OrderFormData) => submitOrderWithRetry(data),\n    onSuccess: (data) => {\n      console.log(\"Order submitted successfully:\", data);\n      toast({\n        title: \"üéâ Order Submitted Successfully!\",\n        description: `Order ${data.orderNumber} has been received. We'll contact you soon with confirmation details.`,\n        duration: 6000,\n      });\n      resetFormAndState();\n    },\n    onError: (error: any) => {\n      console.error(\"Order submission error:\", error);\n      toast({\n        title: \"‚ùå Order Submission Failed\",\n        description: error.message || \"There was an error submitting your order. Please check your information and try again.\",\n        variant: \"destructive\",\n        duration: 8000,\n      });\n    },\n  });\n\n  const orderItems = watch(\"items\");\n  const [submissionStatus, setSubmissionStatus] = useState<'idle' | 'submitting' | 'success' | 'error'>('idle');\n  const [orderReference, setOrderReference] = useState<string | null>(null);\n  const [retryCount, setRetryCount] = useState(0);\n  const maxRetries = 3;\n\n  const resetFormAndState = () => {\n    reset({\n      customerName: \"\",\n      customerEmail: \"\",\n      customerPhone: \"\",\n      deliveryDate: \"\",\n      deliveryAddress: \"\",\n      specialInstructions: \"\",\n      items: [],\n      uploadedFiles: [],\n      agreeToTerms: false,\n    });\n    setOrderItems([]);\n    setUploadedFiles([]);\n    setSelectedProduct(null);\n    setQuantity(1);\n    setSubmissionStatus('idle');\n    setOrderReference(null);\n    setRetryCount(0);\n  };\n\n  const onSubmit = (data: OrderFormData) => {\n    // Ensure items are correctly mapped from state if not directly in form state\n    if (orderItems.length === 0) {\n      toast({\n        title: \"No Items Selected\",\n        description: \"Please add at least one item to your order.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Convert File objects to something serializable if necessary for the API, or handle upload separately\n    // For this example, we assume the backend might receive FormData or process files asynchronously\n    const orderDataToSend: any = {\n      ...data,\n      items: orderItems.map((item) => ({\n        productId: item.productId,\n        quantity: item.quantity,\n        unitPrice: item.unitPrice,\n        totalPrice: item.totalPrice,\n      })),\n      // If files need to be uploaded with the form data, construct FormData\n      // const formData = new FormData();\n      // Object.entries(data).forEach(([key, value]) => {\n      //   if (key !== 'uploadedFiles') {\n      //     formData.append(key, value as string);\n      //   }\n      // });\n      // data.uploadedFiles.forEach((file: File) => {\n      //   formData.append('files', file);\n      // });\n      // Then use formData in the mutationFn\n    };\n\n    setSubmissionStatus('submitting');\n    setRetryCount(0); // Reset retry count on new submission attempt\n\n    submitOrder(orderDataToSend); // Using the mutation directly\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Bake Sewa Order Form\n          </h1>\n          <p className=\"text-gray-600\">Place your custom bakery order online</p>\n        </div>\n\n        <FormProvider {...methods}>\n          <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n            <CustomerInfoSection />\n            <ProductSelectionSection />\n            <FileUploadSection />\n            <TermsAndConditionsSection />\n\n            {isSubmitting && (\n              <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n                <div className=\"bg-white p-6 rounded-lg shadow-lg text-center\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n                  <p className=\"text-lg font-semibold\">Submitting your order...</p>\n                  <p className=\"text-gray-600\">Please wait while we process your request.</p>\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex justify-center pt-4\">\n              <Button\n                type=\"submit\"\n                size=\"lg\"\n                disabled={isSubmitting || orderItems.length === 0}\n                className=\"min-w-[200px]\"\n              >\n                {isSubmitting ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Submitting Order...\n                  </>\n                ) : (\n                  \"Submit Order\"\n                )}\n              </Button>\n            </div>\n          </form>\n        </FormProvider>\n      </div>\n    </div>\n  );\n}","size_bytes":32437},"client/src/components/search-bar.tsx":{"content":"\"use client\";\n\nimport React, { useState } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, X } from \"lucide-react\";\n\ninterface SearchBarProps {\n  placeholder?: string;\n  onSearch?: (query: string) => void;\n  className?: string;\n  value?: string;\n  onChange?: (value: string) => void;\n}\n\n// ‚úÖ Named export ‚Äî make sure this matches the import\nexport function SearchBar({\n  placeholder = \"Search...\",\n  onSearch,\n  className = \"\",\n  value,\n  onChange,\n}: SearchBarProps) {\n  const [internalValue, setInternalValue] = useState(value || \"\");\n\n  // Use external value if provided (controlled), otherwise use internal state\n  const currentValue = value !== undefined ? value : internalValue;\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSearch?.(currentValue);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value;\n    if (onChange) {\n      onChange(newValue);\n    } else {\n      setInternalValue(newValue); // only update internal if uncontrolled\n    }\n  };\n\n  const handleClear = () => {\n    if (onChange) {\n      onChange(\"\");\n    } else {\n      setInternalValue(\"\");\n    }\n    onSearch?.(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSearch} className={className}>\n      <div className=\"relative flex items-center\">\n        {/* Search Icon */}\n        <Search className=\"absolute left-3 h-4 w-4 text-gray-400 pointer-events-none\" />\n\n        {/* Input */}\n        <Input\n          type=\"search\"\n          placeholder={placeholder}\n          value={currentValue}\n          onChange={handleChange}\n          className=\"pl-10 pr-10 py-2 w-full\"\n          aria-label={placeholder}\n        />\n\n        {/* Clear Button */}\n        {currentValue && (\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleClear}\n            className=\"absolute right-1 h-8 w-8 p-0 hover:bg-gray-100\"\n            aria-label=\"Clear search\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        )}\n      </div>\n    </form>\n  );\n}\n\n// ‚úÖ Default export to fix import issues\nexport default SearchBar;\n","size_bytes":2239},"client/src/components/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useCompanyBranding } from \"@/hooks/use-company-branding\";\nimport { useRoleAccess } from \"@/hooks/useRoleAccess\";\nimport { useState, useEffect } from \"react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Menu,\n  X,\n  ChevronDown,\n  ChevronRight,\n  Settings,\n  User,\n  LogOut,\n  ChevronLeft,\n  ChevronsLeft,\n  ChevronsRight,\n} from \"lucide-react\";\nimport { Receipt } from \"lucide-react\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport ProfileEditor from \"./profile-editor\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface SidebarProps {\n  isOpen?: boolean;\n  onToggle?: () => void;\n}\n\nexport default function Sidebar({ isOpen = true, onToggle }: SidebarProps) {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n  const { branding } = useCompanyBranding();\n  const { canAccessSidebarItem, isSuperAdmin } = useRoleAccess();\n  const { toast } = useToast();\n\n  // Sidebar collapse state\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  const [openSections, setOpenSections] = useState<string[]>([\n    \"core\",\n    \"Finance\",\n  ]);\n\n  // Load collapsed state from localStorage on mount\n  useEffect(() => {\n    const savedState = localStorage.getItem(\"sidebar-collapsed\");\n    if (savedState !== null) {\n      setIsCollapsed(JSON.parse(savedState));\n    }\n  }, []);\n\n  // Save collapsed state to localStorage when it changes\n  useEffect(() => {\n    localStorage.setItem(\"sidebar-collapsed\", JSON.stringify(isCollapsed));\n    // Dispatch custom event for same-page updates\n    window.dispatchEvent(new CustomEvent(\"sidebar-toggle\"));\n  }, [isCollapsed]);\n\n  const toggleCollapse = () => {\n    setIsCollapsed(!isCollapsed);\n  };\n\n  const toggleSection = (section: string) => {\n    if (isCollapsed) return; // Don't allow section toggle when collapsed\n    setOpenSections((prev) =>\n      prev.includes(section)\n        ? prev.filter((s) => s !== section)\n        : [...prev, section],\n    );\n  };\n\n  const navigationSections = [\n    {\n      id: \"core\",\n      items: [\n        {\n          name: \"Dashboard\",\n          href: \"/\",\n          resource: \"dashboard\",\n          icon: \"fas fa-tachometer-alt\",\n        },\n        {\n          name: \"Notifications\",\n          href: \"/notifications\",\n          resource: \"notifications\",\n          icon: \"fas fa-bell\",\n        },\n      ],\n    },\n\n    {\n      id: \"Finance\",\n      title: \"Finance\",\n      items: [\n        {\n          name: \"Day Book\",\n          href: \"/day-book\",\n          icon: \"fas fa-shopping-cart\",\n          resource: \"sales\",\n        },\n        {\n          name: \"Transactions\",\n          href: \"/transactions\",\n          icon: \"fas fa-exchange-alt\",\n          resource: \"sales\",\n        },\n        {\n          name: \"Orders\",\n          href: \"/orders\",\n          icon: \"fas fa-shopping-cart\",\n          resource: \"orders\",\n        },\n        {\n          name: \"Sales\",\n          href: \"/sales\",\n          icon: \"fas fa-cash-register\",\n          resource: \"sales\",\n        },\n        {\n          name: \"Purchases\",\n          href: \"/purchases\",\n          icon: \"fas fa-shopping-bag\",\n          resource: \"purchases\",\n        },\n        {\n          name: \"Income & Expenses\",\n          href: \"/expenses\",\n          icon: \"fas fa-receipt\",\n          resource: \"expenses\",\n        },\n        {\n          name: \"Assets\",\n          href: \"/assets\",\n          icon: \"fas fa-building\",\n          resource: \"assets\",\n        },\n      ],\n    },\n\n    {\n      id: \"Stock\",\n      title: \"Product & Inventory\",\n      items: [\n        {\n          name: \"Recipes\",\n          href: \"/recipes\",\n          icon: \"fas fa-utensils\",\n          resource: \"products\",\n        },\n        {\n          name: \"Products\",\n          href: \"/products\",\n          icon: \"fas fa-cookie-bite\",\n          resource: \"products\",\n        },\n        {\n          name: \"Stock & Ingredients\",\n          href: \"/stock\",\n          icon: \"fas fa-boxes\",\n          resource: \"inventory\",\n        },\n        {\n          name: \"Production\",\n          href: \"/production\",\n          icon: \"fas fa-industry\",\n          resource: \"production\",\n        },\n        {\n          name: \"Ingredients\",\n          href: \"/ingredients\",\n          icon: \"fas fa-seedling\",\n          resource: \"inventory\",\n        },\n      ],\n    },\n\n    {\n      id: \"management\",\n      title: \"Management\",\n      items: [\n        {\n          name: \"Customers\",\n          href: \"/customers\",\n          icon: \"fas fa-users\",\n          resource: \"customers\",\n        },\n        {\n          name: \"Parties\",\n          href: \"/parties\",\n          icon: \"fas fa-handshake\",\n          resource: \"parties\",\n        },\n      ],\n    },\n    {\n      id: \"Staff\",\n      title: \"Staff Management\",\n      items: [\n        {\n          name: \"Staff Directory\",\n          href: \"/staff\",\n          icon: \"fas fa-users\",\n          resource: \"staff\",\n        },\n        {\n          name: \"Attendance\",\n          href: \"/attendance\",\n          icon: \"fas fa-clock\",\n          resource: \"staff\",\n        },\n        {\n          name: \"Salary Management\",\n          href: \"/salary\",\n          icon: \"fas fa-money-bill-wave\",\n          resource: \"staff\",\n        },\n        {\n          name: \"Leave Requests\",\n          href: \"/leave-requests\",\n          icon: \"fas fa-calendar-times\",\n          resource: \"staff\",\n        },\n        {\n          name: \"Staff Schedules\",\n          href: \"/staff-schedules\",\n          icon: \"fas fa-calendar-alt\",\n          resource: \"staff\",\n        },\n      ],\n    },\n    {\n      id: \"reports\",\n      title: \"Reports & Analytics\",\n      items: [\n        {\n          name: \"Reports\",\n          href: \"/reports\",\n          icon: \"fas fa-chart-bar\",\n          resource: \"reports\",\n        },\n        {\n          name: \"Billing & Subscription\",\n          href: \"/billing\",\n          icon: \"fas fa-file-invoice-dollar\",\n          resource: \"billing\",\n        },\n      ],\n    },\n    {\n      id: \"administration\",\n      title: \"Administration\",\n      items: [\n        {\n          name: \"User Management\",\n          href: \"/admin/users\",\n          icon: \"fas fa-users-cog text-base\",\n          resource: \"users\",\n        },\n        {\n          name: \"Audit Logs\",\n          href: \"/admin/login-logs\",\n          icon: \"fas fa-shield-alt text-base\",\n          resource: \"admin\",\n        },\n        {\n          name: \"Category Management\",\n          href: \"/category-management\",\n          icon: \"fas fa-tags text-base\",\n          resource: \"settings\",\n        },\n        {\n          name: \"Measuring Units\",\n          href: \"/units\",\n          icon: \"fas fa-ruler text-base\",\n          resource: \"settings\",\n        },\n      ],\n    },\n  ];\n\n  const isActive = (href: string) => {\n    if (href === \"/\") {\n      return location === \"/\";\n    }\n    return location.startsWith(href);\n  };\n\n  const renderMenuItem = (item: any, isSubItem = false) => {\n    const active = isActive(item.href);\n\n    const menuContent = (\n      <Link\n        key={item.name}\n        href={item.href}\n        className={`sidebar-item flex items-center transition-all duration-300 text-sm font-medium relative overflow-hidden \n                ${isCollapsed ? \"justify-center px-2 py-3\" : isSubItem ? \"space-x-3 px-3 py-2 ml-4\" : \"space-x-3 px-3 py-3\"} \n                rounded-xl \n                ${\n                  active\n                    ? \"bg-gradient-to-r from-primary to-primary/90 text-primary-foreground shadow-lg shadow-primary/25 scale-105\"\n                    : \"text-gray-700 hover:bg-gradient-to-r hover:from-primary/10 hover:to-primary/5 hover:text-primary hover:scale-102 hover:shadow-md\"\n                } group ${active ? \"active\" : \"\"}`}\n      >\n        <i\n          className={`${item.icon} text-base transition-all duration-300 ${\n            active\n              ? \"text-primary-foreground scale-110\"\n              : \"text-gray-500 group-hover:text-primary group-hover:scale-110 group-hover:rotate-3\"\n          } ${isCollapsed ? \"text-lg\" : \"\"}`}\n        ></i>\n        {!isCollapsed && (\n          <span className=\"font-medium transition-transform duration-300 group-hover:translate-x-1 whitespace-nowrap\">\n            {item.name}\n          </span>\n        )}\n        {active && (\n          <div\n            className={`absolute ${isCollapsed ? \"right-1 top-1\" : \"right-2\"} w-2 h-2 bg-primary-foreground/60 rounded-full animate-pulse`}\n          ></div>\n        )}\n      </Link>\n    );\n\n    // Wrap with tooltip when collapsed\n    if (isCollapsed) {\n      return (\n        <Tooltip key={item.name}>\n          <TooltipTrigger asChild>{menuContent}</TooltipTrigger>\n          <TooltipContent side=\"right\" className=\"ml-2\">\n            <p>{item.name}</p>\n          </TooltipContent>\n        </Tooltip>\n      );\n    }\n\n    return menuContent;\n  };\n\n  return (\n    <TooltipProvider>\n      {/* Mobile overlay */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 bg-black bg-opacity-10 z-40 lg:hidden\"\n          onClick={onToggle}\n        />\n      )}\n\n      <aside\n        className={`h-screen flex flex-col\n          fixed inset-y-0 left-0 z-50 \n          bg-white/95 backdrop-blur-md\n          shadow-xl border-r border-gray-200/60\n          flex-shrink-0\n          transform transition-all duration-300 ease-in-out\n          ${isOpen ? \"translate-x-0 opacity-100\" : \"-translate-x-full lg:translate-x-0 opacity-95 lg:opacity-100\"}\n          ${isCollapsed ? \"w-20\" : \"w-64\"}\n          before:absolute before:inset-0 before:bg-gradient-to-r before:from-primary/0 before:to-transparent before:opacity-0 \n          before:transition-opacity before:duration-300 hover:before:opacity-0\n        `}\n      >\n        {/* Dynamic Company Header */}\n        <div\n          className={`px-4 lg:px-6 py-2 flex-shrink-0 relative overflow-hidden border-b border-gray-200 ${isCollapsed ? \"px-2\" : \"\"}`}\n        >\n          <div className=\"absolute inset-0 bg-gradient-to-r from-white/5 to-transparent opacity-50\"></div>\n          <Link href=\"/\" className=\"flex items-center group relative z-10\">\n            <div\n              className={`bg-white/15 backdrop-blur-md rounded-2xl flex items-center justify-center \n                          shadow-lg group-hover:scale-110 group-hover:rotate-3 transition-all duration-300 \n                          group-hover:shadow-xl group-hover:bg-white/20 relative overflow-hidden\n                          before:absolute before:inset-0 before:bg-gradient-to-br before:from-white/20 before:to-transparent\n                          before:opacity-0 group-hover:before:opacity-100 before:transition-opacity before:duration-300\n                          ${isCollapsed ? \"w-12 h-12\" : \"w-14 h-14\"}`}\n            >\n              {branding.companyLogo ? (\n                <img\n                  src={branding.companyLogo}\n                  alt=\"Company Logo\"\n                  className={`object-contain transition-transform duration-300 group-hover:scale-110 ${isCollapsed ? \"w-6 h-6\" : \"w-8 h-8\"}`}\n                />\n              ) : (\n                <i\n                  className={`fas fa-bread-slice text-orange-500 transition-all duration-300 group-hover:text-orange-700 ${isCollapsed ? \"text-xl\" : \"text-2xl\"}`}\n                ></i>\n              )}\n            </div>\n            {!isCollapsed && (\n              <div className=\"text-orange-500 transition-all duration-300 group-hover:translate-x-1 ml-4\">\n                <h1 className=\"text-xl font-bold tracking-tight group-hover:text-orange-700 transition-colors duration-300\">\n                  {branding.companyName}\n                </h1>\n              </div>\n            )}\n          </Link>\n        </div>\n\n        {/* Toggle Button */}\n        <div\n          className={`flex ${isCollapsed ? \"justify-center px-2\" : \"justify-end px-4\"} py-2 border-b border-gray-200/30`}\n        >\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={toggleCollapse}\n            className=\"h-8 w-8 p-0 hover:bg-primary/10 transition-all duration-200\"\n          >\n            {isCollapsed ? (\n              <ChevronsRight className=\"h-4 w-4 text-gray-600\" />\n            ) : (\n              <ChevronsLeft className=\"h-4 w-4 text-gray-600\" />\n            )}\n          </Button>\n        </div>\n\n        {/* Scrollable Navigation */}\n        <div className=\"flex-1 overflow-hidden\">\n          <ScrollArea className=\"h-full\">\n            <div className={`py-4 space-y-2 ${isCollapsed ? \"px-2\" : \"px-4\"}`}>\n              <nav className=\"space-y-1\">\n                {/* Render top-level items directly without Collapsible */}\n                {navigationSections\n                  .filter(\n                    (section) => section.id === \"core\", // Add other top-level sections here if needed\n                  )\n                  .flatMap((section) =>\n                    section.items\n                      .filter(\n                        (item) =>\n                          isSuperAdmin() ||\n                          canAccessSidebarItem(item.resource, \"read\"),\n                      )\n                      .map((item) => renderMenuItem(item)),\n                  )}\n\n                {/* Render remaining grouped sections */}\n                {navigationSections\n                  .filter((section) => section.id !== \"core\")\n                  .map((section) => (\n                    <div key={section.id} className=\"mb-3\">\n                      {isCollapsed ? (\n                        // When collapsed, show items directly without grouping\n                        section.items\n                          .filter(\n                            (item) =>\n                              isSuperAdmin() ||\n                              canAccessSidebarItem(item.resource, \"read\"),\n                          )\n                          .map((item) => renderMenuItem(item))\n                      ) : (\n                        // When expanded, show with collapsible sections\n                        <Collapsible\n                          open={openSections.includes(section.id)}\n                          onOpenChange={() => toggleSection(section.id)}\n                        >\n                          <CollapsibleTrigger\n                            className=\"flex items-center w-full px-3 py-3 text-left text-sm font-semibold \n                                                                 text-gray-800 hover:bg-gradient-to-r hover:from-gray-50 hover:to-gray-100/50 \n                                                                 hover:text-gray-900 rounded-xl transition-all duration-300 group \n                                                                 hover:shadow-sm hover:scale-102 relative overflow-hidden\"\n                          >\n                            <span\n                              className=\"text-xs uppercase tracking-wider font-bold text-gray-600 group-hover:text-gray-800 \n                                           transition-all duration-300 group-hover:tracking-wide\"\n                            >\n                              {section.title}\n                            </span>\n                            <div className=\"ml-auto transition-transform duration-300 group-hover:scale-110\">\n                              {openSections.includes(section.id) ? (\n                                <ChevronDown className=\"h-4 w-4 text-gray-400 group-hover:text-primary transition-all duration-300 group-hover:rotate-180\" />\n                              ) : (\n                                <ChevronRight className=\"h-4 w-4 text-gray-400 group-hover:text-primary transition-all duration-300 group-hover:rotate-12\" />\n                              )}\n                            </div>\n                          </CollapsibleTrigger>\n                          <CollapsibleContent className=\"mt-1 space-y-1\">\n                            {section.items\n                              .filter(\n                                (item) =>\n                                  isSuperAdmin() ||\n                                  canAccessSidebarItem(item.resource, \"read\"),\n                              )\n                              .map((item) => renderMenuItem(item, true))}\n                          </CollapsibleContent>\n                        </Collapsible>\n                      )}\n                    </div>\n                  ))}\n              </nav>\n            </div>\n          </ScrollArea>\n        </div>\n\n        {/* Enhanced user profile section */}\n        <div className=\"border-t border-gray-200/50 pt-4\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <button\n                type=\"button\"\n                className={`flex items-center w-full bg-gradient-to-r from-gray-50/80 to-white/80 backdrop-blur-sm \n                           rounded-2xl border border-gray-200/60 hover:shadow-2xl hover:shadow-primary/20 \n                           transition-all duration-500 hover:scale-[1.02] group text-left cursor-pointer \n                           relative overflow-hidden before:absolute before:inset-0 before:bg-gradient-to-r \n                           before:from-primary/5 before:to-transparent before:opacity-0 hover:before:opacity-100 \n                           before:transition-opacity before:duration-300 ${isCollapsed ? \"p-2\" : \"p-3\"}`}\n                aria-expanded=\"false\"\n                aria-haspopup=\"true\"\n              >\n                <div\n                  className={`bg-gradient-to-br from-primary via-primary/90 to-primary/70 rounded-xl \n                             flex items-center justify-center transition-all duration-300 \n                             group-hover:scale-110 group-hover:rotate-3 relative overflow-hidden \n                             before:absolute before:inset-0 before:bg-gradient-to-br before:from-white/30 \n                             before:to-transparent before:opacity-0 group-hover:before:opacity-100 \n                             before:transition-opacity before:duration-300 ${isCollapsed ? \"w-10 h-10\" : \"w-12 h-12\"}`}\n                >\n                  {user?.profileImageUrl ? (\n                    <img\n                      src={user.profileImageUrl}\n                      alt=\"Profile\"\n                      className={`rounded-xl object-cover relative z-10 transition-transform duration-300 \n                                 group-hover:scale-110 ${isCollapsed ? \"w-8 h-8\" : \"w-10 h-10\"}`}\n                    />\n                  ) : (\n                    <i\n                      className={`fas fa-user text-primary-foreground relative z-10 \n                                 transition-transform duration-300 group-hover:scale-110 \n                                 ${isCollapsed ? \"text-sm\" : \"text-base\"}`}\n                    ></i>\n                  )}\n                </div>\n\n                {!isCollapsed && (\n                  <div className=\"flex-1 min-w-0 ml-3 transition-transform duration-300 group-hover:translate-x-1 relative z-10\">\n                    <div className=\"flex items-center justify-between\">\n                      <p className=\"text-sm font-semibold text-gray-900 truncate transition-colors duration-300 group-hover:text-primary\">\n                        {user?.firstName\n                          ? `${user.firstName} ${user.lastName || \"\"}`.trim()\n                          : user?.email || \"User\"}\n                      </p>\n                      <i className=\"fas fa-chevron-down text-xs text-gray-400 transition-transform duration-300 group-hover:rotate-180\"></i>\n                    </div>\n                    <div className=\"flex items-center mt-1\">\n                      <span className=\"w-2 h-2 bg-green-500 rounded-full mr-2 flex-shrink-0 animate-pulse shadow-lg shadow-green-500/50\"></span>\n                      <span className=\"text-xs text-gray-500 capitalize truncate font-medium transition-colors duration-300 group-hover:text-gray-700\">\n                        {user?.role === \"super_admin\"\n                          ? \"Super Admin\"\n                          : user?.role === \"admin\"\n                            ? \"Administrator\"\n                            : user?.role || \"Staff\"}\n                      </span>\n                    </div>\n                  </div>\n                )}\n              </button>\n            </DropdownMenuTrigger>\n\n            <DropdownMenuContent\n              side=\"right\"\n              align=\"end\"\n              className={`${isCollapsed ? \"w-64 mr-2\" : \"w-80 mb-2\"} bg-white/95 backdrop-blur-md border border-gray-200/50 shadow-2xl`}\n            >\n              <div className=\"px-4 py-3 border-b border-gray-100\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-primary/80 rounded-lg flex items-center justify-center\">\n                    {user?.profileImageUrl ? (\n                      <img\n                        src={user.profileImageUrl}\n                        alt=\"Profile\"\n                        className=\"w-8 h-8 rounded-lg object-cover\"\n                      />\n                    ) : (\n                      <i className=\"fas fa-user text-primary-foreground text-sm\"></i>\n                    )}\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm font-semibold text-gray-900 truncate\">\n                      {user?.firstName\n                        ? `${user.firstName} ${user.lastName || \"\"}`.trim()\n                        : user?.email || \"User\"}\n                    </p>\n                    <p className=\"text-xs text-gray-500 truncate\">\n                      {user?.email}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"mt-2 flex items-center justify-between\">\n                  <span\n                    className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium\n                  ${\n                    user?.role === \"super_admin\"\n                      ? \"bg-purple-100 text-purple-800\"\n                      : user?.role === \"admin\"\n                        ? \"bg-blue-100 text-blue-800\"\n                        : user?.role === \"manager\"\n                          ? \"bg-green-100 text-green-800\"\n                          : \"bg-gray-100 text-gray-800\"\n                  }`}\n                  >\n                    <span className=\"w-1.5 h-1.5 bg-current rounded-full mr-1.5 animate-pulse\"></span>\n                    {user?.role === \"super_admin\"\n                      ? \"Super Admin\"\n                      : user?.role === \"admin\"\n                        ? \"Administrator\"\n                        : user?.role === \"manager\"\n                          ? \"Manager\"\n                          : user?.role === \"supervisor\"\n                            ? \"Supervisor\"\n                            : user?.role === \"marketer\"\n                              ? \"Marketer\"\n                              : \"Staff\"}\n                  </span>\n                  <div className=\"text-xs text-gray-400\">Online</div>\n                </div>\n              </div>\n\n              <div className=\"p-2\">\n                <ProfileEditor user={user} />\n              </div>\n\n              <DropdownMenuItem asChild>\n                <Link\n                  href=\"/settings\"\n                  className=\"flex items-center w-full px-3 py-2 hover:bg-gray-50 transition-colors\"\n                >\n                  <Settings className=\"mr-3 h-4 w-4 text-gray-500\" />\n                  <span className=\"text-sm\">Settings</span>\n                </Link>\n              </DropdownMenuItem>\n\n              <DropdownMenuSeparator className=\"my-1\" />\n\n              <DropdownMenuItem\n                onClick={async () => {\n                  try {\n                    await logout();\n                    toast({\n                      title: \"Success\",\n                      description: \"Logged out successfully\",\n                    });\n                  } catch (error) {\n                    toast({\n                      title: \"Error\",\n                      description: \"Failed to logout\",\n                      variant: \"destructive\",\n                    });\n                  }\n                }}\n                className=\"text-red-600 cursor-pointer px-3 py-2 hover:bg-red-50 transition-colors\"\n              >\n                <LogOut className=\"mr-3 h-4 w-4\" />\n                <span className=\"text-sm\">Sign out</span>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </aside>\n    </TooltipProvider>\n  );\n}\n","size_bytes":25055},"client/src/components/stats-grid.tsx":{"content":"interface StatsGridProps {\n  stats?: {\n    todaySales: number;\n    todayOrders: number;\n    productsInStock: number;\n    lowStockItems: number;\n    productionToday: number;\n  };\n}\n\nexport default function StatsGrid({ stats }: StatsGridProps) {\n  const statCards = [\n    {\n      title: \"Today's Sales\",\n      value: `$${(stats?.todaySales || 0).toFixed(2)}`,\n      change: \"+12% from yesterday\",\n      icon: \"fas fa-dollar-sign\",\n      bgColor: \"bg-green-100\",\n      iconColor: \"text-green-600\",\n      changeColor: \"text-green-600\"\n    },\n    {\n      title: \"Orders Today\",\n      value: stats?.todayOrders?.toString() || \"0\",\n      change: \"+8% from yesterday\",\n      icon: \"fas fa-shopping-bag\",\n      bgColor: \"bg-blue-100\",\n      iconColor: \"text-blue-600\",\n      changeColor: \"text-green-600\"\n    },\n    {\n      title: \"Products in Stock\",\n      value: stats?.productsInStock?.toString() || \"0\",\n      change: `${stats?.lowStockItems || 0} items low stock`,\n      icon: \"fas fa-boxes\",\n      bgColor: \"bg-orange-100\",\n      iconColor: \"text-orange-600\",\n      changeColor: stats?.lowStockItems ? \"text-orange-600\" : \"text-green-600\"\n    },\n    {\n      title: \"Production Today\",\n      value: stats?.productionToday?.toString() || \"0\",\n      change: \"items completed\",\n      icon: \"fas fa-industry\",\n      bgColor: \"bg-primary/20\",\n      iconColor: \"text-primary\",\n      changeColor: \"text-green-600\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {statCards.map((card, index) => (\n        <div key={index} className=\"group bg-white rounded-2xl shadow-sm hover:shadow-xl p-6 border border-gray-100 transition-all duration-300 hover:-translate-y-1 cursor-pointer\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium text-gray-500 mb-1\">{card.title}</p>\n              <p className=\"text-3xl font-bold text-gray-900 mb-2 group-hover:text-blue-600 transition-colors\">{card.value}</p>\n              <p className={`text-sm font-medium ${card.changeColor} flex items-center`}>\n                {card.change?.includes('+') && <i className=\"fas fa-arrow-up mr-1\"></i>}\n                {card.change?.includes('-') && <i className=\"fas fa-arrow-down mr-1\"></i>}\n                {card.change}\n              </p>\n            </div>\n            <div className={`w-14 h-14 ${card.bgColor} rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300`}>\n              <i className={`${card.icon} ${card.iconColor} text-xl`}></i>\n            </div>\n          </div>\n          \n          {/* Progress bar indicator */}\n          <div className=\"mt-4 w-full bg-gray-100 rounded-full h-1\">\n            <div \n              className=\"bg-gradient-to-r from-blue-500 to-indigo-600 h-1 rounded-full transition-all duration-1000 ease-out\"\n              style={{ width: `${Math.min(Math.abs(parseFloat(card.change?.replace(/[^0-9.-]/g, '') || '0')), 100)}%` }}\n            ></div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":3119},"client/src/components/theme-settings.tsx":{"content":"<replit_final_file>\n</replit_final_file>","size_bytes":40},"client/src/contexts/LanguageContext.tsx":{"content":"import React, { createContext, useContext, useState, ReactNode } from 'react';\n\ntype Language = 'en' | 'ne';\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: (key: string) => string;\n}\n\nconst translations = {\n  en: {\n    // Common\n    dashboard: \"Dashboard\",\n    products: \"Products\",\n    inventory: \"Inventory\", \n    stock: \"Stock\",\n    orders: \"Orders\",\n    production: \"Production\",\n    parties: \"Parties\",\n    customers: \"Customers\",\n    assets: \"Assets\",\n    expenses: \"Expenses\",\n    reports: \"Reports\",\n    settings: \"Settings\",\n    logout: \"Logout\",\n    search: \"Search\",\n    dayBook: \"Day Book\",\n    transactions: \"Transactions\",\n    billing: \"Billing\",\n    notifications: \"Notifications\",\n    userManagement: \"User Management\",\n    loginLogs: \"Login Logs\",\n    categoryManagement: \"Category Management\",\n    sales: \"Sales\",\n    purchases: \"Purchases\",\n    ingredients: \"Ingredients\",\n    units: \"Units\",\n    admin: \"Admin\",\n    manager: \"Manager\",\n    staff: \"Staff\",\n    // Add more translations as needed\n  },\n  ne: {\n    // Common  \n    dashboard: \"‡§°‡•ç‡§Ø‡§æ‡§∏‡§¨‡•ã‡§∞‡•ç‡§°\",\n    products: \"‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§π‡§∞‡•Ç\",\n    inventory: \"‡§∏‡•Ç‡§ö‡•Ä\",\n    stock: \"‡§∏‡•ç‡§ü‡§ï\",\n    orders: \"‡§Ö‡§∞‡•ç‡§°‡§∞‡§π‡§∞‡•Ç\", \n    production: \"‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®\",\n    parties: \"‡§™‡§æ‡§∞‡•ç‡§ü‡•Ä‡§π‡§∞‡•Ç\",\n    customers: \"‡§ó‡•ç‡§∞‡§æ‡§π‡§ï‡§π‡§∞‡•Ç\",\n    assets: \"‡§∏‡§Æ‡•ç‡§™‡§§‡•ç‡§§‡§ø‡§π‡§∞‡•Ç\",\n    expenses: \"‡§ñ‡§∞‡•ç‡§ö‡§π‡§∞‡•Ç\",\n    reports: \"‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü‡§π‡§∞‡•Ç\",\n    settings: \"‡§∏‡•á‡§ü‡§ø‡§ô‡§π‡§∞‡•Ç\",\n    logout: \"‡§≤‡§ó‡§Ü‡§â‡§ü\",\n    search: \"‡§ñ‡•ã‡§ú‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç\",\n    dayBook: \"‡§¶‡§ø‡§® ‡§™‡•Å‡§∏‡•ç‡§§‡§ï\",\n    transactions: \"‡§≤‡•á‡§®‡§¶‡•á‡§®‡§π‡§∞‡•Ç\",\n    billing: \"‡§¨‡§ø‡§≤‡§ø‡§ô\",\n    notifications: \"‡§∏‡•Ç‡§ö‡§®‡§æ‡§π‡§∞‡•Ç\",\n    userManagement: \"‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§®\",\n    loginLogs: \"‡§≤‡§ó‡§ø‡§® ‡§≤‡§ó‡§π‡§∞‡•Ç\",\n    categoryManagement: \"‡§µ‡§∞‡•ç‡§ó ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§®\",\n    sales: \"‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä\",\n    purchases: \"‡§ñ‡§∞‡§ø‡§¶‡§π‡§∞‡•Ç\",\n    ingredients: \"‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä‡§π‡§∞‡•Ç\",\n    units: \"‡§è‡§ï‡§æ‡§á‡§π‡§∞‡•Ç\",\n    admin: \"‡§™‡•ç‡§∞‡§∂‡§æ‡§∏‡§ï\",\n    manager: \"‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§ï\", \n    staff: \"‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä\",\n    // Add more translations as needed\n  },\n};\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport function LanguageProvider({ children }: { children: ReactNode }) {\n  const [language, setLanguage] = useState<Language>('en');\n\n  const t = (key: string): string => {\n    return translations[language]?.[key] || translations.en?.[key] || key;\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}","size_bytes":3072},"client/src/contexts/ThemeContext.tsx":{"content":"// This file is no longer needed - theme context removed","size_bytes":56},"client/src/hooks/use-company-branding.ts":{"content":"import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface CompanyBranding {\n  companyName: string;\n  companyLogo: string;\n  themeColor: string;\n  currency: string;\n}\n\nexport function useCompanyBranding() {\n  const queryClient = useQueryClient();\n  const {\n    data: settingsResponse,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\"/api/settings\"],\n    queryFn: () => apiRequest(\"GET\", \"/api/settings\"),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const settings = settingsResponse?.settings || {};\n\n  const branding: CompanyBranding = {\n    companyName: settings?.companyName || \"Baked Link\",\n    companyLogo: settings?.companyLogo || \"\",\n    themeColor: settings?.themeColor || \"#efa14b\",\n    currency: settings?.currency || \"NPR\",\n  };\n\n  // Apply theme color to CSS variables\n  useEffect(() => {\n    if (branding.themeColor) {\n      // Convert hex to HSL for CSS custom properties\n      const hexToHsl = (hex: string) => {\n        const r = parseInt(hex.slice(1, 3), 16);\n        const g = parseInt(hex.slice(3, 5), 16);\n        const b = parseInt(hex.slice(5, 7), 16);\n\n        const rNorm = r / 255;\n        const gNorm = g / 255;\n        const bNorm = b / 255;\n\n        const max = Math.max(rNorm, gNorm, bNorm);\n        const min = Math.min(rNorm, gNorm, bNorm);\n\n        let h = 0;\n        let s = 0;\n        const l = (max + min) / 2;\n\n        if (max !== min) {\n          const d = max - min;\n          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n          switch (max) {\n            case rNorm:\n              h = (gNorm - bNorm) / d + (gNorm < bNorm ? 6 : 0);\n              break;\n            case gNorm:\n              h = (bNorm - rNorm) / d + 2;\n              break;\n            case bNorm:\n              h = (rNorm - gNorm) / d + 4;\n              break;\n          }\n          h /= 6;\n        }\n\n        return [Math.round(h * 360), Math.round(s * 100), Math.round(l * 100)];\n      };\n\n      try {\n        const [h, s, l] = hexToHsl(branding.themeColor);\n\n        // Update CSS custom properties for comprehensive theme coverage\n        const root = document.documentElement;\n\n        // Primary color variations\n        root.style.setProperty(\"--primary\", `${h} ${s}% ${l}%`);\n        root.style.setProperty(\n          \"--primary-foreground\",\n          l > 50 ? \"0 0% 98%\" : \"0 0% 2%\",\n        );\n\n        // Secondary color variations (lighter version of primary)\n        root.style.setProperty(\n          \"--secondary\",\n          `${h} ${Math.max(s - 20, 10)}% ${Math.min(l + 40, 95)}%`,\n        );\n        root.style.setProperty(\n          \"--secondary-foreground\",\n          `${h} ${s}% ${Math.max(l - 40, 10)}%`,\n        );\n\n        // Accent color (slightly different hue)\n        const accentHue = (h + 30) % 360;\n        root.style.setProperty(\n          \"--accent\",\n          `${accentHue} ${Math.max(s - 10, 20)}% ${Math.min(l + 30, 90)}%`,\n        );\n        root.style.setProperty(\n          \"--accent-foreground\",\n          `${accentHue} ${s}% ${Math.max(l - 30, 15)}%`,\n        );\n\n        // Ring color for focus states\n        root.style.setProperty(\n          \"--ring\",\n          `${h} ${Math.max(s - 10, 30)}% ${Math.min(l + 10, 70)}%`,\n        );\n\n        // Muted variants\n        root.style.setProperty(\n          \"--muted\",\n          `${h} ${Math.max(s - 30, 8)}% ${Math.min(l + 50, 95)}%`,\n        );\n        root.style.setProperty(\n          \"--muted-foreground\",\n          `${h} ${Math.max(s - 20, 5)}% ${Math.max(l - 20, 45)}%`,\n        );\n\n        // Border color\n        root.style.setProperty(\n          \"--border\",\n          `${h} ${Math.max(s - 20, 10)}% ${Math.min(l + 45, 90)}%`,\n        );\n\n        // Input color\n        root.style.setProperty(\n          \"--input\",\n          `${h} ${Math.max(s - 20, 10)}% ${Math.min(l + 45, 90)}%`,\n        );\n\n        // Update meta theme color for mobile browsers\n        const metaThemeColor = document.querySelector(\n          'meta[name=\"theme-color\"]',\n        );\n        if (metaThemeColor) {\n          metaThemeColor.setAttribute(\"content\", branding.themeColor);\n        } else {\n          const meta = document.createElement(\"meta\");\n          meta.name = \"theme-color\";\n          meta.content = branding.themeColor;\n          document.head.appendChild(meta);\n        }\n      } catch (error) {\n        console.warn(\"Failed to apply theme color:\", error);\n      }\n    }\n  }, [branding.themeColor]);\n\n  // Update document title\n  useEffect(() => {\n    if (branding.companyName) {\n      document.title = `${branding.companyName} - System`;\n    }\n  }, [branding.companyName]);\n\n  return {\n    branding,\n    isLoading,\n    error,\n    refreshBranding: () => {\n      // Invalidate and refetch the settings\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n    },\n  };\n}\n\n// Utility function to format currency\nexport function formatCurrency(\n  amount: number,\n  currency: string = \"NPR\",\n): string {\n  try {\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: currency,\n      minimumFractionDigits: 2,\n    }).format(amount);\n  } catch (error) {\n    // Fallback if currency is not supported\n    return `${currency} ${amount.toFixed(2)}`;\n  }\n}\n","size_bytes":5314},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\nimport { getQueryFn, apiRequest } from \"@/lib/queryClient\";\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n  const { data, isLoading, error, refetch } = useQuery<User | null>({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n    staleTime: 1000 * 60 * 5, // 5 minutes\n  });\n\n  const logout = async () => {\n    try {\n      await apiRequest(\"POST\", \"/api/auth/logout\");\n      queryClient.setQueryData([\"/api/auth/user\"], null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      // Even if logout fails on server, clear local state\n      queryClient.setQueryData([\"/api/auth/user\"], null);\n    }\n  };\n\n  return {\n    user: data,\n    isLoading,\n    isAuthenticated: !!data,\n    error,\n    refetch,\n    logout,\n  };\n}","size_bytes":992},"client/src/hooks/useCurrency.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nconst CURRENCY_SYMBOLS = {\n  USD: \"$\",\n  EUR: \"‚Ç¨\",\n  GBP: \"¬£\",\n  NPR: \"Rs. \",\n  INR: \"‚Çπ\",\n  CAD: \"C$\",\n  AUD: \"A$\",\n  JPY: \"¬•\",\n  CNY: \"¬•\",\n  KRW: \"‚Ç©\",\n};\n\nexport function useCurrency() {\n  const { data: settings = {} } = useQuery({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const currency = settings.currency || \"NPR\";\n  const symbol =\n    CURRENCY_SYMBOLS[currency as keyof typeof CURRENCY_SYMBOLS] || \"Rs. \";\n\n  const formatCurrency = (amount: number | string) => {\n    const numAmount = typeof amount === \"string\" ? parseFloat(amount) : amount;\n    return `${symbol}${numAmount.toFixed(2)}`;\n  };\n\n  const formatCurrencyWithCommas = (amount: number | string) => {\n    const numAmount = typeof amount === \"string\" ? parseFloat(amount) : amount;\n    return `${symbol}${numAmount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n  };\n\n  const formatCurrencyInput = (amount: number | string) => {\n    const numAmount = typeof amount === \"string\" ? parseFloat(amount) : amount;\n    if (isNaN(numAmount)) return \"\";\n    return numAmount.toFixed(2);\n  };\n\n  const parseCurrency = (value: string) => {\n    const cleanValue = value.replace(/[^\\d.-]/g, \"\");\n    return parseFloat(cleanValue) || 0;\n  };\n\n  return {\n    currency,\n    symbol,\n    formatCurrency,\n    formatCurrencyWithCommas,\n    formatCurrencyInput,\n    parseCurrency,\n  };\n}\n","size_bytes":1432},"client/src/hooks/useNotifications.ts":{"content":"import { useState, useEffect } from 'react';\nimport { useAuth } from './useAuth';\n\ninterface NotificationRule {\n  id: string;\n  type: 'low_stock' | 'new_order' | 'production_reminder';\n  enabled: boolean;\n  threshold?: number;\n  dailyLimit: boolean;\n  lastSent?: Date;\n}\n\ninterface UseNotificationsReturn {\n  isSupported: boolean;\n  permission: NotificationPermission | null;\n  subscription: PushSubscription | null;\n  requestPermission: () => Promise<boolean>;\n  subscribe: () => Promise<boolean>;\n  unsubscribe: () => Promise<boolean>;\n  rules: NotificationRule[];\n  updateRule: (id: string, rule: Partial<NotificationRule>) => Promise<void>;\n  sendTestNotification: () => Promise<void>;\n}\n\nconst defaultRules: NotificationRule[] = [\n  {\n    id: 'low_stock',\n    type: 'low_stock',\n    enabled: true,\n    threshold: 10,\n    dailyLimit: true,\n  },\n  {\n    id: 'new_order',\n    type: 'new_order',\n    enabled: true,\n    dailyLimit: false,\n  },\n  {\n    id: 'production_reminder',\n    type: 'production_reminder',\n    enabled: true,\n    dailyLimit: true,\n  },\n];\n\nexport function useNotifications(): UseNotificationsReturn {\n  const [isSupported, setIsSupported] = useState(false);\n  const [permission, setPermission] = useState<NotificationPermission | null>(null);\n  const [subscription, setSubscription] = useState<PushSubscription | null>(null);\n  const [rules, setRules] = useState<NotificationRule[]>(defaultRules);\n  const { user } = useAuth();\n\n  // Check if user has admin, supervisor, or manager role\n  const hasNotificationAccess = user?.role === 'admin' || user?.role === 'supervisor' || user?.role === 'manager';\n\n  useEffect(() => {\n    if ('serviceWorker' in navigator && 'PushManager' in window) {\n      setIsSupported(true);\n      setPermission(Notification.permission);\n      \n      // Register service worker\n      navigator.serviceWorker.register('/sw.js')\n        .then((registration) => {\n          console.log('Service Worker registered:', registration);\n          return registration.pushManager.getSubscription();\n        })\n        .then((sub) => {\n          setSubscription(sub);\n        })\n        .catch((error) => {\n          console.error('Service Worker registration failed:', error);\n        });\n\n      // Load saved rules from localStorage\n      const savedRules = localStorage.getItem('notificationRules');\n      if (savedRules) {\n        setRules(JSON.parse(savedRules));\n      }\n    }\n  }, []);\n\n  const requestPermission = async (): Promise<boolean> => {\n    if (!isSupported || !hasNotificationAccess) return false;\n\n    try {\n      const permission = await Notification.requestPermission();\n      setPermission(permission);\n      return permission === 'granted';\n    } catch (error) {\n      console.error('Error requesting notification permission:', error);\n      return false;\n    }\n  };\n\n  const subscribe = async (): Promise<boolean> => {\n    if (!isSupported || permission !== 'granted' || !hasNotificationAccess) return false;\n\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      const subscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: urlBase64ToUint8Array(\n          // This would be your VAPID public key - you'll need to generate one\n          'BEl62iUYgUivxIkv69yViEuiBIa0aEOkOyK2u6M4jFm8u2J7sCvk1fOY1PzTF8yHrFH3o8yl-F3K_mzRYhR1QQs'\n        ),\n      });\n\n      setSubscription(subscription);\n\n      // Send subscription to server\n      await fetch('/api/notifications/subscribe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          subscription,\n          userId: user?.id,\n        }),\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Error subscribing to push notifications:', error);\n      return false;\n    }\n  };\n\n  const unsubscribe = async (): Promise<boolean> => {\n    if (!subscription) return false;\n\n    try {\n      await subscription.unsubscribe();\n      setSubscription(null);\n\n      // Remove subscription from server\n      await fetch('/api/notifications/unsubscribe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          userId: user?.id,\n        }),\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Error unsubscribing from push notifications:', error);\n      return false;\n    }\n  };\n\n  const updateRule = async (id: string, updatedRule: Partial<NotificationRule>): Promise<void> => {\n    const newRules = rules.map(rule => \n      rule.id === id ? { ...rule, ...updatedRule } : rule\n    );\n    setRules(newRules);\n    localStorage.setItem('notificationRules', JSON.stringify(newRules));\n\n    // Send updated rules to server\n    await fetch('/api/notifications/rules', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        userId: user?.id,\n        rules: newRules,\n      }),\n    });\n  };\n\n  const sendTestNotification = async (): Promise<void> => {\n    if (!hasNotificationAccess) return;\n\n    await fetch('/api/notifications/test', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        userId: user?.id,\n      }),\n    });\n  };\n\n  return {\n    isSupported: isSupported && hasNotificationAccess,\n    permission,\n    subscription,\n    requestPermission,\n    subscribe,\n    unsubscribe,\n    rules,\n    updateRule,\n    sendTestNotification,\n  };\n}\n\nfunction urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding)\n    .replace(/-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}","size_bytes":6147},"client/src/hooks/usePermissions.ts":{"content":"\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport interface Permission {\n  id: number;\n  name: string;\n  resource: string;\n  action: string;\n  description?: string;\n  granted?: boolean;\n}\n\nexport function usePermissions() {\n  const { data: permissions = [], isLoading } = useQuery<Permission[]>({\n    queryKey: [\"/api/auth/permissions\"],\n  });\n\n  const hasPermission = (resource: string, action: 'read' | 'write' | 'read_write') => {\n    return (permissions as Permission[]).some((perm: Permission) => \n      perm.resource === resource && \n      (perm.action === action || perm.action === 'read_write')\n    );\n  };\n\n  const canRead = (resource: string) => hasPermission(resource, 'read');\n  const canWrite = (resource: string) => hasPermission(resource, 'write');\n  const canReadWrite = (resource: string) => hasPermission(resource, 'read_write');\n\n  return {\n    permissions,\n    isLoading,\n    hasPermission,\n    canRead,\n    canWrite,\n    canReadWrite,\n  };\n}\n\nexport function useAllPermissions() {\n  return useQuery({\n    queryKey: [\"/api/permissions\"],\n  });\n}\n\nexport function useRolePermissions(role: string) {\n  return useQuery<Permission[]>({\n    queryKey: [`/api/permissions/role/${role}`],\n    enabled: !!role,\n  });\n}\n\nexport function useUserPermissions(userId: string) {\n  return useQuery<Permission[]>({\n    queryKey: [`/api/permissions/user/${userId}`],\n    enabled: !!userId,\n  });\n}\n","size_bytes":1457},"client/src/hooks/useRoleAccess.ts":{"content":"\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePermissions } from \"@/hooks/usePermissions\";\n\nexport function useRoleAccess() {\n  const { user } = useAuth();\n  const { hasPermission } = usePermissions();\n\n  const isSuperAdmin = () => user?.role === 'super_admin';\n  const isAdmin = () => user?.role === 'admin' || isSuperAdmin();\n  const isManager = () => user?.role === 'manager' || isAdmin();\n\n  const canAccessPage = (resource: string, action: 'read' | 'write' | 'read_write' = 'read') => {\n    if (isSuperAdmin()) return true;\n    \n    // Admin cannot access superadmin-specific resources\n    if (isAdmin() && resource !== 'super_admin') return true;\n    \n    return hasPermission(resource, action);\n  };\n\n  const canAccessSidebarItem = (resource: string, action: 'read' | 'write' | 'read_write' = 'read') => {\n    if (isSuperAdmin()) return true;\n    \n    // Admin cannot access superadmin-specific resources\n    if (isAdmin() && resource !== 'super_admin') return true;\n    \n    return hasPermission(resource, action);\n  };\n\n  const canManageUsers = () => {\n    return isSuperAdmin() || isAdmin();\n  };\n\n  const canViewSuperAdminUsers = () => {\n    return isSuperAdmin();\n  };\n\n  return {\n    isSuperAdmin,\n    isAdmin,\n    isManager,\n    canAccessPage,\n    canAccessSidebarItem,\n    canManageUsers,\n    canViewSuperAdminUsers,\n    user,\n  };\n}\n","size_bytes":1359},"client/src/hooks/useTableSort.ts":{"content":"import { useState, useMemo } from 'react';\n\nexport interface SortConfig {\n  key: string;\n  direction: 'asc' | 'desc';\n}\n\nexport function useTableSort<T>(data: T[], defaultSortKey?: string) {\n  const [sortConfig, setSortConfig] = useState<SortConfig | null>(\n    defaultSortKey ? { key: defaultSortKey, direction: 'asc' } : null\n  );\n\n  const sortedData = useMemo(() => {\n    if (!sortConfig) return data;\n\n    const sorted = [...data].sort((a: any, b: any) => {\n      const aValue = getNestedValue(a, sortConfig.key);\n      const bValue = getNestedValue(b, sortConfig.key);\n\n      // Handle null/undefined values\n      if (aValue == null && bValue == null) return 0;\n      if (aValue == null) return 1;\n      if (bValue == null) return -1;\n\n      // Handle different data types\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortConfig.direction === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n\n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortConfig.direction === 'asc' \n          ? aValue - bValue\n          : bValue - aValue;\n      }\n\n      // Handle dates\n      if (aValue instanceof Date && bValue instanceof Date) {\n        return sortConfig.direction === 'asc'\n          ? aValue.getTime() - bValue.getTime()\n          : bValue.getTime() - aValue.getTime();\n      }\n\n      // Handle date strings\n      if (isDateString(aValue) && isDateString(bValue)) {\n        const dateA = new Date(aValue);\n        const dateB = new Date(bValue);\n        return sortConfig.direction === 'asc'\n          ? dateA.getTime() - dateB.getTime()\n          : dateB.getTime() - dateA.getTime();\n      }\n\n      // Fallback to string comparison\n      const strA = String(aValue).toLowerCase();\n      const strB = String(bValue).toLowerCase();\n      return sortConfig.direction === 'asc'\n        ? strA.localeCompare(strB)\n        : strB.localeCompare(strA);\n    });\n\n    return sorted;\n  }, [data, sortConfig]);\n\n  const requestSort = (key: string) => {\n    let direction: 'asc' | 'desc' = 'asc';\n    if (sortConfig && sortConfig.key === key && sortConfig.direction === 'asc') {\n      direction = 'desc';\n    }\n    setSortConfig({ key, direction });\n  };\n\n  return { sortedData, sortConfig, requestSort };\n}\n\n// Helper function to get nested object values\nfunction getNestedValue(obj: any, path: string): any {\n  return path.split('.').reduce((current, key) => current?.[key], obj);\n}\n\n// Helper function to check if a string is a valid date\nfunction isDateString(value: any): boolean {\n  if (typeof value !== 'string') return false;\n  const date = new Date(value);\n  return !isNaN(date.getTime());\n}","size_bytes":2715},"client/src/hooks/useUnits.ts":{"content":"// src/hooks/useUnits.ts\n\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport const useUnits = () => {\n  return useQuery({\n    queryKey: [\"units\"], // Consistent key for better cache management\n    queryFn: async () => {\n      try {\n        const rawResponse = await apiRequest(\"GET\", \"/api/units\");\n        console.log(\"[useUnits] Raw API Response:\", rawResponse);\n\n        // Case 1: Already an array (most likely if apiRequest returns .data)\n        if (Array.isArray(rawResponse)) {\n          console.log(\"[useUnits] Using direct array:\", rawResponse);\n          return rawResponse;\n        }\n\n        // Case 2: Standard format { success: true, data: [...] }\n        if (rawResponse?.success === true && Array.isArray(rawResponse.data)) {\n          console.log(\"[useUnits] Using response.data:\", rawResponse.data);\n          return rawResponse.data;\n        }\n\n        // Case 3: { units: [...] }\n        if (rawResponse && Array.isArray(rawResponse.units)) {\n          console.log(\"[useUnits] Using response.units:\", rawResponse.units);\n          return rawResponse.units;\n        }\n\n        // Case 4: { data: { units: [...] } }\n        if (rawResponse?.data?.units && Array.isArray(rawResponse.data.units)) {\n          console.log(\n            \"[useUnits] Using response.data.units:\",\n            rawResponse.data.units,\n          );\n          return rawResponse.data.units;\n        }\n\n        // Unexpected format - always return empty array as fallback\n        console.warn(\n          \"[useUnits] Unexpected response format, returning empty array:\",\n          rawResponse,\n        );\n        return [];\n      } catch (error) {\n        console.error(\"[useUnits] Failed to fetch units:\", error);\n        // Return empty array on error instead of throwing\n        return [];\n      }\n    },\n    retry: (failureCount, error) => {\n      if (isUnauthorizedError(error)) return false;\n      return failureCount < 3;\n    },\n    staleTime: 1000 * 60 * 5, // 5 minutes\n    gcTime: 1000 * 60 * 10, // 10 minutes\n    refetchOnWindowFocus: false, // Optional: disable auto-refetch on tab focus\n  });\n};\n\n// Optional: Active units filter\nexport const useActiveUnits = () => {\n  const { data: units = [], ...rest } = useUnits();\n\n  // Ensure units is always an array before filtering\n  const safeUnits = Array.isArray(units) ? units : [];\n  const activeUnits = safeUnits.filter((unit) => unit.isActive !== false);\n\n  return {\n    data: activeUnits,\n    ...rest,\n  };\n};","size_bytes":2572},"client/src/lib/activityTracker.ts":{"content":"\n/**\n * Client-side activity tracker for comprehensive audit logging\n * Tracks user interactions and sends them to the server for audit purposes\n */\n\ninterface ActivityEvent {\n  action: string;\n  resource: string;\n  resourceId?: string;\n  details?: any;\n  timestamp: string;\n}\n\nclass ActivityTracker {\n  private static instance: ActivityTracker;\n  private pendingEvents: ActivityEvent[] = [];\n  private batchSize = 10;\n  private flushInterval = 5000; // 5 seconds\n  private isEnabled = true;\n\n  static getInstance(): ActivityTracker {\n    if (!ActivityTracker.instance) {\n      ActivityTracker.instance = new ActivityTracker();\n    }\n    return ActivityTracker.instance;\n  }\n\n  constructor() {\n    this.setupPeriodicFlush();\n    this.setupPageUnloadHandler();\n    this.setupNavigationTracking();\n  }\n\n  /**\n   * Track a user activity\n   */\n  track(action: string, resource: string, resourceId?: string, details?: any): void {\n    if (!this.isEnabled) return;\n\n    const event: ActivityEvent = {\n      action,\n      resource,\n      resourceId,\n      details: this.sanitizeDetails(details),\n      timestamp: new Date().toISOString(),\n    };\n\n    this.pendingEvents.push(event);\n\n    // Flush immediately for critical actions\n    if (this.isCriticalAction(action)) {\n      this.flush();\n    } else if (this.pendingEvents.length >= this.batchSize) {\n      this.flush();\n    }\n  }\n\n  /**\n   * Track page views\n   */\n  trackPageView(pageName: string): void {\n    this.track('VIEW', 'page', pageName, {\n      url: window.location.pathname,\n      referrer: document.referrer,\n      userAgent: navigator.userAgent,\n    });\n  }\n\n  /**\n   * Track form submissions\n   */\n  trackFormSubmission(formName: string, formData?: any): void {\n    this.track('SUBMIT', 'form', formName, {\n      formData: this.sanitizeFormData(formData),\n      url: window.location.pathname,\n    });\n  }\n\n  /**\n   * Track button clicks\n   */\n  trackButtonClick(buttonName: string, context?: string): void {\n    this.track('CLICK', 'button', buttonName, {\n      context,\n      url: window.location.pathname,\n    });\n  }\n\n  /**\n   * Track data operations\n   */\n  trackDataOperation(operation: 'CREATE' | 'UPDATE' | 'DELETE' | 'READ', resource: string, resourceId?: string): void {\n    this.track(operation, resource, resourceId, {\n      url: window.location.pathname,\n    });\n  }\n\n  /**\n   * Track errors\n   */\n  trackError(error: Error, context?: string): void {\n    this.track('ERROR', 'application', undefined, {\n      message: error.message,\n      stack: error.stack,\n      context,\n      url: window.location.pathname,\n    });\n  }\n\n  /**\n   * Flush pending events to server\n   */\n  private async flush(): Promise<void> {\n    if (this.pendingEvents.length === 0) return;\n\n    const events = [...this.pendingEvents];\n    this.pendingEvents = [];\n\n    try {\n      await fetch('/api/audit/client-activities', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ events }),\n        credentials: 'include',\n      });\n    } catch (error) {\n      console.warn('Failed to send activity events:', error);\n      // Re-add events to pending if they failed to send\n      this.pendingEvents = [...events, ...this.pendingEvents];\n    }\n  }\n\n  /**\n   * Setup periodic flushing\n   */\n  private setupPeriodicFlush(): void {\n    setInterval(() => {\n      this.flush();\n    }, this.flushInterval);\n  }\n\n  /**\n   * Setup page unload handler to flush remaining events\n   */\n  private setupPageUnloadHandler(): void {\n    window.addEventListener('beforeunload', () => {\n      if (this.pendingEvents.length > 0) {\n        // Use sendBeacon for reliable delivery on page unload\n        const blob = new Blob([JSON.stringify({ events: this.pendingEvents })], {\n          type: 'application/json',\n        });\n        navigator.sendBeacon('/api/audit/client-activities', blob);\n      }\n    });\n  }\n\n  /**\n   * Setup navigation tracking\n   */\n  private setupNavigationTracking(): void {\n    // Track initial page load\n    this.trackPageView(document.title);\n\n    // Track navigation changes (for SPAs)\n    const originalPushState = history.pushState;\n    const originalReplaceState = history.replaceState;\n\n    history.pushState = function (...args) {\n      originalPushState.apply(history, args);\n      ActivityTracker.getInstance().trackPageView(document.title);\n    };\n\n    history.replaceState = function (...args) {\n      originalReplaceState.apply(history, args);\n      ActivityTracker.getInstance().trackPageView(document.title);\n    };\n\n    window.addEventListener('popstate', () => {\n      this.trackPageView(document.title);\n    });\n  }\n\n  /**\n   * Check if action is critical and should be flushed immediately\n   */\n  private isCriticalAction(action: string): boolean {\n    return ['DELETE', 'CREATE', 'ERROR', 'LOGIN', 'LOGOUT'].includes(action);\n  }\n\n  /**\n   * Sanitize details to remove sensitive information\n   */\n  private sanitizeDetails(details: any): any {\n    if (!details || typeof details !== 'object') return details;\n\n    const sanitized = { ...details };\n    const sensitiveFields = ['password', 'token', 'secret', 'key', 'authorization', 'ssn', 'creditCard'];\n\n    Object.keys(sanitized).forEach(key => {\n      if (sensitiveFields.some(field => key.toLowerCase().includes(field))) {\n        sanitized[key] = '[REDACTED]';\n      }\n    });\n\n    return sanitized;\n  }\n\n  /**\n   * Sanitize form data\n   */\n  private sanitizeFormData(formData: any): any {\n    if (!formData) return null;\n\n    if (formData instanceof FormData) {\n      const result: any = {};\n      for (const [key, value] of Array.from(formData.entries())) {\n        result[key] = this.isSensitiveField(key) ? '[REDACTED]' : value;\n      }\n      return result;\n    }\n\n    return this.sanitizeDetails(formData);\n  }\n\n  /**\n   * Check if field is sensitive\n   */\n  private isSensitiveField(fieldName: string): boolean {\n    const sensitiveFields = ['password', 'token', 'secret', 'key', 'authorization', 'ssn', 'creditcard'];\n    return sensitiveFields.some(field => fieldName.toLowerCase().includes(field));\n  }\n\n  /**\n   * Enable/disable tracking\n   */\n  setEnabled(enabled: boolean): void {\n    this.isEnabled = enabled;\n  }\n}\n\nexport const activityTracker = ActivityTracker.getInstance();\n\n// Auto-track common interactions\nexport function setupAutoTracking(): void {\n  // Track form submissions\n  document.addEventListener('submit', (event) => {\n    const form = event.target as HTMLFormElement;\n    const formName = form.name || form.id || 'unknown-form';\n    activityTracker.trackFormSubmission(formName);\n  });\n\n  // Track button clicks\n  document.addEventListener('click', (event) => {\n    const target = event.target as HTMLElement;\n    if (target.tagName === 'BUTTON' || target.role === 'button') {\n      const buttonName = target.textContent?.trim() || target.id || 'unknown-button';\n      activityTracker.trackButtonClick(buttonName);\n    }\n  });\n\n  // Track errors\n  window.addEventListener('error', (event) => {\n    activityTracker.trackError(event.error, 'Global error handler');\n  });\n\n  window.addEventListener('unhandledrejection', (event) => {\n    activityTracker.trackError(new Error(event.reason), 'Unhandled promise rejection');\n  });\n}\n","size_bytes":7264},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/notificationService.ts":{"content":"\n// Notification service for triggering business notifications\nexport class NotificationService {\n  private static instance: NotificationService;\n  \n  static getInstance(): NotificationService {\n    if (!NotificationService.instance) {\n      NotificationService.instance = new NotificationService();\n    }\n    return NotificationService.instance;\n  }\n\n  async triggerNotification(event: string, data: any): Promise<void> {\n    try {\n      await fetch('/api/notifications/trigger', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({ event, data }),\n      });\n    } catch (error) {\n      console.error('Failed to trigger notification:', error);\n    }\n  }\n\n  // Order notifications\n  async notifyOrderCreated(orderData: any): Promise<void> {\n    await this.triggerNotification('order_created', orderData);\n  }\n\n  async notifyPaymentReceived(paymentData: any): Promise<void> {\n    await this.triggerNotification('payment_received', paymentData);\n  }\n\n  async notifyOrderDelayed(orderData: any): Promise<void> {\n    await this.triggerNotification('order_delayed', orderData);\n  }\n\n  // Production notifications\n  async notifyProductionCompleted(productionData: any): Promise<void> {\n    await this.triggerNotification('production_completed', productionData);\n  }\n\n  async notifyProductionDelayed(productionData: any): Promise<void> {\n    await this.triggerNotification('production_delayed', productionData);\n  }\n\n  async notifyQualityCheckFailed(qcData: any): Promise<void> {\n    await this.triggerNotification('qc_failed', qcData);\n  }\n\n  // Inventory notifications\n  async notifyLowStock(stockData: any): Promise<void> {\n    await this.triggerNotification('low_stock', stockData);\n  }\n\n  async notifyOutOfStock(stockData: any): Promise<void> {\n    await this.triggerNotification('out_of_stock', stockData);\n  }\n\n  async notifyRestockAlert(stockData: any): Promise<void> {\n    await this.triggerNotification('restock_alert', stockData);\n  }\n\n  // Shipping notifications\n  async notifyShipmentDispatched(shipmentData: any): Promise<void> {\n    await this.triggerNotification('shipment_dispatched', shipmentData);\n  }\n\n  async notifyDeliveryFailed(deliveryData: any): Promise<void> {\n    await this.triggerNotification('delivery_failed', deliveryData);\n  }\n\n  async notifyDeliveryCompleted(deliveryData: any): Promise<void> {\n    await this.triggerNotification('delivery_completed', deliveryData);\n  }\n\n  // System notifications\n  async notifySystemAlert(alertData: any): Promise<void> {\n    await this.triggerNotification('system_alert', alertData);\n  }\n\n  async notifyFailedSync(syncData: any): Promise<void> {\n    await this.triggerNotification('failed_sync', syncData);\n  }\n\n  async notifyNewDeviceLogin(loginData: any): Promise<void> {\n    await this.triggerNotification('new_device_login', loginData);\n  }\n}\n\n// Export singleton instance\nexport const notificationService = NotificationService.getInstance();\n","size_bytes":3022},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(method, url, data) {\n  const options = {\n    method,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      // Add auth token if needed\n      // Authorization: `Bearer ${getToken()}`\n    },\n    body: data ? JSON.stringify(data) : undefined,\n  };\n\n  const res = await fetch(url, options);\n\n  if (!res.ok) {\n    const error = await res.json().catch(() => ({}));\n    throw new Error(error.message || res.statusText);\n  }\n\n  const json = await res.json();\n  return json; // ‚Üê Return only the JSON body\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1557},"client/src/lib/theme-utils.ts":{"content":"\n// This file is no longer needed - theme utilities removed\n","size_bytes":60},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/LoginLogs.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Shield, Calendar, Download, Filter, Search, Eye, Activity, Users, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { useTableSort } from \"@/hooks/useTableSort\";\nimport { SortableTableHeader } from \"@/components/ui/sortable-table-header\";\n\nexport default function AuditLogs() {\n  const [page, setPage] = useState(1);\n  const [limit] = useState(50);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [actionFilter, setActionFilter] = useState(\"all\");\n  const [resourceFilter, setResourceFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedLog, setSelectedLog] = useState<any>(null);\n  const [dateFilter, setDateFilter] = useState({\n    startDate: \"\",\n    endDate: \"\"\n  });\n\n  const { data, isLoading } = useQuery({\n    queryKey: [\"/api/audit-logs\", page, limit, actionFilter, resourceFilter, statusFilter, dateFilter.startDate, dateFilter.endDate],\n    queryFn: () => {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...(actionFilter !== 'all' && { action: actionFilter }),\n        ...(resourceFilter !== 'all' && { resource: resourceFilter }),\n        ...(statusFilter !== 'all' && { status: statusFilter }),\n        ...(dateFilter.startDate && { startDate: dateFilter.startDate }),\n        ...(dateFilter.endDate && { endDate: dateFilter.endDate })\n      });\n      return apiRequest(`/api/audit-logs?${params.toString()}`, \"GET\");\n    },\n  });\n\n  const { data: analytics } = useQuery({\n    queryKey: [\"/api/audit-logs/analytics\"],\n    queryFn: () => apiRequest(\"/api/audit-logs/analytics\", \"GET\"),\n  });\n\n  const { data: loginAnalytics } = useQuery({\n    queryKey: [\"/api/login-logs/analytics\"],\n    queryFn: () => apiRequest(\"/api/login-logs/analytics\", \"GET\"),\n  });\n\n  const auditLogs = data?.auditLogs || [];\n  const pagination = data?.pagination || {};\n\n  const getActionBadge = (action: string) => {\n    const colors = {\n      CREATE: \"bg-green-100 text-green-800 border-green-200\",\n      UPDATE: \"bg-blue-100 text-blue-800 border-blue-200\",\n      DELETE: \"bg-red-100 text-red-800 border-red-200\",\n      READ: \"bg-gray-100 text-gray-800 border-gray-200\",\n      LOGIN: \"bg-purple-100 text-purple-800 border-purple-200\",\n      LOGOUT: \"bg-orange-100 text-orange-800 border-orange-200\",\n      EXPORT: \"bg-yellow-100 text-yellow-800 border-yellow-200\",\n      IMPORT: \"bg-indigo-100 text-indigo-800 border-indigo-200\",\n      VIEW: \"bg-teal-100 text-teal-800 border-teal-200\",\n    };\n\n    const actionClass = colors[action as keyof typeof colors] || \"bg-gray-100 text-gray-800 border-gray-200\";\n    \n    return (\n      <Badge className={`${actionClass} font-medium border`}>\n        {action}\n      </Badge>\n    );\n  };\n\n  const getStatusBadge = (status: string) => {\n    const isSuccess = status === \"success\";\n    return (\n      <Badge \n        variant={isSuccess ? \"default\" : \"destructive\"}\n        className={`flex items-center gap-1 ${isSuccess ? 'bg-green-100 text-green-800 border-green-200' : 'bg-red-100 text-red-800 border-red-200'}`}\n      >\n        {isSuccess ? <CheckCircle className=\"h-3 w-3\" /> : <AlertTriangle className=\"h-3 w-3\" />}\n        {isSuccess ? \"Success\" : \"Failed\"}\n      </Badge>\n    );\n  };\n\n  const getResourceIcon = (resource: string) => {\n    const icons: { [key: string]: string } = {\n      staff: \"üë•\",\n      product: \"üì¶\",\n      customer: \"üë§\",\n      order: \"üõí\",\n      inventory: \"üìä\",\n      settings: \"‚öôÔ∏è\",\n      users: \"üîê\",\n      reports: \"üìã\",\n      production: \"üè≠\",\n      expenses: \"üí∞\",\n      sales: \"üí≥\",\n      purchases: \"üõçÔ∏è\",\n      assets: \"üè¢\",\n      parties: \"ü§ù\",\n      attendance: \"üìÖ\",\n      salary: \"üíµ\",\n      leave_requests: \"üèñÔ∏è\"\n    };\n    return icons[resource] || \"üìÑ\";\n  };\n\n  const filteredLogs = auditLogs.filter((log: any) =>\n    searchTerm === \"\" || \n    log.userEmail.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    log.userName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    log.resource.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    log.action.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (log.resourceId && log.resourceId.toLowerCase().includes(searchTerm.toLowerCase()))\n  );\n\n  const { sortedData, sortConfig, requestSort } = useTableSort(\n    filteredLogs,\n    \"timestamp\"\n  );\n\n  const exportLogs = async () => {\n    try {\n      const response = await apiRequest(\"/api/audit-logs/export\", \"GET\");\n      const blob = new Blob([JSON.stringify(response, null, 2)], { type: 'application/json' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = `audit-logs-${format(new Date(), 'yyyy-MM-dd')}.json`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Failed to export logs:', error);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n            <Activity className=\"h-8 w-8 text-primary\" />\n            System Audit Logs\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Complete activity trail for security monitoring and compliance\n          </p>\n        </div>\n        <Button variant=\"outline\" onClick={exportLogs}>\n          <Download className=\"h-4 w-4 mr-2\" />\n          Export Logs\n        </Button>\n      </div>\n\n      {/* Analytics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {analytics && (\n          <>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"text-2xl font-bold text-blue-600\">{analytics.totalActions}</div>\n                    <p className=\"text-sm text-muted-foreground\">Total Activities</p>\n                  </div>\n                  <Activity className=\"h-8 w-8 text-blue-500\" />\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"text-2xl font-bold text-green-600\">\n                      {Object.keys(analytics.actionsByUser || {}).length}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">Active Users</p>\n                  </div>\n                  <Users className=\"h-8 w-8 text-green-500\" />\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"text-2xl font-bold text-purple-600\">\n                      {analytics.actionsByType?.CREATE || 0}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">Items Created</p>\n                  </div>\n                  <CheckCircle className=\"h-8 w-8 text-purple-500\" />\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"text-2xl font-bold text-orange-600\">\n                      {analytics.actionsByType?.UPDATE || 0}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">Items Modified</p>\n                  </div>\n                  <Shield className=\"h-8 w-8 text-orange-500\" />\n                </div>\n              </CardContent>\n            </Card>\n          </>\n        )}\n      </div>\n\n      {/* Login Analytics */}\n      {loginAnalytics && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"h-5 w-5\" />\n              Authentication Summary (Last 30 Days)\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {loginAnalytics.successCount?.[0]?.count || 0}\n                </div>\n                <p className=\"text-sm text-green-700\">Successful Logins</p>\n              </div>\n              <div className=\"text-center p-4 bg-red-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-red-600\">\n                  {loginAnalytics.failureCount?.[0]?.count || 0}\n                </div>\n                <p className=\"text-sm text-red-700\">Failed Attempts</p>\n              </div>\n              <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {loginAnalytics.topLocations?.length || 0}\n                </div>\n                <p className=\"text-sm text-blue-700\">Login Locations</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-6 gap-4\">\n            <div className=\"lg:col-span-2\">\n              <Label htmlFor=\"search\">Search</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"Search users, actions, resources...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"action\">Action</Label>\n              <Select value={actionFilter} onValueChange={setActionFilter}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Actions</SelectItem>\n                  <SelectItem value=\"CREATE\">Create</SelectItem>\n                  <SelectItem value=\"UPDATE\">Update</SelectItem>\n                  <SelectItem value=\"DELETE\">Delete</SelectItem>\n                  <SelectItem value=\"READ\">Read</SelectItem>\n                  <SelectItem value=\"LOGIN\">Login</SelectItem>\n                  <SelectItem value=\"LOGOUT\">Logout</SelectItem>\n                  <SelectItem value=\"EXPORT\">Export</SelectItem>\n                  <SelectItem value=\"IMPORT\">Import</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"resource\">Resource</Label>\n              <Select value={resourceFilter} onValueChange={setResourceFilter}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Resources</SelectItem>\n                  <SelectItem value=\"staff\">Staff</SelectItem>\n                  <SelectItem value=\"product\">Products</SelectItem>\n                  <SelectItem value=\"customer\">Customers</SelectItem>\n                  <SelectItem value=\"order\">Orders</SelectItem>\n                  <SelectItem value=\"inventory\">Inventory</SelectItem>\n                  <SelectItem value=\"settings\">Settings</SelectItem>\n                  <SelectItem value=\"users\">Users</SelectItem>\n                  <SelectItem value=\"reports\">Reports</SelectItem>\n                  <SelectItem value=\"production\">Production</SelectItem>\n                  <SelectItem value=\"expenses\">Expenses</SelectItem>\n                  <SelectItem value=\"sales\">Sales</SelectItem>\n                  <SelectItem value=\"purchases\">Purchases</SelectItem>\n                  <SelectItem value=\"assets\">Assets</SelectItem>\n                  <SelectItem value=\"parties\">Parties</SelectItem>\n                  <SelectItem value=\"attendance\">Attendance</SelectItem>\n                  <SelectItem value=\"salary\">Salary</SelectItem>\n                  <SelectItem value=\"leave_requests\">Leave Requests</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"status\">Status</Label>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"success\">Success</SelectItem>\n                  <SelectItem value=\"failed\">Failed</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"dateRange\">Date Range</Label>\n              <div className=\"flex gap-2\">\n                <Input\n                  type=\"date\"\n                  value={dateFilter.startDate}\n                  onChange={(e) => setDateFilter(prev => ({ ...prev, startDate: e.target.value }))}\n                  className=\"text-xs\"\n                />\n                <Input\n                  type=\"date\"\n                  value={dateFilter.endDate}\n                  onChange={(e) => setDateFilter(prev => ({ ...prev, endDate: e.target.value }))}\n                  className=\"text-xs\"\n                />\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Audit Logs Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Activity Log ({sortedData.length} entries)</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n              <p className=\"text-muted-foreground mt-2\">Loading audit logs...</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <SortableTableHeader\n                      sortKey=\"timestamp\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Timestamp\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"userName\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      User\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"action\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Action\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"resource\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Resource\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"status\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Status\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"ipAddress\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      IP Address\n                    </SortableTableHeader>\n                    <TableHead>Details</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sortedData.map((log: any) => (\n                    <TableRow key={log.id} className=\"hover:bg-gray-50\">\n                      <TableCell className=\"font-mono text-sm\">\n                        {format(new Date(log.timestamp), \"MMM dd, yyyy HH:mm:ss\")}\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{log.userName}</div>\n                          <div className=\"text-sm text-muted-foreground\">{log.userEmail}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>{getActionBadge(log.action)}</TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-lg\">{getResourceIcon(log.resource)}</span>\n                          <div>\n                            <div className=\"font-medium capitalize\">{log.resource.replace('_', ' ')}</div>\n                            {log.resourceId && (\n                              <div className=\"text-sm text-muted-foreground font-mono\">ID: {log.resourceId}</div>\n                            )}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>{getStatusBadge(log.status)}</TableCell>\n                      <TableCell className=\"font-mono text-sm\">{log.ipAddress}</TableCell>\n                      <TableCell>\n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => setSelectedLog(log)}\n                              className=\"h-8 w-8 p-0\"\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n                            <DialogHeader>\n                              <DialogTitle className=\"flex items-center gap-2\">\n                                <Activity className=\"h-5 w-5\" />\n                                Audit Log Details\n                              </DialogTitle>\n                            </DialogHeader>\n                            {selectedLog && (\n                              <div className=\"space-y-6\">\n                                <div className=\"grid grid-cols-2 gap-4\">\n                                  <div>\n                                    <Label className=\"font-semibold\">User</Label>\n                                    <p className=\"text-sm mt-1\">{selectedLog.userName} ({selectedLog.userEmail})</p>\n                                  </div>\n                                  <div>\n                                    <Label className=\"font-semibold\">Action</Label>\n                                    <div className=\"mt-1\">{getActionBadge(selectedLog.action)}</div>\n                                  </div>\n                                  <div>\n                                    <Label className=\"font-semibold\">Resource</Label>\n                                    <div className=\"flex items-center gap-2 mt-1\">\n                                      <span className=\"text-lg\">{getResourceIcon(selectedLog.resource)}</span>\n                                      <span className=\"text-sm capitalize\">{selectedLog.resource.replace('_', ' ')}</span>\n                                    </div>\n                                  </div>\n                                  <div>\n                                    <Label className=\"font-semibold\">Status</Label>\n                                    <div className=\"mt-1\">{getStatusBadge(selectedLog.status)}</div>\n                                  </div>\n                                  <div>\n                                    <Label className=\"font-semibold\">IP Address</Label>\n                                    <p className=\"text-sm mt-1 font-mono\">{selectedLog.ipAddress}</p>\n                                  </div>\n                                  <div>\n                                    <Label className=\"font-semibold\">Timestamp</Label>\n                                    <p className=\"text-sm mt-1 font-mono\">\n                                      {format(new Date(selectedLog.timestamp), \"PPpp\")}\n                                    </p>\n                                  </div>\n                                </div>\n\n                                {selectedLog.details && (\n                                  <div>\n                                    <Label className=\"font-semibold\">Request Details</Label>\n                                    <pre className=\"text-xs bg-gray-50 p-3 rounded-lg overflow-x-auto mt-2 border\">\n                                      {JSON.stringify(selectedLog.details, null, 2)}\n                                    </pre>\n                                  </div>\n                                )}\n\n                                {selectedLog.oldValues && (\n                                  <div>\n                                    <Label className=\"font-semibold\">Previous Values</Label>\n                                    <pre className=\"text-xs bg-red-50 p-3 rounded-lg overflow-x-auto mt-2 border border-red-200\">\n                                      {JSON.stringify(selectedLog.oldValues, null, 2)}\n                                    </pre>\n                                  </div>\n                                )}\n\n                                {selectedLog.newValues && (\n                                  <div>\n                                    <Label className=\"font-semibold\">New Values</Label>\n                                    <pre className=\"text-xs bg-green-50 p-3 rounded-lg overflow-x-auto mt-2 border border-green-200\">\n                                      {JSON.stringify(selectedLog.newValues, null, 2)}\n                                    </pre>\n                                  </div>\n                                )}\n\n                                {selectedLog.errorMessage && (\n                                  <div>\n                                    <Label className=\"font-semibold text-red-600\">Error Message</Label>\n                                    <div className=\"text-sm bg-red-50 p-3 rounded-lg mt-2 border border-red-200 text-red-800\">\n                                      {selectedLog.errorMessage}\n                                    </div>\n                                  </div>\n                                )}\n                              </div>\n                            )}\n                          </DialogContent>\n                        </Dialog>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n\n          {/* Pagination */}\n          {pagination.totalPages > 1 && (\n            <div className=\"flex items-center justify-between mt-6 pt-4 border-t\">\n              <div className=\"text-sm text-muted-foreground\">\n                Showing {((pagination.page - 1) * pagination.limit) + 1} to{\" \"}\n                {Math.min(pagination.page * pagination.limit, pagination.total)} of{\" \"}\n                {pagination.total} entries\n              </div>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setPage(page - 1)}\n                  disabled={page <= 1}\n                >\n                  Previous\n                </Button>\n                <span className=\"flex items-center px-3 text-sm\">\n                  Page {pagination.page} of {pagination.totalPages}\n                </span>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setPage(page + 1)}\n                  disabled={page >= pagination.totalPages}\n                >\n                  Next\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {sortedData.length === 0 && !isLoading && (\n            <div className=\"text-center py-12\">\n              <Activity className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-muted-foreground mb-2\">\n                No audit logs found\n              </h3>\n              <p className=\"text-muted-foreground\">\n                {searchTerm || actionFilter !== 'all' || resourceFilter !== 'all' \n                  ? \"Try adjusting your filters\" \n                  : \"System activities will appear here\"}\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":26035},"client/src/pages/admin-users.tsx":{"content":"\nimport AdminUserManagement from \"@/components/admin-user-management\";\nimport { ProtectedPage } from \"@/components/protected-page\";\n\nexport default function AdminUsers() {\n  return (\n    <ProtectedPage resource=\"users\" action=\"read_write\">\n      <AdminUserManagement />\n    </ProtectedPage>\n  );\n}\n","size_bytes":298},"client/src/pages/assets.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport SearchBar from \"@/components/search-bar\";\nimport { useTableSort } from \"@/hooks/useTableSort\";\nimport { SortableTableHeader } from \"@/components/ui/sortable-table-header\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Search, Edit, Trash2, Package } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { DeleteConfirmationDialog } from \"@/components/ui/delete-confirmation-dialog\";\n\nexport default function Assets() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingAsset, setEditingAsset] = useState<any>(null);\n\n  // Form state\n  const [formData, setFormData] = useState({\n    name: \"\",\n    category: \"\",\n    description: \"\",\n    location: \"\",\n    condition: \"good\",\n    purchaseDate: \"\",\n    purchasePrice: \"\",\n    currentValue: \"\",\n  });\n\n  const { toast } = useToast();\n\n  const {\n    data: assets = [],\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\"/api/assets\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/assets\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assets\"] });\n      resetForm();\n      setIsDialogOpen(false);\n      toast({ title: \"Success\", description: \"Asset created successfully\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create asset\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: any }) =>\n      apiRequest(\"PUT\", `/api/assets/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assets\"] });\n      resetForm();\n      setIsDialogOpen(false);\n      toast({ title: \"Success\", description: \"Asset updated successfully\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update asset\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => apiRequest(\"DELETE\", `/api/assets/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assets\"] });\n      toast({ title: \"Success\", description: \"Asset deleted successfully\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete asset\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      category: \"\",\n      description: \"\",\n      location: \"\",\n      condition: \"good\",\n      purchaseDate: \"\",\n      purchasePrice: \"\",\n      currentValue: \"\",\n    });\n    setEditingAsset(null);\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleSave = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!formData.name.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Asset name is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.category) {\n      toast({\n        title: \"Error\",\n        description: \"Category is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const data = {\n      name: formData.name.trim(),\n      category: formData.category,\n      description: formData.description.trim() || null,\n      location: formData.location.trim() || null,\n      condition: formData.condition || \"good\",\n      purchaseDate: formData.purchaseDate\n        ? new Date(formData.purchaseDate)\n        : null,\n      purchasePrice: formData.purchasePrice\n        ? parseFloat(formData.purchasePrice)\n        : null,\n      currentValue: formData.currentValue\n        ? parseFloat(formData.currentValue)\n        : null,\n    };\n\n    if (editingAsset) {\n      updateMutation.mutate({ id: editingAsset.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (asset: any) => {\n    setEditingAsset(asset);\n    setFormData({\n      name: asset.name || \"\",\n      category: asset.category || \"\",\n      description: asset.description || \"\",\n      location: asset.location || \"\",\n      condition: asset.condition || \"good\",\n      purchaseDate: asset.purchaseDate\n        ? new Date(asset.purchaseDate).toISOString().split(\"T\")[0]\n        : \"\",\n      purchasePrice: asset.purchasePrice ? asset.purchasePrice.toString() : \"\",\n      currentValue: asset.currentValue ? asset.currentValue.toString() : \"\",\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleAddNew = () => {\n    resetForm();\n    setIsDialogOpen(true);\n  };\n\n  const categories = [\n    \"equipment\",\n    \"furniture\",\n    \"vehicle\",\n    \"computer\",\n    \"tools\",\n    \"other\",\n  ];\n  const conditions = [\"excellent\", \"good\", \"fair\", \"poor\"];\n\n  const filteredAssets = (assets as any[]).filter((asset: any) => {\n    const matchesSearch =\n      asset.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      asset.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      asset.location?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory =\n      categoryFilter === \"all\" || asset.category === categoryFilter;\n    return matchesSearch && matchesCategory;\n  });\n\n  // Add sorting functionality\n  const { sortedData, sortConfig, requestSort } = useTableSort(\n    filteredAssets,\n    \"name\",\n  );\n\n  const getConditionBadge = (condition: string) => {\n    const variants: Record<\n      string,\n      \"default\" | \"secondary\" | \"destructive\" | \"outline\"\n    > = {\n      excellent: \"default\",\n      good: \"secondary\",\n      fair: \"outline\",\n      poor: \"destructive\",\n    };\n    return variants[condition] || \"outline\";\n  };\n\n  if (error) {\n    if (isUnauthorizedError(error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return null;\n    }\n    console.error(\"Error loading assets:\", error);\n  }\n\n  return (\n    <div className=\"p-4 sm:p-6 space-y-6\">\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <p className=\"text-gray-600\">Track and manage your business assets</p>\n        </div>\n        <Dialog\n          open={isDialogOpen}\n          onOpenChange={(open) => {\n            setIsDialogOpen(open);\n            if (!open) {\n              resetForm();\n            }\n          }}\n        >\n          <DialogTrigger asChild>\n            <Button onClick={handleAddNew} className=\"w-full sm:w-auto\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Asset\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl mx-auto max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <Package className=\"h-5 w-5\" />\n                {editingAsset ? \"Edit Asset\" : \"Add New Asset\"}\n              </DialogTitle>\n              <DialogDescription>\n                {editingAsset ? \"Update asset information\" : \"Create a new asset record with detailed information\"}\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSave} className=\"space-y-6\">\n              {/* Basic Information */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">Basic Information</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"asset-name\">Asset Name *</Label>\n                    <Input\n                      id=\"asset-name\"\n                      placeholder=\"e.g. Office Laptop, Kitchen Mixer\"\n                      value={formData.name}\n                      onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"asset-category\">Category *</Label>\n                    <Select\n                      value={formData.category}\n                      onValueChange={(value) => handleInputChange(\"category\", value)}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select Category\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {categories.map((category) => (\n                          <SelectItem key={category} value={category}>\n                            {category.charAt(0).toUpperCase() + category.slice(1)}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"asset-location\">Location</Label>\n                    <Input\n                      id=\"asset-location\"\n                      placeholder=\"e.g. Main Office, Kitchen\"\n                      value={formData.location}\n                      onChange={(e) => handleInputChange(\"location\", e.target.value)}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"asset-condition\">Condition</Label>\n                    <Select\n                      value={formData.condition}\n                      onValueChange={(value) => handleInputChange(\"condition\", value)}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select Condition\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {conditions.map((condition) => (\n                          <SelectItem key={condition} value={condition}>\n                            {condition.charAt(0).toUpperCase() + condition.slice(1)}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </div>\n\n              {/* Financial Information */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">Financial Information</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"purchase-date\">Purchase Date</Label>\n                    <Input\n                      id=\"purchase-date\"\n                      type=\"date\"\n                      value={formData.purchaseDate}\n                      onChange={(e) =>\n                        handleInputChange(\"purchaseDate\", e.target.value)\n                      }\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"purchase-price\">Purchase Price ($)</Label>\n                    <Input\n                      id=\"purchase-price\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"0.00\"\n                      value={formData.purchasePrice}\n                      onChange={(e) =>\n                        handleInputChange(\"purchasePrice\", e.target.value)\n                      }\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"current-value\">Current Value ($)</Label>\n                    <Input\n                      id=\"current-value\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"0.00\"\n                      value={formData.currentValue}\n                      onChange={(e) =>\n                        handleInputChange(\"currentValue\", e.target.value)\n                      }\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Description */}\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"asset-description\">Description</Label>\n                  <Textarea\n                    id=\"asset-description\"\n                    placeholder=\"Additional notes about the asset...\"\n                    value={formData.description}\n                    onChange={(e) =>\n                      handleInputChange(\"description\", e.target.value)\n                    }\n                    rows={3}\n                  />\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex flex-col sm:flex-row justify-end gap-3 pt-4 border-t\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsDialogOpen(false)}\n                  className=\"w-full sm:w-auto\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={\n                    createMutation.isPending || updateMutation.isPending\n                  }\n                  className=\"w-full sm:w-auto\"\n                >\n                  {createMutation.isPending || updateMutation.isPending\n                    ? editingAsset \n                      ? \"Updating...\" \n                      : \"Creating...\"\n                    : editingAsset \n                      ? \"Update Asset\" \n                      : \"Create Asset\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n            <div className=\"flex flex-col sm:flex-row gap-2 w-full sm:w-auto\">\n              <div className=\"w-full sm:w-64\">\n                <SearchBar\n                  placeholder=\"Search assets...\"\n                  value={searchQuery}\n                  onChange={setSearchQuery}\n                  className=\"w-full\"\n                />\n              </div>\n              <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                <SelectTrigger className=\"w-full sm:w-48\">\n                  <SelectValue placeholder=\"All Categories\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {categories.map((category) => (\n                    <SelectItem key={category} value={category}>\n                      {category.charAt(0).toUpperCase() + category.slice(1)}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <SortableTableHeader\n                      sortKey=\"name\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Asset\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"category\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                      className=\"hidden sm:table-cell\"\n                    >\n                      Category\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"location\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                      className=\"hidden md:table-cell\"\n                    >\n                      Location\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"condition\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Condition\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"currentValue\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                      className=\"hidden lg:table-cell\"\n                    >\n                      Value\n                    </SortableTableHeader>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sortedData.map((asset: any) => (\n                    <TableRow key={asset.id}>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                            <Package className=\"h-4 w-4 text-primary\" />\n                          </div>\n                          <div>\n                            <div className=\"font-medium\">{asset.name}</div>\n                            <div className=\"text-sm text-muted-foreground sm:hidden\">\n                              {asset.category}\n                            </div>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"hidden sm:table-cell\">\n                        <Badge variant=\"outline\">\n                          {asset.category?.charAt(0).toUpperCase() +\n                            asset.category?.slice(1)}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"hidden md:table-cell\">\n                        {asset.location || \"N/A\"}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={getConditionBadge(asset.condition)}>\n                          {asset.condition?.charAt(0).toUpperCase() +\n                            asset.condition?.slice(1)}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"hidden lg:table-cell\">\n                        <div className=\"text-sm\">\n                          {asset.currentValue && (\n                            <div className=\"font-medium\">\n                              ${parseFloat(asset.currentValue).toFixed(2)}\n                            </div>\n                          )}\n                          {asset.purchasePrice && (\n                            <div className=\"text-muted-foreground\">\n                              Purchased: $\n                              {parseFloat(asset.purchasePrice).toFixed(2)}\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-1\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(asset)}\n                            className=\"text-blue-600 hover:text-blue-800 focus:outline-none\"\n                            title=\"Edit\"\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <DeleteConfirmationDialog\n                            trigger={\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"text-red-600 hover:text-red-800 focus:outline-none\"\n                                title=\"Delete\"\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            }\n                            title=\"Delete Asset\"\n                            itemName={asset.name}\n                            onConfirm={() => deleteMutation.mutate(asset.id)}\n                            isLoading={deleteMutation.isPending}\n                          />\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              {filteredAssets.length === 0 && (\n                <div className=\"text-center py-8\">\n                  <Package className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-muted-foreground mb-2\">\n                    No assets found\n                  </h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    {searchQuery || categoryFilter !== \"all\"\n                      ? \"Try adjusting your search criteria\"\n                      : \"Start by adding your first asset\"}\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":23347},"client/src/pages/attendance.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Clock, Edit, Trash2, CalendarDays, Timer } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport SearchBar from \"@/components/search-bar\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\n\nexport default function AttendanceManagement() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedStaff, setSelectedStaff] = useState<string>(\"all\");\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingRecord, setEditingRecord] = useState<any>(null);\n  const [formData, setFormData] = useState({\n    staffId: \"\",\n    date: \"\",\n    clockIn: \"\",\n    clockOut: \"\",\n    breakStart: \"\",\n    breakEnd: \"\",\n    status: \"present\",\n    notes: \"\",\n  });\n\n  const { toast } = useToast();\n\n  // Set default date range (current week)\n  useEffect(() => {\n    const today = new Date();\n    const startOfWeek = new Date(today);\n    startOfWeek.setDate(today.getDate() - today.getDay());\n    const endOfWeek = new Date(today);\n    endOfWeek.setDate(today.getDate() + (6 - today.getDay()));\n\n    setStartDate(startOfWeek.toISOString().split('T')[0]);\n    setEndDate(endOfWeek.toISOString().split('T')[0]);\n  }, []);\n\n  const { data: staff = [] } = useQuery({\n    queryKey: [\"/api/staff\"],\n  });\n\n  const { data: attendance = [], isLoading } = useQuery({\n    queryKey: [\"/api/attendance\", selectedStaff, startDate, endDate],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      if (selectedStaff && selectedStaff !== \"all\") params.append('staffId', selectedStaff);\n      if (startDate) params.append('startDate', startDate);\n      if (endDate) params.append('endDate', endDate);\n\n      return apiRequest(\"GET\", `/api/attendance?${params.toString()}`);\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", \"/api/attendance\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Attendance record created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance\"] });\n      setIsDialogOpen(false);\n      resetForm();\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"PUT\", `/api/attendance/${editingRecord?.id}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Attendance record updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance\"] });\n      setIsDialogOpen(false);\n      resetForm();\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"DELETE\", `/api/attendance/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Attendance record deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance\"] });\n    },\n  });\n\n  const clockInMutation = useMutation({\n    mutationFn: async (staffId: number) => {\n      await apiRequest(\"POST\", \"/api/attendance/clock-in\", { staffId });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Clocked in successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to clock in\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const clockOutMutation = useMutation({\n    mutationFn: async (staffId: number) => {\n      await apiRequest(\"POST\", \"/api/attendance/clock-out\", { staffId });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Clocked out successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to clock out\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      staffId: \"\",\n      date: \"\",\n      clockIn: \"\",\n      clockOut: \"\",\n      breakStart: \"\",\n      breakEnd: \"\",\n      status: \"present\",\n      notes: \"\",\n    });\n    setEditingRecord(null);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!formData.staffId || !formData.date) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const submitData = { ...formData };\n    if (submitData.clockIn && submitData.clockOut) {\n      const clockIn = new Date(`${submitData.date}T${submitData.clockIn}`);\n      const clockOut = new Date(`${submitData.date}T${submitData.clockOut}`);\n      const hours = (clockOut.getTime() - clockIn.getTime()) / (1000 * 60 * 60);\n      submitData.totalHours = hours.toString();\n    }\n\n    if (editingRecord) {\n      updateMutation.mutate(submitData);\n    } else {\n      createMutation.mutate(submitData);\n    }\n  };\n\n  const handleEdit = (record: any) => {\n    setEditingRecord(record);\n    const date = new Date(record.date);\n    setFormData({\n      staffId: record.staffId?.toString() || \"\",\n      date: format(date, 'yyyy-MM-dd'),\n      clockIn: record.clockIn ? format(new Date(record.clockIn), 'HH:mm') : \"\",\n      clockOut: record.clockOut ? format(new Date(record.clockOut), 'HH:mm') : \"\",\n      breakStart: record.breakStart ? format(new Date(record.breakStart), 'HH:mm') : \"\",\n      breakEnd: record.breakEnd ? format(new Date(record.breakEnd), 'HH:mm') : \"\",\n      status: record.status || \"present\",\n      notes: record.notes || \"\",\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = async (id: number) => {\n    if (window.confirm(\"Are you sure you want to delete this attendance record?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleClockIn = (staffId: number) => {\n    clockInMutation.mutate(staffId);\n  };\n\n  const handleClockOut = (staffId: number) => {\n    clockOutMutation.mutate(staffId);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      present: { variant: \"default\" as const, label: \"Present\" },\n      absent: { variant: \"destructive\" as const, label: \"Absent\" },\n      late: { variant: \"secondary\" as const, label: \"Late\" },\n      \"half-day\": { variant: \"outline\" as const, label: \"Half Day\" },\n      sick: { variant: \"secondary\" as const, label: \"Sick\" },\n      vacation: { variant: \"outline\" as const, label: \"Vacation\" },\n    };\n\n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.present;\n    return <Badge variant={config.variant}>{config.label}</Badge>;\n  };\n\n  const filteredAttendance = attendance.filter((record: any) =>\n    record.staffName?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const todaysAttendance = attendance.filter((record: any) => {\n    const recordDate = new Date(record.date);\n    const today = new Date();\n    return recordDate.toDateString() === today.toDateString();\n  });\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n            <Clock className=\"h-8 w-8\" />\n            Attendance Management\n          </h1>\n          <p className=\"text-muted-foreground\">Track staff attendance and working hours</p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={() => resetForm()}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Attendance Record\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {editingRecord ? \"Edit Attendance Record\" : \"Add Attendance Record\"}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"staffId\">Staff Member *</Label>\n                <Select\n                  value={formData.staffId}\n                  onValueChange={(value) => setFormData({ ...formData, staffId: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select staff member\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {staff.map((member: any) => (\n                      <SelectItem key={member.id} value={member.id.toString()}>\n                        {member.firstName} {member.lastName} - {member.position}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"date\">Date *</Label>\n                <Input\n                  id=\"date\"\n                  type=\"date\"\n                  value={formData.date}\n                  onChange={(e) => setFormData({ ...formData, date: e.target.value })}\n                  required\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"clockIn\">Clock In</Label>\n                  <Input\n                    id=\"clockIn\"\n                    type=\"time\"\n                    value={formData.clockIn}\n                    onChange={(e) => setFormData({ ...formData, clockIn: e.target.value })}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"clockOut\">Clock Out</Label>\n                  <Input\n                    id=\"clockOut\"\n                    type=\"time\"\n                    value={formData.clockOut}\n                    onChange={(e) => setFormData({ ...formData, clockOut: e.target.value })}\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"breakStart\">Break Start</Label>\n                  <Input\n                    id=\"breakStart\"\n                    type=\"time\"\n                    value={formData.breakStart}\n                    onChange={(e) => setFormData({ ...formData, breakStart: e.target.value })}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"breakEnd\">Break End</Label>\n                  <Input\n                    id=\"breakEnd\"\n                    type=\"time\"\n                    value={formData.breakEnd}\n                    onChange={(e) => setFormData({ ...formData, breakEnd: e.target.value })}\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"status\">Status</Label>\n                <Select\n                  value={formData.status}\n                  onValueChange={(value) => setFormData({ ...formData, status: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"present\">Present</SelectItem>\n                    <SelectItem value=\"absent\">Absent</SelectItem>\n                    <SelectItem value=\"late\">Late</SelectItem>\n                    <SelectItem value=\"half-day\">Half Day</SelectItem>\n                    <SelectItem value=\"sick\">Sick</SelectItem>\n                    <SelectItem value=\"vacation\">Vacation</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"notes\">Notes</Label>\n                <Textarea\n                  id=\"notes\"\n                  value={formData.notes}\n                  onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                  placeholder=\"Optional notes\"\n                />\n              </div>\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createMutation.isPending || updateMutation.isPending}\n                >\n                  {createMutation.isPending || updateMutation.isPending\n                    ? \"Saving...\"\n                    : editingRecord\n                    ? \"Update\"\n                    : \"Create\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Quick Clock In/Out */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Timer className=\"h-5 w-5\" />\n            Quick Clock In/Out\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {staff.map((member: any) => {\n              const todayRecord = todaysAttendance.find((record: any) => record.staffId === member.id);\n              return (\n                <div key={member.id} className=\"border rounded-lg p-4\">\n                  <div className=\"font-medium\">{member.firstName} {member.lastName}</div>\n                  <div className=\"text-sm text-muted-foreground\">{member.position}</div>\n                  <div className=\"mt-2 space-x-2\">\n                    {!todayRecord || !todayRecord.clockIn ? (\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleClockIn(member.id)}\n                        disabled={clockInMutation.isPending}\n                      >\n                        Clock In\n                      </Button>\n                    ) : !todayRecord.clockOut ? (\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleClockOut(member.id)}\n                        disabled={clockOutMutation.isPending}\n                      >\n                        Clock Out\n                      </Button>\n                    ) : (\n                      <Badge variant=\"default\">Complete</Badge>\n                    )}\n                  </div>\n                  {todayRecord && (\n                    <div className=\"text-xs text-muted-foreground mt-1\">\n                      {todayRecord.clockIn && `In: ${format(new Date(todayRecord.clockIn), 'HH:mm')}`}\n                      {todayRecord.clockOut && ` Out: ${format(new Date(todayRecord.clockOut), 'HH:mm')}`}\n                    </div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <Label htmlFor=\"staffFilter\">Staff Member</Label>\n              <Select value={selectedStaff} onValueChange={setSelectedStaff}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All staff\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All staff</SelectItem>\n                  {staff.map((member: any) => (\n                    <SelectItem key={member.id} value={member.id.toString()}>\n                      {member.firstName} {member.lastName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"startDate\">Start Date</Label>\n              <Input\n                id=\"startDate\"\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"endDate\">End Date</Label>\n              <Input\n                id=\"endDate\"\n                type=\"date\"\n                value={endDate}\n                onChange={(e) => setEndDate(e.target.value)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"search\">Search</Label>\n              <SearchBar\n                placeholder=\"Search attendance...\"\n                value={searchQuery}\n                onChange={setSearchQuery}\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Attendance Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <CalendarDays className=\"h-5 w-5\" />\n            Attendance Records ({filteredAttendance.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n              <p className=\"text-muted-foreground mt-2\">Loading attendance...</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Date</TableHead>\n                    <TableHead>Staff Member</TableHead>\n                    <TableHead>Clock In</TableHead>\n                    <TableHead>Clock Out</TableHead>\n                    <TableHead>Break</TableHead>\n                    <TableHead>Total Hours</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredAttendance.map((record: any) => (\n                    <TableRow key={record.id}>\n                      <TableCell>\n                        {format(new Date(record.date), 'MMM dd, yyyy')}\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{record.staffName}</div>\n                          <div className=\"text-sm text-muted-foreground\">{record.staffPosition}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {record.clockIn ? format(new Date(record.clockIn), 'HH:mm') : '-'}\n                      </TableCell>\n                      <TableCell>\n                        {record.clockOut ? format(new Date(record.clockOut), 'HH:mm') : '-'}\n                      </TableCell>\n                      <TableCell>\n                        {record.breakStart && record.breakEnd ? (\n                          <div className=\"text-sm\">\n                            {format(new Date(record.breakStart), 'HH:mm')} - {format(new Date(record.breakEnd), 'HH:mm')}\n                          </div>\n                        ) : '-'}\n                      </TableCell>\n                      <TableCell>\n                        {record.totalHours ? `${parseFloat(record.totalHours).toFixed(2)}h` : '-'}\n                      </TableCell>\n                      <TableCell>{getStatusBadge(record.status)}</TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(record)}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(record.id)}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":21349},"client/src/pages/billing.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Plus,\n  FileText,\n  Download,\n  Printer,\n  Eye,\n  Edit,\n  Trash2,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nimport { ProtectedRoute } from \"@/components/protected-route\";\n\nfunction BillingContent() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingBill, setEditingBill] = useState<any>(null);\n  const [selectedCustomer, setSelectedCustomer] = useState(\"\");\n  const [billItems, setBillItems] = useState([\n    { productId: \"\", quantity: 1, unitPrice: 0 },\n  ]);\n  const { toast } = useToast();\n\n  const { data: bills = [], isLoading } = useQuery({\n    queryKey: [\"/api/bills\"],\n    retry: (failureCount, error) => {\n      if (isUnauthorizedError(error)) return false;\n      return failureCount < 3;\n    },\n  });\n\n  const { data: customers = [] } = useQuery({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const { data: products = [] } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/bills\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bills\"] });\n      setIsDialogOpen(false);\n      resetForm();\n      toast({ title: \"Success\", description: \"Bill created successfully\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create bill\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => apiRequest(\"DELETE\", `/api/bills/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bills\"] });\n      toast({ title: \"Success\", description: \"Bill deleted successfully\" });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete bill\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setEditingBill(null);\n    setSelectedCustomer(\"\");\n    setBillItems([{ productId: \"\", quantity: 1, unitPrice: 0 }]);\n  };\n\n  const addBillItem = () => {\n    setBillItems([...billItems, { productId: \"\", quantity: 1, unitPrice: 0 }]);\n  };\n\n  const removeBillItem = (index: number) => {\n    setBillItems(billItems.filter((_, i) => i !== index));\n  };\n\n  const updateBillItem = (index: number, field: string, value: any) => {\n    const updatedItems = [...billItems];\n    updatedItems[index] = { ...updatedItems[index], [field]: value };\n    setBillItems(updatedItems);\n  };\n\n  const calculateTotal = () => {\n    return billItems.reduce(\n      (total, item) => total + item.quantity * item.unitPrice,\n      0,\n    );\n  };\n\n  const handleSave = (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n\n    if (!selectedCustomer) {\n      toast({\n        title: \"Error\",\n        description: \"Customer is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (billItems.length === 0 || billItems.some((item) => !item.productId)) {\n      toast({\n        title: \"Error\",\n        description: \"At least one product is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const data = {\n      customerId: parseInt(selectedCustomer),\n      billDate: new Date(formData.get(\"billDate\") as string),\n      dueDate: new Date(formData.get(\"dueDate\") as string),\n      items: billItems,\n      notes: (formData.get(\"notes\") as string)?.trim() || null,\n      discount: parseFloat(formData.get(\"discount\") as string) || 0,\n      tax: parseFloat(formData.get(\"tax\") as string) || 0,\n    };\n\n    createMutation.mutate(data);\n  };\n\n  const printBill = (bill: any) => {\n    const printWindow = window.open(\"\", \"_blank\");\n    if (printWindow) {\n      printWindow.document.write(generateBillHTML(bill));\n      printWindow.document.close();\n      printWindow.print();\n    }\n  };\n\n  const downloadBill = (bill: any) => {\n    const billHTML = generateBillHTML(bill);\n    const blob = new Blob([billHTML], { type: \"text/html\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `bill_${bill.billNumber}.html`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const generateBillHTML = (bill: any) => {\n    return `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Bill ${bill.billNumber}</title>\n          <style>\n            body { font-family: Arial, sans-serif; margin: 20px; }\n            .header { text-align: center; margin-bottom: 30px; }\n            .bill-details { margin-bottom: 20px; }\n            .table { width: 100%; border-collapse: collapse; }\n            .table th, .table td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n            .table th { background-color: #f2f2f2; }\n            .total { text-align: right; margin-top: 20px; font-weight: bold; }\n          </style>\n        </head>\n        <body>\n          <div class=\"header\">\n            <h1>Bake Sewa</h1>\n            <h2>Invoice</h2>\n          </div>\n          <div class=\"bill-details\">\n            <p><strong>Bill Number:</strong> ${bill.billNumber}</p>\n            <p><strong>Customer:</strong> ${bill.customerName}</p>\n            <p><strong>Date:</strong> ${new Date(bill.billDate).toLocaleDateString()}</p>\n            <p><strong>Due Date:</strong> ${new Date(bill.dueDate).toLocaleDateString()}</p>\n          </div>\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <th>Product</th>\n                <th>Quantity</th>\n                <th>Unit</th>\n                <th>Unit Price</th>\n                <th>Total</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${\n                bill.items\n                  ?.map(\n                    (item: any) => `\n                <tr>\n                  <td>${item.productName}</td>\n                  <td>${item.quantity}</td>\n                  <td>${item.unit || 'N/A'}</td>\n                  <td>$${item.unitPrice.toFixed(2)}</td>\n                  <td>$${(item.quantity * item.unitPrice).toFixed(2)}</td>\n                </tr>\n              `,\n                  )\n                  .join(\"\") || \"\"\n              }\n            </tbody>\n          </table>\n          <div class=\"total\">\n            <p>Subtotal: $${(bill.totalAmount - bill.tax + bill.discount).toFixed(2)}</p>\n            <p>Discount: $${bill.discount.toFixed(2)}</p>\n            <p>Tax: $${bill.tax.toFixed(2)}</p>\n            <p><strong>Total: $${bill.totalAmount.toFixed(2)}</strong></p>\n          </div>\n          ${bill.notes ? `<div style=\"margin-top: 20px;\"><strong>Notes:</strong> ${bill.notes}</div>` : \"\"}\n        </body>\n      </html>\n    `;\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants: Record<\n      string,\n      \"default\" | \"secondary\" | \"destructive\" | \"outline\"\n    > = {\n      paid: \"default\",\n      pending: \"secondary\",\n      overdue: \"destructive\",\n      cancelled: \"outline\",\n    };\n    return variants[status] || \"outline\";\n  };\n\n  return (\n    <div className=\"p-4 sm:p-6 space-y-6\">\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Billing & Invoices</h1>\n          <p className=\"text-gray-600\">Create and manage customer bills</p>\n        </div>\n        <Dialog\n          open={isDialogOpen}\n          onOpenChange={(open) => {\n            setIsDialogOpen(open);\n            if (!open) resetForm();\n          }}\n        >\n          <DialogTrigger asChild>\n            <Button className=\"w-full sm:w-auto\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Bill\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Create New Bill</DialogTitle>\n              <DialogDescription>Enter bill details below</DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSave} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Select\n                    value={selectedCustomer}\n                    onValueChange={setSelectedCustomer}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select Customer\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {customers.map((customer: any) => (\n                        <SelectItem\n                          key={customer.id}\n                          value={customer.id.toString()}\n                        >\n                          {customer.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <Input\n                  name=\"billDate\"\n                  type=\"date\"\n                  defaultValue={new Date().toISOString().split(\"T\")[0]}\n                  required\n                />\n              </div>\n              <Input\n                name=\"dueDate\"\n                type=\"date\"\n                placeholder=\"Due Date\"\n                required\n              />\n\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Bill Items</label>\n                {billItems.map((item, index) => (\n                  <div key={index} className=\"flex gap-2 items-center\">\n                    <Select\n                      value={item.productId}\n                      onValueChange={(value) => {\n                        updateBillItem(index, \"productId\", value);\n                        const product = products.find(\n                          (p: any) => p.id.toString() === value,\n                        );\n                        if (product) {\n                          updateBillItem(index, \"unitPrice\", product.price);\n                        }\n                      }}\n                    >\n                      <SelectTrigger className=\"flex-1\">\n                        <SelectValue placeholder=\"Select Product\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {products.map((product: any) => (\n                          <SelectItem\n                            key={product.id}\n                            value={product.id.toString()}\n                          >\n                            {product.name} - Rs. {product.price}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"Qty\"\n                      value={item.quantity}\n                      onChange={(e) =>\n                        updateBillItem(\n                          index,\n                          \"quantity\",\n                          parseInt(e.target.value) || 1,\n                        )\n                      }\n                      className=\"w-20\"\n                    />\n                    <div className=\"text-sm text-gray-600 w-16 flex items-center\">\n                      {(() => {\n                        const product = products.find((p: any) => p.id.toString() === item.productId);\n                        return product?.unitAbbreviation || product?.unit || \"N/A\";\n                      })()}\n                    </div>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"Price\"\n                      value={item.unitPrice}\n                      onChange={(e) =>\n                        updateBillItem(\n                          index,\n                          \"unitPrice\",\n                          parseFloat(e.target.value) || 0,\n                        )\n                      }\n                      className=\"w-24\"\n                    />\n                    {billItems.length > 1 && (\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => removeBillItem(index)}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n                ))}\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={addBillItem}\n                  className=\"w-full\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Item\n                </Button>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <Input\n                  name=\"discount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  placeholder=\"Discount ($)\"\n                  defaultValue=\"0\"\n                />\n                <Input\n                  name=\"tax\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  placeholder=\"Tax ($)\"\n                  defaultValue=\"0\"\n                />\n              </div>\n\n              <Textarea name=\"notes\" placeholder=\"Notes (optional)\" rows={3} />\n\n              <div className=\"text-right\">\n                <p className=\"text-lg font-semibold\">\n                  Total: ${calculateTotal().toFixed(2)}\n                </p>\n              </div>\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={createMutation.isPending}>\n                  Create Bill\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Bills</CardTitle>\n          <CardDescription>Manage customer bills and invoices</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Bill Number</TableHead>\n                    <TableHead>Customer</TableHead>\n                    <TableHead>Date</TableHead>\n                    <TableHead>Due Date</TableHead>\n                    <TableHead>Amount</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {bills.map((bill: any) => (\n                    <TableRow key={bill.id}>\n                      <TableCell className=\"font-medium\">\n                        {bill.billNumber}\n                      </TableCell>\n                      <TableCell>{bill.customerName}</TableCell>\n                      <TableCell>\n                        {new Date(bill.billDate).toLocaleDateString()}\n                      </TableCell>\n                      <TableCell>\n                        {new Date(bill.dueDate).toLocaleDateString()}\n                      </TableCell>\n                      <TableCell>${bill.totalAmount.toFixed(2)}</TableCell>\n                      <TableCell>\n                        <Badge variant={getStatusBadge(bill.status)}>\n                          {bill.status.toUpperCase()}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-1\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => printBill(bill)}\n                            title=\"Print\"\n                          >\n                            <Printer className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => downloadBill(bill)}\n                            title=\"Download\"\n                          >\n                            <Download className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => deleteMutation.mutate(bill.id)}\n                            disabled={deleteMutation.isPending}\n                            title=\"Delete\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              {bills.length === 0 && (\n                <div className=\"text-center py-8\">\n                  <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-muted-foreground mb-2\">\n                    No bills found\n                  </h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Start by creating your first bill\n                  </p>\n                  <Button onClick={() => setIsDialogOpen(true)}>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Create Bill\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default function Billing() {\n  return (\n    <ProtectedRoute resource=\"billing\" action=\"read\">\n      <BillingContent />\n    </ProtectedRoute>\n  );\n}","size_bytes":19475},"client/src/pages/category-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Plus, Edit, Trash2, Tag } from \"lucide-react\";\n\ninterface Category {\n  id: number;\n  name: string;\n  description?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function CategoryManagement() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<Category | null>(null);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n  });\n\n  const { data: categories = [], isLoading } = useQuery({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: { name: string; description?: string }) => {\n      const response = await fetch(\"/api/categories\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to create category\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({ title: \"Success\", description: \"Category created successfully\" });\n      handleCloseDialog();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({\n      id,\n      data,\n    }: {\n      id: number;\n      data: { name: string; description?: string };\n    }) => {\n      const response = await fetch(`/api/categories/${id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to update category\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({ title: \"Success\", description: \"Category updated successfully\" });\n      handleCloseDialog();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/categories/${id}`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to delete category\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({ title: \"Success\", description: \"Category deleted successfully\" });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.name.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Category name is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (editingCategory) {\n      updateMutation.mutate({ id: editingCategory.id, data: formData });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const handleEdit = (category: Category) => {\n    setEditingCategory(category);\n    setFormData({\n      name: category.name,\n      description: category.description || \"\",\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setIsDialogOpen(false);\n    setEditingCategory(null);\n    setFormData({ name: \"\", description: \"\" });\n  };\n\n  const handleDelete = (id: number) => {\n    if (confirm(\"Are you sure you want to delete this category?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"text-center\">Loading categories...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Category Management</h1>\n          <p className=\"text-gray-600\">\n            Organize your products, inventory, and transactions with categories\n          </p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Category\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {editingCategory ? \"Edit Category\" : \"Create New Category\"}\n              </DialogTitle>\n              <DialogDescription>\n                {editingCategory\n                  ? \"Update the category details\"\n                  : \"Add a new category to organize your data\"}\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">Category Name *</Label>\n                <Input\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) =>\n                    setFormData({ ...formData, name: e.target.value })\n                  }\n                  placeholder=\"Enter category name\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) =>\n                    setFormData({ ...formData, description: e.target.value })\n                  }\n                  placeholder=\"Enter category description (optional)\"\n                  rows={3}\n                />\n              </div>\n              <div className=\"flex justify-end gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={handleCloseDialog}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={\n                    createMutation.isPending || updateMutation.isPending\n                  }\n                >\n                  {editingCategory ? \"Update\" : \"Create\"} Category\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {categories.map((category: Category) => (\n          <Card key={category.id}>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <Tag className=\"h-5 w-5\" />\n                  {category.name}\n                </CardTitle>\n                <div className=\"flex gap-1\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleEdit(category)}\n                    className=\"text-blue-600 hover:text-blue-800 focus:outline-none\"\n                    title=\"Edit\"\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleDelete(category.id)}\n                    className=\"text-red-600 hover:text-red-800 focus:outline-none\"\n                    title=\"Delete\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            {category.description && (\n              <CardContent>\n                <CardDescription>{category.description}</CardDescription>\n              </CardContent>\n            )}\n          </Card>\n        ))}\n      </div>\n\n      {categories.length === 0 && (\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <Tag className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-lg font-medium mb-2\">No categories yet</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Create your first category to start organizing your data\n            </p>\n            <Button onClick={() => setIsDialogOpen(true)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Category\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":9476},"client/src/pages/customers.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  PermissionWrapper,\n  ReadOnlyWrapper,\n} from \"@/components/permission-wrapper\";\nimport { Input } from \"@/components/ui/input\";\nimport SearchBar from \"@/components/search-bar\";\nimport { useTableSort } from \"@/hooks/useTableSort\";\nimport { SortableTableHeader } from \"@/components/ui/sortable-table-header\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Plus,\n  Search,\n  Edit,\n  Trash2,\n  Users,\n  Eye,\n  FileText,\n  Download,\n  Calendar,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\nimport { DeleteConfirmationDialog } from \"@/components/ui/delete-confirmation-dialog\";\nimport { format } from \"date-fns\";\nimport {\n  Pagination,\n  PaginationInfo,\n  PageSizeSelector,\n  usePagination,\n} from \"@/components/ui/pagination\";\n\ninterface LedgerTransaction {\n  id: number;\n  transactionDate: string;\n  description: string;\n  referenceNumber?: string;\n  debitAmount: string;\n  creditAmount: string;\n  runningBalance: string;\n  transactionType: string;\n  paymentMethod?: string;\n  notes?: string;\n}\n\nexport default function Customers() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [isTransactionDialogOpen, setIsTransactionDialogOpen] = useState(false);\n  const [isLedgerDialogOpen, setIsLedgerDialogOpen] = useState(false);\n  const [editingCustomer, setEditingCustomer] = useState<any>(null);\n  const [selectedCustomer, setSelectedCustomer] = useState<any>(null);\n  const [transactionType, setTransactionType] = useState(\"\");\n  const { toast } = useToast();\n  const { formatCurrency } = useCurrency();\n\n  const {\n    data: customers = [],\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\"/api/customers\"],\n    retry: (failureCount, error) => {\n      if (isUnauthorizedError(error)) return false;\n      return failureCount < 3;\n    },\n  });\n\n  const { data: ledgerTransactions = [] } = useQuery({\n    queryKey: [\"/api/ledger/customer\", selectedCustomer?.id],\n    enabled: !!selectedCustomer?.id,\n    retry: (failureCount, error) => {\n      if (isUnauthorizedError(error)) return false;\n      return failureCount < 3;\n    },\n  });\n\n  const createCustomerMutation = useMutation({\n    mutationFn: async (customerData: any) => {\n      console.log(\"Submitting customer data:\", customerData);\n      return await apiRequest(\"POST\", \"/api/customers\", customerData);\n    },\n    onSuccess: (data) => {\n      console.log(\"Customer created successfully:\", data);\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      setIsDialogOpen(false);\n      setEditingCustomer(null);\n      setFormErrors({});\n      toast({\n        title: \"Success\",\n        description: \"Customer created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Create customer error:\", error);\n\n      // Handle unauthorized errors\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n\n      // Handle validation errors\n      if (error.response?.data?.errors) {\n        setFormErrors(error.response.data.errors);\n        toast({\n          title: \"Validation Error\",\n          description: \"Please check the form for errors\",\n          variant: \"destructive\",\n        });\n      } else {\n        const errorMessage = error.response?.data?.message || error.message || \"Failed to create customer\";\n        toast({\n          title: \"Error\",\n          description: errorMessage,\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: any }) =>\n      apiRequest(\"PUT\", `/api/customers/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      setIsDialogOpen(false);\n      setEditingCustomer(null);\n      toast({ title: \"Success\", description: \"Customer updated successfully\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update customer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => apiRequest(\"DELETE\", `/api/customers/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      toast({ title: \"Success\", description: \"Customer deleted successfully\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete customer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const transactionMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/ledger\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/ledger/customer\", selectedCustomer?.id],\n      });\n      setIsTransactionDialogOpen(false);\n      setTransactionType(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Transaction added successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add transaction\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n    const data = {\n      name: formData.get(\"name\") as string,\n      email: (formData.get(\"email\") as string) || null,\n      phone: (formData.get(\"phone\") as string) || null,\n      address: (formData.get(\"address\") as string) || null,\n      openingBalance: formData.get(\"openingBalance\")\n        ? parseFloat(formData.get(\"openingBalance\") as string) || 0\n        : 0,\n    };\n\n    if (editingCustomer) {\n      updateMutation.mutate({ id: editingCustomer.id, data });\n    } else {\n      createCustomerMutation.mutate(data);\n    }\n  };\n\n  const handleTransactionSave = (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n\n    const amount = parseFloat(formData.get(\"amount\") as string);\n    const isDebit =\n      transactionType === \"sale\" || transactionType === \"adjustment_debit\";\n\n    const data = {\n      customerOrPartyId: selectedCustomer.id,\n      entityType: \"customer\",\n      transactionDate: formData.get(\"transactionDate\") as string,\n      description: formData.get(\"description\") as string,\n      referenceNumber: formData.get(\"referenceNumber\") as string,\n      debitAmount: isDebit ? amount : 0,\n      creditAmount: !isDebit ? amount : 0,\n      transactionType,\n      paymentMethod: formData.get(\"paymentMethod\") as string,\n      notes: formData.get(\"notes\") as string,\n    };\n\n    transactionMutation.mutate(data);\n  };\n\n  const exportLedger = () => {\n    const csvContent = [\n      [\"Date\", \"Description\", \"Reference\", \"Debit\", \"Credit\", \"Balance\"].join(\n        \",\",\n      ),\n      ...ledgerTransactions.map((txn: LedgerTransaction) =>\n        [\n          format(new Date(txn.transactionDate), \"dd/MM/yyyy\"),\n          txn.description,\n          txn.referenceNumber || \"\",\n          txn.debitAmount,\n          txn.creditAmount,\n          txn.runningBalance,\n        ].join(\",\"),\n      ),\n    ].join(\"\\n\");\n\n    const blob = new Blob([csvContent], { type: \"text/csv\" });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `${selectedCustomer?.name}_ledger.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n\n    toast({\n      title: \"Export Successful\",\n      description: \"Ledger exported to CSV file\",\n    });\n  };\n\n  const filteredCustomers = (customers as any[]).filter(\n    (customer: any) =>\n      customer.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      customer.email?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      customer.phone?.toLowerCase().includes(searchQuery.toLowerCase()),\n  );\n\n  // Add sorting functionality\n  const { sortedData, sortConfig, requestSort } = useTableSort(filteredCustomers, 'name');\n\n  // Add pagination\n  const pagination = usePagination(sortedData, 10);\n  const {\n    currentPage,\n    pageSize,\n    totalPages,\n    totalItems,\n    paginatedData: paginatedCustomers,\n    handlePageChange,\n    handlePageSizeChange,\n  } = pagination;\n\n  const getBalanceBadge = (balance: any) => {\n    const amount = parseFloat(balance || 0);\n    if (amount > 0) {\n      return { variant: \"default\" as const, text: `${formatCurrency(amount)}` };\n    } else if (amount < 0) {\n      return {\n        variant: \"destructive\" as const,\n        text: `${formatCurrency(Math.abs(amount))}`,\n      };\n    }\n    return { variant: \"secondary\" as const, text: formatCurrency(0) };\n  };\n\n  if (error && isUnauthorizedError(error)) {\n    toast({\n      title: \"Unauthorized\",\n      description: \"You are logged out. Logging in again...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n    return null;\n  }\n\n  const [formErrors, setFormErrors] = useState<any>({});\n\n  return (\n    <div className=\"p-4 sm:p-6 space-y-6\">\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <p className=\"text-gray-600\">\n            Manage customer accounts with complete transaction history\n          </p>\n        </div>\n        <PermissionWrapper resource=\"customers\" action=\"write\">\n          <Dialog\n            open={isDialogOpen}\n            onOpenChange={(open) => {\n              setIsDialogOpen(open);\n              if (!open) {\n                setEditingCustomer(null);\n                setFormErrors({});\n              }\n            }}\n          >\n            <DialogTrigger asChild>\n              <Button\n                onClick={() => setEditingCustomer(null)}\n                className=\"w-full sm:w-auto\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Customer\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md mx-auto max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingCustomer ? \"Edit Customer\" : \"Add New Customer\"}\n                </DialogTitle>\n                <DialogDescription>\n                  Enter customer details below\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleSave} className=\"space-y-4\">\n                <Input\n                  name=\"name\"\n                  placeholder=\"Customer Name\"\n                  defaultValue={editingCustomer?.name || \"\"}\n                  required\n                />\n                  {formErrors.name && (\n                      <p className=\"text-red-500 text-sm\">{formErrors.name}</p>\n                  )}\n                <Input\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"Email Address\"\n                  defaultValue={editingCustomer?.email || \"\"}\n                />\n                  {formErrors.email && (\n                      <p className=\"text-red-500 text-sm\">{formErrors.email}</p>\n                  )}\n                <Input\n                  name=\"phone\"\n                  placeholder=\"Phone Number\"\n                  defaultValue={editingCustomer?.phone || \"\"}\n                />\n                  {formErrors.phone && (\n                      <p className=\"text-red-500 text-sm\">{formErrors.phone}</p>\n                  )}\n                <Textarea\n                  name=\"address\"\n                  placeholder=\"Address\"\n                  defaultValue={editingCustomer?.address || \"\"}\n                  rows={3}\n                />\n                  {formErrors.address && (\n                      <p className=\"text-red-500 text-sm\">{formErrors.address}</p>\n                  )}\n                <Input\n                  name=\"openingBalance\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  placeholder=\"Opening Balance\"\n                  defaultValue={editingCustomer?.openingBalance || \"0\"}\n                />\n                  {formErrors.openingBalance && (\n                      <p className=\"text-red-500 text-sm\">{formErrors.openingBalance}</p>\n                  )}\n                <div className=\"flex flex-col sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsDialogOpen(false)}\n                    className=\"w-full sm:w-auto\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={\n                      createCustomerMutation.isPending || updateMutation.isPending\n                    }\n                    className=\"w-full sm:w-auto\"\n                  >\n                    {editingCustomer ? \"Update\" : \"Create\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </PermissionWrapper>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n            <CardTitle>Customers List</CardTitle>\n            <div className=\"w-full sm:w-64\">\n              <SearchBar\n                placeholder=\"Search customers...\"\n                value={searchQuery}\n                onChange={setSearchQuery}\n                className=\"w-full\"\n              />\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <SortableTableHeader sortKey=\"name\" sortConfig={sortConfig} onSort={requestSort}>\n                      Customer\n                    </SortableTableHeader>\n                    <SortableTableHeader sortKey=\"email\" sortConfig={sortConfig} onSort={requestSort} className=\"hidden md:table-cell\">\n                      Contact\n                    </SortableTableHeader>\n                    <SortableTableHeader sortKey=\"currentBalance\" sortConfig={sortConfig} onSort={requestSort}>\n                      Current Balance\n                    </SortableTableHeader>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {paginatedCustomers && paginatedCustomers.length > 0 ? (\n                    paginatedCustomers.map((customer: any) => {\n                    const balanceInfo = getBalanceBadge(\n                      customer.currentBalance,\n                    );\n                    return (\n                      <TableRow key={customer.id}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                              <Users className=\"h-4 w-4 text-primary\" />\n                            </div>\n                            <div>\n                              <div className=\"font-medium\">{customer.name}</div>\n                              <div className=\"text-sm text-muted-foreground md:hidden\">\n                                {customer.email || customer.phone}\n                              </div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          <div>\n                            {customer.email && (\n                              <div className=\"text-sm\">{customer.email}</div>\n                            )}\n                            {customer.phone && (\n                              <div className=\"text-sm text-muted-foreground\">\n                                {customer.phone}\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={balanceInfo.variant}>\n                            {balanceInfo.text}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-1\">\n                            <PermissionWrapper\n                              resource=\"customers\"\n                              action=\"read\"\n                            >\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setSelectedCustomer(customer);\n                                  setIsLedgerDialogOpen(true);\n                                }}\n                                className=\"text-green-600 hover:text-green-800 focus:outline-none\"\n                                title=\"View\"\n                              >\n                                <Eye className=\"h-4 w-4\" />\n                              </Button>\n                            </PermissionWrapper>\n                            <PermissionWrapper\n                              resource=\"customers\"\n                              action=\"write\"\n                            >\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setSelectedCustomer(customer);\n                                  setIsTransactionDialogOpen(true);\n                                }}\n                              >\n                                <Plus className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setEditingCustomer(customer);\n                                  setIsDialogOpen(true);\n                                }}\n                                className=\"text-blue-600 hover:text-blue-800 focus:outline-none\"\n                                title=\"Edit\"\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <DeleteConfirmationDialog\n                                trigger={\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    className=\"text-red-600 hover:text-red-800 focus:outline-none\"\n                                    title=\"Delete\"\n                                  >\n                                    <Trash2 className=\"h-4 w-4\" />\n                                  </Button>\n                                }\n                                title=\"Delete Customer\"\n                                itemName={customer.name}\n                                onConfirm={() => deleteMutation.mutate(customer.id)}\n                                isLoading={deleteMutation.isPending}\n                              />\n                            </PermissionWrapper>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={4} className=\"text-center py-12\">\n                      <div className=\"flex flex-col items-center justify-center\">\n                        <Users className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                        <h3 className=\"text-lg font-semibold mb-2\">No customers found</h3>\n                        <p className=\"text-muted-foreground mb-4\">\n                          {searchQuery ? 'No customers match your search criteria.' : 'Start by adding your first customer.'}\n                        </p>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                )}\n                </TableBody>\n              </Table>\n              \n\n              {/* Pagination Controls */}\n              {filteredCustomers.length > 0 && (\n                <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 mt-4\">\n                  <PaginationInfo\n                    currentPage={currentPage}\n                    pageSize={pageSize}\n                    totalItems={totalItems}\n                  />\n                  <div className=\"flex items-center gap-4\">\n                    <PageSizeSelector\n                      pageSize={pageSize}\n                      onPageSizeChange={handlePageSizeChange}\n                    />\n                    <Pagination\n                      currentPage={currentPage}\n                      totalPages={totalPages}\n                      onPageChange={handlePageChange}\n                    />\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Transaction Dialog */}\n      <Dialog\n        open={isTransactionDialogOpen}\n        onOpenChange={setIsTransactionDialogOpen}\n      >\n        <DialogContent className=\"max-w-md mx-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              Add Transaction for {selectedCustomer?.name}\n            </DialogTitle>\n            <DialogDescription>\n              Record a new transaction in the customer ledger\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleTransactionSave} className=\"space-y-4\">\n            <Select\n              value={transactionType}\n              onValueChange={setTransactionType}\n              required\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select Transaction Type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"sale\">Sale (Debit)</SelectItem>\n                <SelectItem value=\"payment_received\">\n                  Payment Received (Credit)\n                </SelectItem>\n                <SelectItem value=\"adjustment_debit\">\n                  Adjustment (Debit)\n                </SelectItem>\n                <SelectItem value=\"adjustment_credit\">\n                  Adjustment (Credit)\n                </SelectItem>\n              </SelectContent>\n            </Select>\n            <Input\n              name=\"transactionDate\"\n              type=\"date\"\n              defaultValue={format(new Date(), \"yyyy-MM-dd\")}\n              required\n            />\n            <Input\n              name=\"description\"\n              placeholder=\"Transaction Description\"\n              required\n            />\n            <Input\n              name=\"referenceNumber\"\n              placeholder=\"Reference Number (Optional)\"\n            />\n            <Input\n              name=\"amount\"\n              type=\"number\"\n              step=\"0.01\"\n              placeholder=\"Amount\"\n              required\n            />\n            <Select name=\"paymentMethod\">\n              <SelectTrigger>\n                <SelectValue placeholder=\"Payment Method\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"cash\">Cash</SelectItem>\n                <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                <SelectItem value=\"cheque\">Cheque</SelectItem>\n                <SelectItem value=\"credit_card\">Credit Card</SelectItem>\n                <SelectItem value=\"other\">Other</SelectItem>\n              </SelectContent>\n            </Select>\n            <Textarea\n              name=\"notes\"\n              placeholder=\"Additional Notes (Optional)\"\n              rows={2}\n            />\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsTransactionDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={transactionMutation.isPending}>\n                Add Transaction\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Ledger View Dialog */}\n      <Dialog open={isLedgerDialogOpen} onOpenChange={setIsLedgerDialogOpen}>\n        <DialogContent className=\"max-w-4xl mx-auto max-h-[80vh]\">\n          <DialogHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <DialogTitle>\n                  Customer Ledger - {selectedCustomer?.name}\n                </DialogTitle>\n                <DialogDescription>\n                  Complete transaction history and running balance\n                </DialogDescription>\n              </div>\n              <Button variant=\"outline\" onClick={exportLedger}>\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n            </div>\n          </DialogHeader>\n          <div className=\"overflow-y-auto max-h-[60vh]\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Description</TableHead>\n                  <TableHead>Reference</TableHead>\n                  <TableHead className=\"text-right\">Debit</TableHead>\n                  <TableHead className=\"text-right\">Credit</TableHead>\n                  <TableHead className=\"text-right\">Balance</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {ledgerTransactions.map((transaction: LedgerTransaction) => (\n                  <TableRow key={transaction.id}>\n                    <TableCell>\n                      {format(\n                        new Date(transaction.transactionDate),\n                        \"dd/MM/yyyy\",\n                      )}\n                    </TableCell>\n                    <TableCell>{transaction.description}</TableCell>\n                    <TableCell>{transaction.referenceNumber || \"-\"}</TableCell>\n                    <TableCell className=\"text-right\">\n                      {parseFloat(transaction.debitAmount) > 0\n                        ? formatCurrency(parseFloat(transaction.debitAmount))\n                        : \"-\"}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      {parseFloat(transaction.creditAmount) > 0\n                        ? formatCurrency(parseFloat(transaction.creditAmount))\n                        : \"-\"}\n                    </TableCell>\n                    <TableCell className=\"text-right font-medium\">\n                      {formatCurrency(parseFloat(transaction.runningBalance))}\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {ledgerTransactions.length === 0 && (\n                  <TableRow>\n                    <TableCell\n                      colSpan={6}\n                      className=\"text-center py-8 text-muted-foreground\"\n                    >\n                      No transactions found\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":29638},"client/src/pages/dashboard.tsx":{"content":"import EnhancedDashboard from \"@/components/enhanced-dashboard\";\n\nexport default function Dashboard() {\n  return <EnhancedDashboard />;\n}\n","size_bytes":138},"client/src/pages/day-book.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { CalendarIcon, Download, History, TrendingUp } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\nimport { format } from \"date-fns\";\n\ninterface DayBookEntry {\n  category: string;\n  bankAccount: number;\n  counter: number;\n  ownerAccount: number;\n  total: number;\n  creditDue: number;\n}\n\nexport default function DayBook() {\n  const [selectedDate, setSelectedDate] = useState(\n    format(new Date(), \"yyyy-MM-dd\"),\n  );\n  const { toast } = useToast();\n  const { formatCurrency } = useCurrency();\n\n  const { data: orders = [] } = useQuery({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const { data: expenses = [] } = useQuery({\n    queryKey: [\"/api/expenses\"],\n  });\n\n  const { data: bills = [] } = useQuery({\n    queryKey: [\"/api/bills\"],\n  });\n\n  // Calculate day book entries based on actual data\n  const calculateDayBookEntries = (): DayBookEntry[] => {\n    const selectedDateObj = new Date(selectedDate);\n    const startOfDay = new Date(selectedDateObj);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(selectedDateObj);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    // Filter data for selected date\n    const dayOrders = orders.filter((order: any) => {\n      const orderDate = new Date(order.orderDate || order.createdAt);\n      return orderDate >= startOfDay && orderDate <= endOfDay;\n    });\n\n    const dayExpenses = expenses.filter((expense: any) => {\n      const expenseDate = new Date(expense.date || expense.createdAt);\n      return expenseDate >= startOfDay && expenseDate <= endOfDay;\n    });\n\n    const dayBills = bills.filter((bill: any) => {\n      const billDate = new Date(bill.billDate || bill.createdAt);\n      return billDate >= startOfDay && billDate <= endOfDay;\n    });\n\n    // Calculate receipts\n    const completedOrders = dayOrders.filter(\n      (order: any) => order.status === \"completed\",\n    );\n    const paidBills = dayBills.filter((bill: any) => bill.status === \"paid\");\n\n    const netSales = completedOrders.reduce(\n      (sum: number, order: any) => sum + parseFloat(order.totalAmount || 0),\n      0,\n    );\n    const purchaseReturn = 0; // Placeholder - implement if you have purchase returns\n    const paymentIn = paidBills.reduce(\n      (sum: number, bill: any) => sum + parseFloat(bill.totalAmount || 0),\n      0,\n    );\n    const income = 0; // Placeholder - implement based on your income tracking\n\n    // Calculate payments\n    const purchases = dayExpenses\n      .filter((expense: any) => expense.category === \"purchase\")\n      .reduce(\n        (sum: number, expense: any) => sum + parseFloat(expense.amount || 0),\n        0,\n      );\n\n    const salesReturn = 0; // Placeholder - implement if you have sales returns\n    const paymentOut = dayExpenses\n      .filter((expense: any) => expense.category !== \"purchase\")\n      .reduce(\n        (sum: number, expense: any) => sum + parseFloat(expense.amount || 0),\n        0,\n      );\n\n    const expensesTotal = dayExpenses.reduce(\n      (sum: number, expense: any) => sum + parseFloat(expense.amount || 0),\n      0,\n    );\n\n    // For now, we'll distribute amounts across accounts (you can modify this logic based on your business rules)\n    const entries: DayBookEntry[] = [\n      // Receipts\n      {\n        category: \"Net Sales\",\n        bankAccount: netSales * 0.7, // 70% to bank\n        counter: netSales * 0.3, // 30% to counter\n        ownerAccount: 0,\n        total: netSales,\n        creditDue: 0,\n      },\n      {\n        category: \"Purchase Return\",\n        bankAccount: 0,\n        counter: 0,\n        ownerAccount: 0,\n        total: purchaseReturn,\n        creditDue: 0,\n      },\n      {\n        category: \"Payment In\",\n        bankAccount: paymentIn,\n        counter: 0,\n        ownerAccount: 0,\n        total: paymentIn,\n        creditDue: 0,\n      },\n      {\n        category: \"Income\",\n        bankAccount: income,\n        counter: 0,\n        ownerAccount: 0,\n        total: income,\n        creditDue: 0,\n      },\n      // Payments\n      {\n        category: \"Purchase\",\n        bankAccount: purchases * 0.8,\n        counter: 0,\n        ownerAccount: purchases * 0.2,\n        total: purchases,\n        creditDue: 0,\n      },\n      {\n        category: \"Sales Return\",\n        bankAccount: 0,\n        counter: 0,\n        ownerAccount: 0,\n        total: salesReturn,\n        creditDue: 0,\n      },\n      {\n        category: \"Payment Out\",\n        bankAccount: paymentOut,\n        counter: 0,\n        ownerAccount: 0,\n        total: paymentOut,\n        creditDue: 0,\n      },\n      {\n        category: \"Expenses\",\n        bankAccount: expensesTotal * 0.6,\n        counter: expensesTotal * 0.4,\n        ownerAccount: 0,\n        total: expensesTotal,\n        creditDue: 0,\n      },\n    ];\n\n    return entries;\n  };\n\n  const dayBookEntries = calculateDayBookEntries();\n\n  // Calculate totals\n  const totalReceipts = dayBookEntries.slice(0, 4).reduce(\n    (sum, entry) => ({\n      bankAccount: sum.bankAccount + entry.bankAccount,\n      counter: sum.counter + entry.counter,\n      ownerAccount: sum.ownerAccount + entry.ownerAccount,\n      total: sum.total + entry.total,\n    }),\n    { bankAccount: 0, counter: 0, ownerAccount: 0, total: 0 },\n  );\n\n  const totalPayments = dayBookEntries.slice(4, 8).reduce(\n    (sum, entry) => ({\n      bankAccount: sum.bankAccount + entry.bankAccount,\n      counter: sum.counter + entry.counter,\n      ownerAccount: sum.ownerAccount + entry.ownerAccount,\n      total: sum.total + entry.total,\n    }),\n    { bankAccount: 0, counter: 0, ownerAccount: 0, total: 0 },\n  );\n\n  const netReceipt = {\n    bankAccount: totalReceipts.bankAccount - totalPayments.bankAccount,\n    counter: totalReceipts.counter - totalPayments.counter,\n    ownerAccount: totalReceipts.ownerAccount - totalPayments.ownerAccount,\n    total: totalReceipts.total - totalPayments.total,\n  };\n\n  const handleExport = () => {\n    toast({\n      title: \"Export Started\",\n      description:\n        \"Day book report is being generated and will download shortly.\",\n    });\n  };\n\n  const handleCloseDay = () => {\n    toast({\n      title: \"Day Closed\",\n      description: `Day book for ${format(new Date(selectedDate), \"dd/MM/yyyy\")} has been closed.`,\n    });\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-gray-600\">\n            Daily transaction summary and calculations\n          </p>\n        </div>\n        <div className=\"flex space-x-3\">\n          <Button\n            variant=\"outline\"\n            onClick={handleExport}\n            className=\"flex items-center gap-2\"\n          >\n            <Download className=\"h-4 w-4\" />\n            Sales Summary\n          </Button>\n          <Button onClick={handleCloseDay} className=\"flex items-center gap-2\">\n            Close the day\n          </Button>\n          <Button variant=\"outline\" className=\"flex items-center gap-2\">\n            <History className=\"h-4 w-4\" />\n            Daybook History\n          </Button>\n        </div>\n      </div>\n\n      {/* Date Selection */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <CalendarIcon className=\"h-4 w-4\" />\n              <label htmlFor=\"date-select\" className=\"text-sm font-medium\">\n                Select Date:\n              </label>\n            </div>\n            <Input\n              id=\"date-select\"\n              type=\"date\"\n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              className=\"w-48\"\n            />\n            <Badge variant=\"outline\" className=\"ml-auto\">\n              {format(new Date(selectedDate), \"dd MMM yyyy\")}\n            </Badge>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Day Book Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <TrendingUp className=\"h-5 w-5\" />\n            Daily Transaction Summary\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full border-collapse\">\n              <thead>\n                <tr className=\"border-b-2 border-gray-200\">\n                  <th className=\"text-left p-3 font-semibold\">PMT Accounts</th>\n                  <th className=\"text-center p-3 font-semibold\">\n                    Bank Account\n                  </th>\n                  <th className=\"text-center p-3 font-semibold\">Counter</th>\n                  <th className=\"text-center p-3 font-semibold\">\n                    Owner's Account\n                  </th>\n                  <th className=\"text-center p-3 font-semibold\">Total</th>\n                  <th className=\"text-center p-3 font-semibold\">Credit(Due)</th>\n                </tr>\n              </thead>\n              <tbody>\n                {/* Receipts Section */}\n                <tr>\n                  <td\n                    colSpan={6}\n                    className=\"bg-blue-50 p-2 font-semibold text-blue-800\"\n                  >\n                    Receipts\n                  </td>\n                </tr>\n                {dayBookEntries.slice(0, 4).map((entry, index) => (\n                  <tr\n                    key={`receipt-${index}`}\n                    className=\"border-b hover:bg-gray-50\"\n                  >\n                    <td className=\"p-3\">{entry.category}</td>\n                    <td className=\"p-3 text-center\">\n                      {formatCurrency(entry.bankAccount)}\n                    </td>\n                    <td className=\"p-3 text-center\">\n                      {formatCurrency(entry.counter)}\n                    </td>\n                    <td className=\"p-3 text-center\">\n                      {formatCurrency(entry.ownerAccount)}\n                    </td>\n                    <td className=\"p-3 text-center font-medium\">\n                      {formatCurrency(entry.total)}\n                    </td>\n                    <td className=\"p-3 text-center\">\n                      {formatCurrency(entry.creditDue)}\n                    </td>\n                  </tr>\n                ))}\n\n                {/* Total Receipts */}\n                <tr className=\"border-b-2 border-blue-200 bg-blue-50 font-semibold\">\n                  <td className=\"p-3\">Total Receipts [A]</td>\n                  <td className=\"p-3 text-center\">\n                    {formatCurrency(totalReceipts.bankAccount)}\n                  </td>\n                  <td className=\"p-3 text-center\">\n                    {formatCurrency(totalReceipts.counter)}\n                  </td>\n                  <td className=\"p-3 text-center\">\n                    {formatCurrency(totalReceipts.ownerAccount)}\n                  </td>\n                  <td className=\"p-3 text-center\">\n                    {formatCurrency(totalReceipts.total)}\n                  </td>\n                  <td className=\"p-3 text-center\">-</td>\n                </tr>\n\n                {/* Payments Section */}\n                <tr>\n                  <td\n                    colSpan={6}\n                    className=\"bg-red-50 p-2 font-semibold text-red-800\"\n                  >\n                    Payments\n                  </td>\n                </tr>\n                {dayBookEntries.slice(4, 8).map((entry, index) => (\n                  <tr\n                    key={`payment-${index}`}\n                    className=\"border-b hover:bg-gray-50\"\n                  >\n                    <td className=\"p-3\">{entry.category}</td>\n                    <td className=\"p-3 text-center\">\n                      {formatCurrency(entry.bankAccount)}\n                    </td>\n                    <td className=\"p-3 text-center\">\n                      {formatCurrency(entry.counter)}\n                    </td>\n                    <td className=\"p-3 text-center\">\n                      {formatCurrency(entry.ownerAccount)}\n                    </td>\n                    <td className=\"p-3 text-center font-medium\">\n                      {formatCurrency(entry.total)}\n                    </td>\n                    <td className=\"p-3 text-center\">\n                      {formatCurrency(entry.creditDue)}\n                    </td>\n                  </tr>\n                ))}\n\n                {/* Total Payments */}\n                <tr className=\"border-b-2 border-red-200 bg-red-50 font-semibold\">\n                  <td className=\"p-3\">Total Payments [B]</td>\n                  <td className=\"p-3 text-center\">\n                    {formatCurrency(totalPayments.bankAccount)}\n                  </td>\n                  <td className=\"p-3 text-center\">\n                    {formatCurrency(totalPayments.counter)}\n                  </td>\n                  <td className=\"p-3 text-center\">\n                    {formatCurrency(totalPayments.ownerAccount)}\n                  </td>\n                  <td className=\"p-3 text-center\">\n                    {formatCurrency(totalPayments.total)}\n                  </td>\n                  <td className=\"p-3 text-center\">-</td>\n                </tr>\n\n                {/* Net Receipt */}\n                <tr className=\"border-b-2 border-green-300 bg-green-50 font-bold text-green-800\">\n                  <td className=\"p-3\">Net Receipt [C = A - B]</td>\n                  <td className=\"p-3 text-center\">\n                    {formatCurrency(netReceipt.bankAccount)}\n                  </td>\n                  <td className=\"p-3 text-center\">\n                    {formatCurrency(netReceipt.counter)}\n                  </td>\n                  <td className=\"p-3 text-center\">\n                    {formatCurrency(netReceipt.ownerAccount)}\n                  </td>\n                  <td className=\"p-3 text-center\">\n                    {formatCurrency(netReceipt.total)}\n                  </td>\n                  <td className=\"p-3 text-center\">-</td>\n                </tr>\n\n                {/* Opening Balance */}\n                <tr className=\"border-b hover:bg-gray-50\">\n                  <td className=\"p-3\">Opening balance (D)</td>\n                  <td className=\"p-3 text-center\">{formatCurrency(0)}</td>\n                  <td className=\"p-3 text-center\">{formatCurrency(5715)}</td>\n                  <td className=\"p-3 text-center\">{formatCurrency(645)}</td>\n                  <td className=\"p-3 text-center\">{formatCurrency(6360)}</td>\n                  <td className=\"p-3 text-center\">-</td>\n                </tr>\n\n                {/* Closing Balance */}\n                <tr className=\"border-b-2 border-gray-400 bg-gray-100 font-bold\">\n                  <td className=\"p-3\">Closing Balance [E = C + D]</td>\n                  <td className=\"p-3 text-center\">\n                    {formatCurrency(netReceipt.bankAccount)}\n                  </td>\n                  <td className=\"p-3 text-center\">\n                    {formatCurrency(netReceipt.counter + 5715)}\n                  </td>\n                  <td className=\"p-3 text-center\">\n                    {formatCurrency(netReceipt.ownerAccount + 645)}\n                  </td>\n                  <td className=\"p-3 text-center\">\n                    {formatCurrency(netReceipt.total + 6360)}\n                  </td>\n                  <td className=\"p-3 text-center\">-</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-semibold text-green-600\">\n                Total Receipts\n              </h3>\n              <p className=\"text-3xl font-bold text-green-800\">\n                {formatCurrency(totalReceipts.total)}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-semibold text-red-600\">\n                Total Payments\n              </h3>\n              <p className=\"text-3xl font-bold text-red-800\">\n                {formatCurrency(totalPayments.total)}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-semibold text-blue-600\">\n                Net Receipt\n              </h3>\n              <p\n                className={`text-3xl font-bold ${netReceipt.total >= 0 ? \"text-blue-800\" : \"text-red-800\"}`}\n              >\n                {formatCurrency(netReceipt.total)}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17345},"client/src/pages/expenses.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport SearchBar from \"@/components/search-bar\";\nimport { useTableSort } from \"@/hooks/useTableSort\";\nimport { SortableTableHeader } from \"@/components/ui/sortable-table-header\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Pagination,\n  PaginationInfo,\n  PageSizeSelector,\n  usePagination,\n} from \"@/components/ui/pagination\";\n\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Search, Edit, Trash2, Receipt } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\nimport { DeleteConfirmationDialog } from \"@/components/ui/delete-confirmation-dialog\";\n\nexport default function Expenses() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingExpense, setEditingExpense] = useState<any>(null);\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const { toast } = useToast();\n  const { formatCurrency } = useCurrency();\n\n  // ‚úÖ Fixed: Add queryFn and correct queryKey\n  const {\n    data: expenses = [],\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\"expenses\"], // ‚úÖ Meaningful key\n    queryFn: () => apiRequest(\"GET\", \"/api/expenses\"), // ‚úÖ Fetch data\n    retry: (failureCount, error) => {\n      if (isUnauthorizedError(error)) return false;\n      return failureCount < 3;\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Session expired. Redirecting to login...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to load expenses.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/expenses\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"expenses\"] });\n      setIsDialogOpen(false);\n      setEditingExpense(null);\n      toast({ title: \"Success\", description: \"Expense added successfully\" });\n    },\n    onError: (error) => {\n      handleError(error, \"Failed to save expense\");\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: any }) =>\n      apiRequest(\"PUT\", `/api/expenses/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"expenses\"] });\n      setIsDialogOpen(false);\n      setEditingExpense(null);\n      toast({ title: \"Success\", description: \"Expense updated successfully\" });\n    },\n    onError: (error) => {\n      handleError(error, \"Failed to update expense\");\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => apiRequest(\"DELETE\", `/api/expenses/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"expenses\"] });\n      toast({ title: \"Success\", description: \"Expense deleted successfully\" });\n    },\n    onError: (error) => {\n      handleError(error, \"Failed to delete expense\");\n    },\n  });\n\n  // Reuse error handling\n  function handleError(error: any, message: string) {\n    if (isUnauthorizedError(error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Session expired. Redirecting to login...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => (window.location.href = \"/api/login\"), 500);\n      return;\n    }\n    toast({ title: \"Error\", description: message, variant: \"destructive\" });\n  }\n\n  const handleSave = (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n    const amount = parseFloat(formData.get(\"amount\") as string);\n    const title = (formData.get(\"title\") as string)?.trim();\n    const category = selectedCategory?.trim();\n    const dateValue = formData.get(\"date\") as string;\n\n    if (!title || !category || isNaN(amount) || amount <= 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill all required fields correctly.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const data = {\n      title,\n      category,\n      amount: amount.toString(),\n      date: dateValue ? new Date(dateValue) : new Date(),\n      description: (formData.get(\"description\") as string)?.trim() || null,\n    };\n\n    if (editingExpense) {\n      updateMutation.mutate({ id: editingExpense.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const categories = [\n    \"utilities\",\n    \"rent\",\n    \"supplies\",\n    \"marketing\",\n    \"maintenance\",\n    \"equipment\",\n    \"travel\",\n    \"office\",\n    \"other\",\n  ];\n\n  // ‚úÖ Safely filter\n  const filteredExpenses = Array.isArray(expenses)\n    ? expenses.filter((expense: any) => {\n        const matchesSearch =\n          expense.title?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          expense.description\n            ?.toLowerCase()\n            .includes(searchQuery.toLowerCase());\n        const matchesCategory =\n          categoryFilter === \"all\" || expense.category === categoryFilter;\n        return matchesSearch && matchesCategory;\n      })\n    : [];\n\n  // Add sorting\n  const { sortedData, sortConfig, requestSort } = useTableSort(\n    filteredExpenses,\n    \"title\",\n  );\n\n  // Pagination\n  const {\n    currentItems,\n    currentPage,\n    totalPages,\n    pageSize,\n    setPageSize,\n    goToPage,\n    totalItems,\n  } = usePagination(sortedData, 10);\n\n  const getCategoryBadge = (category: string) => {\n    const variants: Record<\n      string,\n      \"default\" | \"secondary\" | \"destructive\" | \"outline\"\n    > = {\n      utilities: \"default\",\n      rent: \"secondary\",\n      supplies: \"outline\",\n      marketing: \"default\",\n      maintenance: \"destructive\",\n      equipment: \"secondary\",\n      travel: \"outline\",\n      office: \"default\",\n      other: \"outline\",\n    };\n    return variants[category] || \"outline\";\n  };\n\n  // Sync selectedCategory when editing\n  useEffect(() => {\n    if (editingExpense) {\n      setSelectedCategory(editingExpense.category);\n    } else {\n      setSelectedCategory(\"\");\n    }\n  }, [editingExpense]);\n\n  if (error && isUnauthorizedError(error)) {\n    toast({\n      title: \"Unauthorized\",\n      description: \"Session expired. Redirecting to login...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n    return null;\n  }\n\n  return (\n    <div className=\"p-4 sm:p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <p className=\"text-gray-600\">\n            Track and manage your business expenses\n          </p>\n        </div>\n        <Dialog\n          open={isDialogOpen}\n          onOpenChange={(open) => {\n            setIsDialogOpen(open);\n            if (!open) {\n              setEditingExpense(null);\n              setSelectedCategory(\"\");\n            }\n          }}\n        >\n          <DialogTrigger asChild>\n            <Button\n              onClick={() => setEditingExpense(null)}\n              className=\"w-full sm:w-auto\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Expense\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl mx-auto max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <Receipt className=\"h-5 w-5\" />\n                {editingExpense ? \"Edit Expense\" : \"Add New Expense\"}\n              </DialogTitle>\n              <DialogDescription>\n                {editingExpense ? \"Update expense information\" : \"Record a new business expense with detailed information\"}\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSave} className=\"space-y-6\">\n              {/* Basic Information */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">Expense Details</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"expense-title\">Expense Title *</Label>\n                    <Input\n                      id=\"expense-title\"\n                      name=\"title\"\n                      placeholder=\"e.g. Office Supplies, Electricity Bill\"\n                      defaultValue={editingExpense?.title || \"\"}\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"expense-category\">Category *</Label>\n                    <Select\n                      value={selectedCategory}\n                      onValueChange={setSelectedCategory}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select Category\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {categories.map((category) => (\n                          <SelectItem key={category} value={category}>\n                            {category.charAt(0).toUpperCase() + category.slice(1)}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <input\n                      type=\"hidden\"\n                      name=\"category\"\n                      value={selectedCategory}\n                      required\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"expense-amount\">Amount ($) *</Label>\n                    <Input\n                      id=\"expense-amount\"\n                      name=\"amount\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"0.00\"\n                      defaultValue={editingExpense?.amount || \"\"}\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"expense-date\">Date *</Label>\n                    <Input\n                      id=\"expense-date\"\n                      name=\"date\"\n                      type=\"date\"\n                      defaultValue={\n                        editingExpense?.date\n                          ? new Date(editingExpense.date).toISOString().split(\"T\")[0]\n                          : new Date().toISOString().split(\"T\")[0]\n                      }\n                      required\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Additional Information */}\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"expense-description\">Description</Label>\n                  <Textarea\n                    id=\"expense-description\"\n                    name=\"description\"\n                    placeholder=\"Additional notes about this expense...\"\n                    defaultValue={editingExpense?.description || \"\"}\n                    rows={3}\n                  />\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex flex-col sm:flex-row justify-end gap-3 pt-4 border-t\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsDialogOpen(false)}\n                  className=\"w-full sm:w-auto\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={\n                    createMutation.isPending || updateMutation.isPending\n                  }\n                  className=\"w-full sm:w-auto\"\n                >\n                  {createMutation.isPending || updateMutation.isPending\n                    ? editingExpense \n                      ? \"Updating...\" \n                      : \"Saving...\"\n                    : editingExpense\n                      ? \"Update Expense\"\n                      : \"Save Expense\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Expenses List */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n            <CardTitle>Expenses List</CardTitle>\n            <div className=\"flex flex-col sm:flex-row gap-2 w-full sm:w-auto\">\n              <div className=\"w-full sm:w-64\">\n                <SearchBar\n                  placeholder=\"Search expenses...\"\n                  value={searchQuery}\n                  onChange={setSearchQuery}\n                  className=\"w-full\"\n                />\n              </div>\n              <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                <SelectTrigger className=\"w-full sm:w-48\">\n                  <SelectValue placeholder=\"All Categories\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {categories.map((category) => (\n                    <SelectItem key={category} value={category}>\n                      {category.charAt(0).toUpperCase() + category.slice(1)}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <SortableTableHeader\n                      sortKey=\"title\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Expense\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"category\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                      className=\"hidden sm:table-cell\"\n                    >\n                      Category\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"amount\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Amount\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"date\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                      className=\"hidden md:table-cell\"\n                    >\n                      Date\n                    </SortableTableHeader>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sortedData.length > 0 ? (\n                    sortedData.map((expense: any) => (\n                      <TableRow key={expense.id}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                              <Receipt className=\"h-4 w-4 text-primary\" />\n                            </div>\n                            <div>\n                              <div className=\"font-medium\">{expense.title}</div>\n                              <div className=\"text-sm text-muted-foreground sm:hidden\">\n                                {expense.category}\n                              </div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"hidden sm:table-cell\">\n                          <Badge variant={getCategoryBadge(expense.category)}>\n                            {expense.category?.charAt(0).toUpperCase() +\n                              expense.category?.slice(1)}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"font-medium\">\n                            {formatCurrency(parseFloat(expense.amount || 0))}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          {new Date(expense.date).toLocaleDateString()}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-1\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => {\n                                setEditingExpense(expense);\n                                setSelectedCategory(expense.category || \"\");\n                                setIsDialogOpen(true);\n                              }}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <DeleteConfirmationDialog\n                              trigger={\n                                <Button variant=\"ghost\" size=\"sm\">\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              }\n                              title=\"Delete Expense\"\n                              itemName={expense.title || \"this expense\"}\n                              onConfirm={() =>\n                                deleteMutation.mutate(expense.id)\n                              }\n                              isLoading={deleteMutation.isPending}\n                            />\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  ) : (\n                    <TableRow>\n                      <TableCell colSpan={5} className=\"text-center py-8\">\n                        <Receipt className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-semibold text-muted-foreground mb-2\">\n                          No expenses found\n                        </h3>\n                        <p className=\"text-muted-foreground mb-4\">\n                          {searchQuery || categoryFilter !== \"all\"\n                            ? \"Try adjusting your search criteria\"\n                            : \"Start by adding your first expense\"}\n                        </p>\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n\n          {/* Pagination */}\n          <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4 mt-4\">\n            <PaginationInfo\n              currentPage={currentPage}\n              totalPages={totalPages}\n              totalItems={totalItems}\n            />\n            <div className=\"flex items-center gap-4\">\n              <PageSizeSelector\n                pageSize={pageSize}\n                onPageSizeChange={setPageSize}\n              />\n              <Pagination\n                currentPage={currentPage}\n                totalPages={totalPages}\n                onPageChange={goToPage}\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":20882},"client/src/pages/ingredients.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport SearchBar from \"@/components/search-bar\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Plus,\n  Search,\n  Edit,\n  Trash2,\n  Package,\n  AlertTriangle,\n  ChevronDown,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\nimport { useUnits } from \"@/hooks/useUnits\"; // Import useUnits\nimport { useTableSort } from \"@/hooks/useTableSort\";\nimport { SortableTableHeader } from \"@/components/ui/sortable-table-header\";\nimport {\n  Pagination,\n  PaginationInfo,\n  PageSizeSelector,\n  usePagination,\n} from \"@/components/ui/pagination\";\n\nexport default function Ingredients() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingItem, setEditingItem] = useState<any>(null);\n  const [showAdditionalDetails, setShowAdditionalDetails] = useState(false);\n  const { toast } = useToast();\n  const { symbol } = useCurrency();\n\n  const {\n    data: items = [],\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\"/api/inventory\"],\n    retry: (failureCount, error) => {\n      if (isUnauthorizedError(error)) return false;\n      return failureCount < 3;\n    },\n  });\n\n  // Use the useUnits hook to fetch units\n  const { units = [] } = useUnits();\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/inventory-categories\"],\n  });\n\n  // Filter only active units for the dropdown\n  // The useUnits hook now ensures units is always an array, so Array.isArray check is implicitly handled.\n  const activeUnits = Array.isArray(units)\n    ? units.filter((unit: any) => unit.isActive !== false) // show unless explicitly inactive\n    : [];\n\n  // Filter ingredients (items that can be used as ingredients)\n  // Ensure items is an array before filtering to prevent runtime errors\n  const ingredients = Array.isArray(items)\n    ? items.filter(\n        (item: any) =>\n          item.name &&\n          (item.group === \"raw-materials\" ||\n            item.group === \"ingredients\" ||\n            !item.group ||\n            item.name.toLowerCase().includes(\"flour\") ||\n            item.name.toLowerCase().includes(\"sugar\") ||\n            item.name.toLowerCase().includes(\"butter\") ||\n            item.name.toLowerCase().includes(\"milk\") ||\n            item.name.toLowerCase().includes(\"egg\") ||\n            item.name.toLowerCase().includes(\"chocolate\") ||\n            item.name.toLowerCase().includes(\"vanilla\") ||\n            item.name.toLowerCase().includes(\"salt\") ||\n            item.name.toLowerCase().includes(\"baking\")),\n      )\n    : [];\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      console.log(\"Creating ingredient:\", data);\n\n      if (!data.name?.trim()) {\n        throw new Error(\"Ingredient name is required\");\n      }\n      if (!data.unitId && !data.unit) {\n        throw new Error(\"Measuring unit is required\");\n      }\n      if (\n        isNaN(parseFloat(data.costPerUnit)) ||\n        parseFloat(data.costPerUnit) < 0\n      ) {\n        throw new Error(\"Valid cost per unit is required\");\n      }\n      if (\n        isNaN(parseFloat(data.currentStock)) ||\n        parseFloat(data.currentStock) < 0\n      ) {\n        throw new Error(\"Valid current stock is required\");\n      }\n\n      // Set group to 'ingredients' for better categorization\n      const ingredientData = {\n        ...data,\n        group: data.group || \"ingredients\",\n        name: data.name.trim(),\n        unit: data.unit || \"pcs\",\n        defaultPrice: data.defaultPrice || data.costPerUnit,\n        openingQuantity: data.openingQuantity || data.currentStock,\n        openingRate: data.openingRate || data.costPerUnit,\n        openingValue:\n          parseFloat(data.currentStock || \"0\") *\n          parseFloat(data.costPerUnit || \"0\"),\n        supplier: data.supplier?.trim() || null,\n        company: data.company?.trim() || null,\n        location: data.location?.trim() || null,\n        notes: data.notes?.trim() || null,\n        dateAdded: new Date().toISOString(),\n        lastRestocked: new Date().toISOString(),\n      };\n\n      return apiRequest(\"POST\", \"/api/inventory\", ingredientData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/low-stock\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      setIsDialogOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"Ingredient added successfully\",\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add ingredient\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: { id: number; values: any }) => {\n      console.log(\"Updating ingredient:\", data);\n      return apiRequest(\"PUT\", `/api/inventory/${data.id}`, data.values);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/low-stock\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      setIsDialogOpen(false);\n      setEditingItem(null);\n      toast({\n        title: \"Success\",\n        description: \"Ingredient updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update ingredient\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => apiRequest(\"DELETE\", `/api/inventory/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory\"] });\n      toast({\n        title: \"Success\",\n        description: \"Ingredient deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete ingredient\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n\n    const name = formData.get(\"name\") as string;\n    const unitId = formData.get(\"unitId\") as string;\n    const costPerUnit = formData.get(\"costPerUnit\") as string;\n    const currentStock = formData.get(\"currentStock\") as string;\n\n    // Client-side validation\n    if (!name?.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Ingredient name is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!unitId) {\n      toast({\n        title: \"Error\",\n        description: \"Measuring unit is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Get the selected unit details\n    const selectedUnit = (units as any[]).find(\n      (u: any) => u.id.toString() === unitId,\n    );\n\n    const data = {\n      name: name.trim(),\n      unitId: parseInt(unitId),\n      unit: selectedUnit ? selectedUnit.abbreviation : \"pcs\",\n      costPerUnit: parseFloat(costPerUnit || \"0\"),\n      currentStock: parseFloat(currentStock || \"0\"),\n      minLevel: parseFloat((formData.get(\"minLevel\") as string) || \"0\"),\n      defaultPrice: parseFloat(\n        (formData.get(\"defaultPrice\") as string) || costPerUnit || \"0\",\n      ),\n      group: (formData.get(\"group\") as string) || \"ingredients\",\n      supplier: (formData.get(\"supplier\") as string)?.trim() || null,\n      company: (formData.get(\"company\") as string)?.trim() || null,\n      location: (formData.get(\"location\") as string)?.trim() || null,\n      notes: (formData.get(\"notes\") as string)?.trim() || null,\n    };\n\n    if (editingItem) {\n      updateMutation.mutate({ id: editingItem.id, values: data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const filteredIngredients = ingredients.filter((ingredient: any) => {\n    return (\n      ingredient.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      ingredient.supplier?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      ingredient.group?.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n  });\n\n  // Add sorting functionality\n  const { sortedData, sortConfig, requestSort } = useTableSort(\n    filteredIngredients,\n    \"name\",\n  );\n\n  // Add pagination functionality\n  const {\n    currentItems,\n    currentPage,\n    totalPages,\n    pageSize,\n    setPageSize,\n    goToPage,\n    totalItems,\n  } = usePagination(sortedData, 10);\n\n\n  const getStockBadge = (item: any) => {\n    const currentStock = parseFloat(item.currentStock || 0);\n    const minLevel = parseFloat(item.minLevel || 0);\n\n    if (currentStock <= minLevel) {\n      return { variant: \"destructive\" as const, text: \"Low Stock\" };\n    } else if (currentStock <= minLevel * 1.5) {\n      return { variant: \"secondary\" as const, text: \"Warning\" };\n    }\n    return { variant: \"default\" as const, text: \"In Stock\" };\n  };\n\n  // Get unit name by ID\n  const getUnitName = (unitId: number) => {\n    // Ensure units is an array before calling find\n    if (!Array.isArray(units) || !unitId) return \"Unknown Unit\";\n    const unit = units.find((u: any) => u.id === unitId);\n    return unit ? `${unit.name} (${unit.abbreviation})` : \"Unknown Unit\";\n  };\n\n  if (error && isUnauthorizedError(error)) {\n    toast({\n      title: \"Unauthorized\",\n      description: \"You are logged out. Logging in again...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n    return null;\n  }\n\n  return (\n    <div className=\"p-4 sm:p-6 space-y-6\">\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <p className=\"text-gray-600\">\n            Manage your baking ingredients and raw materials\n          </p>\n        </div>\n        <Dialog\n          open={isDialogOpen}\n          onOpenChange={(open) => {\n            setIsDialogOpen(open);\n            if (!open) {\n              setEditingItem(null);\n              setShowAdditionalDetails(false);\n            }\n          }}\n        >\n          <DialogTrigger asChild>\n            <Button\n              onClick={() => setEditingItem(null)}\n              className=\"w-full sm:w-auto\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Ingredient\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl mx-auto max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"text-center text-lg font-semibold\">\n                {editingItem ? \"Edit Ingredient\" : \"Add New Ingredient\"}\n              </DialogTitle>\n              <DialogDescription>\n                {editingItem\n                  ? \"Update the ingredient details below\"\n                  : \"Add a new ingredient to your inventory for use in recipes\"}\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSave} className=\"space-y-4\">\n              {/* First Row - Ingredient Name and Measuring Unit */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"name\" className=\"text-sm font-medium\">\n                    Ingredient Name <span className=\"text-red-500\">*</span>\n                  </Label>\n                  <Input\n                    id=\"name\"\n                    name=\"name\"\n                    placeholder=\"e.g., All Purpose Flour\"\n                    defaultValue={editingItem?.name || \"\"}\n                    required\n                    className=\"mt-1\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"unitId\" className=\"text-sm font-medium\">\n                    Measuring Unit <span className=\"text-red-500\">*</span>\n                  </Label>\n                  <Select\n                    name=\"unitId\"\n                    defaultValue={editingItem?.unitId?.toString() || \"\"}\n                    required\n                  >\n                    <SelectTrigger className=\"mt-1\">\n                      <SelectValue placeholder=\"Select unit of measurement\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {activeUnits.length > 0 ? (\n                        activeUnits.map((unit: any) => (\n                          <SelectItem key={unit.id} value={unit.id.toString()}>\n                            {unit.name} (\n                            {unit.abbreviation || unit.unit || \"unit\"})\n                          </SelectItem>\n                        ))\n                      ) : (\n                        <SelectItem value=\"none\" disabled>\n                          No units available. Please add one in settings.\n                        </SelectItem>\n                      )}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Second Row - Current Stock and Cost */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"currentStock\" className=\"text-sm font-medium\">\n                    Current Stock <span className=\"text-red-500\">*</span>\n                  </Label>\n                  <Input\n                    id=\"currentStock\"\n                    name=\"currentStock\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    placeholder=\"0\"\n                    defaultValue={editingItem?.currentStock || \"\"}\n                    required\n                    className=\"mt-1\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"costPerUnit\" className=\"text-sm font-medium\">\n                    Cost per Unit <span className=\"text-red-500\">*</span>\n                  </Label>\n                  <div className=\"relative mt-1\">\n                    <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">\n                      {symbol}\n                    </span>\n                    <Input\n                      id=\"costPerUnit\"\n                      name=\"costPerUnit\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      placeholder=\"0\"\n                      defaultValue={editingItem?.costPerUnit || \"\"}\n                      required\n                      className=\"pl-8\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"minLevel\" className=\"text-sm font-medium\">\n                    Minimum Level\n                  </Label>\n                  <Input\n                    id=\"minLevel\"\n                    name=\"minLevel\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    placeholder=\"0\"\n                    defaultValue={editingItem?.minLevel || \"\"}\n                    className=\"mt-1\"\n                  />\n                </div>\n              </div>\n\n              {/* Third Row - Default Price and Group */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"defaultPrice\" className=\"text-sm font-medium\">\n                    Default Price\n                  </Label>\n                  <div className=\"relative mt-1\">\n                    <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">\n                      {symbol}\n                    </span>\n                    <Input\n                      id=\"defaultPrice\"\n                      name=\"defaultPrice\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      placeholder=\"0\"\n                      defaultValue={editingItem?.defaultPrice || \"\"}\n                      className=\"pl-8\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"group\" className=\"text-sm font-medium\">\n                    Category\n                  </Label>\n                  <Select\n                    name=\"group\"\n                    defaultValue={editingItem?.group || \"ingredients\"}\n                  >\n                    <SelectTrigger className=\"mt-1\">\n                      <SelectValue placeholder=\"Select ingredient category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"ingredients\">Ingredients</SelectItem>\n                      <SelectItem value=\"raw-materials\">\n                        Raw Materials\n                      </SelectItem>\n                      <SelectItem value=\"flour\">Flour & Grains</SelectItem>\n                      <SelectItem value=\"dairy\">Dairy Products</SelectItem>\n                      <SelectItem value=\"sweeteners\">Sweeteners</SelectItem>\n                      <SelectItem value=\"spices\">\n                        Spices & Seasonings\n                      </SelectItem>\n                      <SelectItem value=\"leavening\">\n                        Leavening Agents\n                      </SelectItem>\n                      <SelectItem value=\"extracts\">\n                        Extracts & Flavoring\n                      </SelectItem>\n                      <SelectItem value=\"chocolate\">\n                        Chocolate & Cocoa\n                      </SelectItem>\n                      <SelectItem value=\"nuts\">Nuts & Seeds</SelectItem>\n                      <SelectItem value=\"fruits\">\n                        Fruits & Dried Fruits\n                      </SelectItem>\n                      <SelectItem value=\"packaging\">\n                        Packaging Materials\n                      </SelectItem>\n                      <SelectItem value=\"other\">Other</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Additional Details Toggle */}\n              <div>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  onClick={() =>\n                    setShowAdditionalDetails(!showAdditionalDetails)\n                  }\n                  className=\"text-blue-600 p-0 h-auto font-normal\"\n                >\n                  Additional Details{\" \"}\n                  <ChevronDown\n                    className={`h-4 w-4 ml-1 transition-transform ${\n                      showAdditionalDetails ? \"rotate-180\" : \"\"\n                    }`}\n                  />\n                </Button>\n              </div>\n\n              {/* Additional Details Section */}\n              {showAdditionalDetails && (\n                <div className=\"space-y-4 p-4 border rounded-lg bg-gray-50\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"supplier\" className=\"text-sm font-medium\">\n                        Supplier\n                      </Label>\n                      <Input\n                        id=\"supplier\"\n                        name=\"supplier\"\n                        placeholder=\"Supplier name\"\n                        defaultValue={editingItem?.supplier || \"\"}\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"company\" className=\"text-sm font-medium\">\n                        Brand/Company\n                      </Label>\n                      <Input\n                        id=\"company\"\n                        name=\"company\"\n                        placeholder=\"Brand or company name\"\n                        defaultValue={editingItem?.company || \"\"}\n                        className=\"mt-1\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"location\" className=\"text-sm font-medium\">\n                        Storage Location\n                      </Label>\n                      <Input\n                        id=\"location\"\n                        name=\"location\"\n                        placeholder=\"Storage location\"\n                        defaultValue={editingItem?.location || \"\"}\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"notes\" className=\"text-sm font-medium\">\n                        Notes\n                      </Label>\n                      <Input\n                        id=\"notes\"\n                        name=\"notes\"\n                        placeholder=\"Additional notes\"\n                        defaultValue={editingItem?.notes || \"\"}\n                        className=\"mt-1\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Action Buttons */}\n              <div className=\"flex flex-col sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsDialogOpen(false)}\n                  className=\"w-full sm:w-auto\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={\n                    createMutation.isPending || updateMutation.isPending\n                  }\n                  className=\"w-full sm:w-auto bg-primary hover:bg-primary/90\"\n                >\n                  {createMutation.isPending || updateMutation.isPending\n                    ? \"Saving...\"\n                    : editingItem\n                      ? \"Update Ingredient\"\n                      : \"Add Ingredient\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n            <CardTitle>Ingredients Inventory</CardTitle>\n            <div className=\"w-full sm:w-64\">\n              <SearchBar\n                placeholder=\"Search ingredients...\"\n                value={searchQuery}\n                onChange={setSearchQuery}\n                className=\"w-full\"\n              />\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <SortableTableHeader\n                      sortKey=\"name\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Ingredient\n                    </SortableTableHeader>\n                    <TableHead>Unit</TableHead>\n                    <SortableTableHeader\n                      sortKey=\"currentStock\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Current Stock\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"minLevel\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Min Level\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"costPerUnit\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Cost/Unit\n                    </SortableTableHeader>\n                    <TableHead className=\"hidden md:table-cell\">\n                      Category\n                    </TableHead>\n                    <TableHead className=\"hidden lg:table-cell\">\n                      Supplier\n                    </TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {currentItems.length > 0 ? (\n                    currentItems.map((item: any) => {\n                      const stockInfo = getStockBadge(item);\n                      return (\n                        <TableRow key={item.id}>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center\">\n                                <Package className=\"h-5 w-5 text-primary\" />\n                              </div>\n                              <div>\n                                <div className=\"font-medium\">{item.name}</div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  {item.company || \"No brand\"}\n                                </div>\n                              </div>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <span className=\"text-sm\">\n                              {getUnitName(item.unitId)}\n                            </span>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"font-medium\">\n                              {parseFloat(item.currentStock || 0).toFixed(2)}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {parseFloat(item.minLevel || 0).toFixed(2)}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"font-medium\">\n                              {symbol}\n                              {parseFloat(item.costPerUnit || 0).toFixed(2)}\n                            </div>\n                          </TableCell>\n                          <TableCell className=\"hidden md:table-cell\">\n                            {item.group ? (\n                              <Badge variant=\"outline\" className=\"capitalize\">\n                                {item.group.replace(\"-\", \" \")}\n                              </Badge>\n                            ) : (\n                              <span className=\"text-muted-foreground\">-</span>\n                            )}\n                          </TableCell>\n                          <TableCell className=\"hidden lg:table-cell\">\n                            <div className=\"text-sm\">\n                              {item.supplier || \"No supplier\"}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={stockInfo.variant}>\n                              {stockInfo.text}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex space-x-1\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setEditingItem(item);\n                                  setIsDialogOpen(true);\n                                }}\n                                className=\"text-blue-600 hover:text-blue-800 focus:outline-none\"\n                                title=\"Edit\"\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => deleteMutation.mutate(item.id)}\n                                disabled={deleteMutation.isPending}\n                                className=\"text-red-600 hover:text-red-800 focus:outline-none\"\n                                title=\"Delete\"\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })\n                  ) : (\n                    <TableRow>\n                      <TableCell colSpan={9} className=\"text-center py-8\">\n                        <div className=\"flex flex-col items-center\">\n                          <Package className=\"h-12 w-12 text-muted-foreground mb-4\" />\n                          <h3 className=\"text-lg font-semibold text-muted-foreground mb-2\">\n                            No ingredients found\n                          </h3>\n                          <p className=\"text-muted-foreground mb-4\">\n                            {searchQuery\n                              ? \"Try adjusting your search criteria\"\n                              : \"Start by adding your first ingredient\"}\n                          </p>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n\n          {/* Pagination Controls */}\n          {filteredIngredients.length > 0 && (\n            <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 mt-4\">\n              <PaginationInfo\n                currentPage={currentPage}\n                totalPages={totalPages}\n                totalItems={totalItems}\n              />\n              <div className=\"flex items-center gap-4\">\n                <PageSizeSelector\n                  pageSize={pageSize}\n                  onPageSizeChange={setPageSize}\n                  options={[10, 20, 50, 100]}\n                />\n                <Pagination\n                  currentPage={currentPage}\n                  totalPages={totalPages}\n                  onPageChange={goToPage}\n                />\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":32641},"client/src/pages/inventory.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport SearchBar from \"@/components/search-bar\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Plus,\n  Search,\n  Edit,\n  Trash2,\n  Package,\n  AlertTriangle,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\nimport { DeleteConfirmationDialog } from \"@/components/ui/delete-confirmation-dialog\";\nimport { EnhancedStockItemForm } from \"@/components/enhanced-stock-item-form\";\nimport {\n  Pagination,\n  PaginationInfo,\n  PageSizeSelector,\n  usePagination,\n} from \"@/components/ui/pagination\";\n\nexport default function Inventory() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingItem, setEditingItem] = useState<any>(null);\n  const { toast } = useToast();\n  const { formatCurrency, symbol } = useCurrency();\n\n  const {\n    data: items = [],\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\"/api/inventory\"],\n    retry: (failureCount, error) => {\n      if (isUnauthorizedError(error)) return false;\n      return failureCount < 3;\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => apiRequest(\"DELETE\", `/api/inventory/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory\"] });\n      toast({\n        title: \"Success\",\n        description: \"Stock item deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete stock item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredItems = (items as any[]).filter(\n    (item: any) =>\n      item.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      item.supplier?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      item.categoryName?.toLowerCase().includes(searchQuery.toLowerCase()),\n  );\n\n  // Add pagination\n  const pagination = usePagination(filteredItems, 10);\n  const {\n    currentPage,\n    pageSize,\n    totalPages,\n    totalItems,\n    paginatedData: paginatedItems,\n    handlePageChange,\n    handlePageSizeChange,\n  } = pagination;\n\n  const getStockBadge = (item: any) => {\n    const currentStock = parseFloat(item.currentStock || 0);\n    const minLevel = parseFloat(item.minLevel || 0);\n\n    if (currentStock <= minLevel) {\n      return { variant: \"destructive\" as const, text: \"Low Stock\" };\n    } else if (currentStock <= minLevel * 1.5) {\n      return { variant: \"secondary\" as const, text: \"Warning\" };\n    }\n    return { variant: \"default\" as const, text: \"In Stock\" };\n  };\n\n  if (error && isUnauthorizedError(error)) {\n    toast({\n      title: \"Unauthorized\",\n      description: \"You are logged out. Logging in again...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n    return null;\n  }\n\n  return (\n    <div className=\"p-4 sm:p-6 space-y-6\">\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-1\">Inventory Management</h1>\n          <p className=\"text-gray-600\">\n            Track your ingredients and raw materials\n          </p>\n        </div>\n        <Button\n          onClick={() => {\n            setEditingItem(null);\n            setIsDialogOpen(true);\n          }}\n          className=\"w-full sm:w-auto\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Item\n        </Button>\n      </div>\n\n      <div className=\"flex items-center space-x-2\">\n        <div className=\"flex-1\">\n          <SearchBar\n            placeholder=\"Search items...\"\n            value={searchQuery}\n            onChange={setSearchQuery}\n          />\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Package className=\"h-5 w-5 mr-2\" />\n            Stock Items\n          </CardTitle>\n          <CardDescription>\n            Manage your inventory items and stock levels\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n              <p className=\"text-muted-foreground mt-2\">\n                Loading stock items...\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Item</TableHead>\n                    <TableHead>Category</TableHead>\n                    <TableHead>Stock</TableHead>\n                    <TableHead className=\"hidden md:table-cell\">\n                      Cost/Unit\n                    </TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {paginatedItems.map((item: any) => {\n                    const stockInfo = getStockBadge(item);\n                    return (\n                      <TableRow key={item.id}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                              <Package className=\"h-4 w-4 text-primary\" />\n                            </div>\n                            <div>\n                              <div className=\"font-medium\">{item.name}</div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                {item.supplier || \"No supplier\"}\n                                {item.company && (\n                                  <span className=\"block\">{item.company}</span>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm text-muted-foreground\">\n                            {item.categoryName || \"No category\"}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"font-medium\">\n                            {parseFloat(item.currentStock || 0).toFixed(2)}{\" \"}\n                            {item.unitAbbreviation || item.unit}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Min: {parseFloat(item.minLevel || 0).toFixed(2)}{\" \"}\n                            {item.unitAbbreviation || item.unit}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          {formatCurrency(parseFloat(item.costPerUnit || 0))}\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={stockInfo.variant}>\n                            {stockInfo.text}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => {\n                                setEditingItem(item);\n                                setIsDialogOpen(true);\n                              }}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <DeleteConfirmationDialog\n                              trigger={\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                >\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              }\n                              title=\"Delete Stock Item\"\n                              itemName={item.name}\n                              onConfirm={() => deleteMutation.mutate(item.id)}\n                              isLoading={deleteMutation.isPending}\n                            />\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n              {filteredItems.length === 0 && (\n                <div className=\"text-center py-8\">\n                  <Package className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-muted-foreground mb-2\">\n                    No stock items found\n                  </h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    {searchQuery\n                      ? \"Try adjusting your search criteria\"\n                      : \"Start by adding your first stock item\"}\n                  </p>\n                  <Button onClick={() => setIsDialogOpen(true)}>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Item\n                  </Button>\n                </div>\n              )}\n\n              {/* Pagination Controls */}\n              {filteredItems.length > 0 && (\n                <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 mt-4\">\n                  <PaginationInfo\n                    currentPage={currentPage}\n                    pageSize={pageSize}\n                    totalItems={totalItems}\n                  />\n                  <div className=\"flex items-center gap-4\">\n                    <PageSizeSelector\n                      pageSize={pageSize}\n                      onPageSizeChange={handlePageSizeChange}\n                    />\n                    <Pagination\n                      currentPage={currentPage}\n                      totalPages={totalPages}\n                      onPageChange={handlePageChange}\n                    />\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <EnhancedStockItemForm\n        isOpen={isDialogOpen}\n        onClose={() => {\n          setIsDialogOpen(false);\n          setEditingItem(null);\n        }}\n        editingItem={editingItem}\n      />\n    </div>\n  );\n}\n","size_bytes":11585},"client/src/pages/landing.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-[#F5F5DC] to-[#D2B48C]\">\n      <Card className=\"w-full max-w-md mx-4 shadow-lg\">\n        <CardHeader className=\"text-center\">\n          <div className=\"w-16 h-16 bg-[#8B4513] rounded-lg flex items-center justify-center mx-auto mb-4\">\n            <i className=\"fas fa-bread-slice text-white text-2xl\"></i>\n          </div>\n          <CardTitle className=\"text-3xl font-bold text-[#8B4513]\">\n            Bake Sewa\n          </CardTitle>\n          <p className=\"text-[#8B4513]/80 mt-2\">\n            Professional Bakery Management System\n          </p>\n        </CardHeader>\n        \n        <CardContent className=\"text-center space-y-6\">\n          <div className=\"space-y-2\">\n            <p className=\"text-gray-600\">\n              Streamline your bakery operations with our comprehensive management system\n            </p>\n            <ul className=\"text-sm text-gray-500 space-y-1\">\n              <li>‚Ä¢ Product & Inventory Management</li>\n              <li>‚Ä¢ Order Processing & Tracking</li>\n              <li>‚Ä¢ Production Scheduling</li>\n              <li>‚Ä¢ Sales Analytics & Reports</li>\n            </ul>\n          </div>\n          \n          <Button \n            onClick={() => window.location.href = '/api/login'}\n            className=\"w-full bg-[#8B4513] hover:bg-[#A0522D] text-white\"\n            size=\"lg\"\n          >\n            <i className=\"fas fa-sign-in-alt mr-2\"></i>\n            Sign In to Continue\n          </Button>\n          \n          <p className=\"text-xs text-gray-500\">\n            Secure authentication powered by Replit\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1891},"client/src/pages/leave-requests.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Plus,\n  Calendar,\n  Edit,\n  Trash2,\n  Clock,\n  CheckCircle,\n  XCircle,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport SearchBar from \"@/components/search-bar\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { DeleteConfirmationDialog } from \"@/components/ui/delete-confirmation-dialog\";\nimport { format } from \"date-fns\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function LeaveRequests() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedStaff, setSelectedStaff] = useState<string>(\"all\");\n  const [filterStatus, setFilterStatus] = useState<string>(\"all\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingRequest, setEditingRequest] = useState<any>(null);\n  const [formData, setFormData] = useState({\n    staffId: \"\",\n    leaveType: \"vacation\",\n    startDate: \"\",\n    endDate: \"\",\n    reason: \"\",\n    notes: \"\",\n    status: \"pending\",\n  });\n\n  const { toast } = useToast();\n\n  // Fetch staff with proper handling\n  const {\n    staff = [],\n    isLoading: staffLoading,\n    error: staffError,\n  } = useQuery({\n    queryKey: [\"staff\"],\n    queryFn: async () => {\n      try {\n        const response = await apiRequest(\"GET\", \"/api/staff\");\n\n        // Handle different API response formats\n        let staffList: any[] = [];\n\n        if (Array.isArray(response)) {\n          staffList = response;\n        } else if (response?.success && Array.isArray(response.data)) {\n          staffList = response.data;\n        } else {\n          console.warn(\"Unexpected staff API response:\", response);\n          return [];\n        }\n\n        // Normalize field names (e.g., first_name ‚Üí firstName)\n        return staffList.map((member) => ({\n          id: member.id || member.staff_id,\n          firstName: member.firstName || member.first_name || \"Unknown\",\n          lastName: member.lastName || member.last_name || \"\",\n          position: member.position || member.role || \"\",\n          staffName:\n            `${member.firstName || member.first_name || \"Unknown\"} ${member.lastName || member.last_name || \"\"}`.trim(),\n        }));\n      } catch (err) {\n        if (isUnauthorizedError(err)) {\n          toast({\n            title: \"Unauthorized\",\n            description: \"Session expired. Redirecting to login...\",\n            variant: \"destructive\",\n          });\n          setTimeout(() => {\n            window.location.href = \"/api/login\";\n          }, 500);\n          return [];\n        }\n        console.error(\"Failed to fetch staff:\", err);\n        toast({\n          title: \"Error\",\n          description: \"Failed to load staff list. Please try again.\",\n          variant: \"destructive\",\n        });\n        return [];\n      }\n    },\n    staleTime: 1000 * 60 * 5, // 5 minutes\n    gcTime: 1000 * 60 * 10, // 10 minutes\n  });\n\n  // Fetch leave requests\n  const {\n    leaveRequests = [],\n    isLoading: requestsLoading,\n    error: requestsError,\n  } = useQuery({\n    queryKey: [\"leave-requests\", selectedStaff, filterStatus],\n    queryFn: async () => {\n      try {\n        const params = new URLSearchParams();\n        if (selectedStaff !== \"all\") params.append(\"staffId\", selectedStaff);\n        if (filterStatus !== \"all\") params.append(\"status\", filterStatus);\n\n        const url = `/api/leave-requests?${params}`;\n        const response = await apiRequest(\"GET\", url);\n\n        let requests: any[] = [];\n\n        if (Array.isArray(response)) {\n          requests = response;\n        } else if (response?.success && Array.isArray(response.data)) {\n          requests = response.data;\n        } else {\n          return [];\n        }\n\n        // Normalize leave request data\n        return requests.map((req) => ({\n          ...req,\n          staffName: req.staffName || \"Unknown Staff\",\n          leaveType: req.leaveType || \"vacation\",\n          status: req.status || \"pending\",\n        }));\n      } catch (err) {\n        if (isUnauthorizedError(err)) {\n          toast({\n            title: \"Unauthorized\",\n            description: \"Session expired. Redirecting to login...\",\n            variant: \"destructive\",\n          });\n          setTimeout(() => {\n            window.location.href = \"/api/login\";\n          }, 500);\n          return [];\n        }\n        console.error(\"Failed to fetch leave requests:\", err);\n        return [];\n      }\n    },\n    staleTime: 1000 * 60 * 2,\n    retry: (failureCount, error) => {\n      if (isUnauthorizedError(error)) return false;\n      return failureCount < 3;\n    },\n  });\n\n  // Create mutation\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (!data.staffId || !data.startDate || !data.endDate || !data.reason) {\n        throw new Error(\"Required fields missing\");\n      }\n      return apiRequest(\"POST\", \"/api/leave-requests\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Leave request created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"leave-requests\"] });\n      setIsDialogOpen(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Session expired. Redirecting to login...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create leave request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update mutation\n  const updateMutation = useMutation({\n    mutationFn: (data: any) => {\n      return apiRequest(\n        \"PUT\",\n        `/api/leave-requests/${editingRequest.id}`,\n        data,\n      );\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Leave request updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"leave-requests\"] });\n      setIsDialogOpen(false);\n      setEditingRequest(null);\n      resetForm();\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Session expired. Redirecting to login...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update leave request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete mutation\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) =>\n      apiRequest(\"DELETE\", `/api/leave-requests/${id}`),\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Leave request deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"leave-requests\"] });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Session expired. Redirecting to login...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete leave request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      staffId: \"\",\n      leaveType: \"vacation\",\n      startDate: \"\",\n      endDate: \"\",\n      reason: \"\",\n      notes: \"\",\n      status: \"pending\",\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (\n      !formData.staffId ||\n      !formData.startDate ||\n      !formData.endDate ||\n      !formData.reason\n    ) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (new Date(formData.startDate) > new Date(formData.endDate)) {\n      toast({\n        title: \"Error\",\n        description: \"Start date must be before or equal to end date\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const submitData = {\n      ...formData,\n      staffId: parseInt(formData.staffId),\n    };\n\n    if (editingRequest) {\n      updateMutation.mutate(submitData);\n    } else {\n      createMutation.mutate(submitData);\n    }\n  };\n\n  const handleEdit = (request: any) => {\n    setEditingRequest(request);\n    setFormData({\n      staffId: request.staffId.toString(),\n      leaveType: request.leaveType,\n      startDate: request.startDate ? request.startDate.split(\"T\")[0] : \"\",\n      endDate: request.endDate ? request.endDate.split(\"T\")[0] : \"\",\n      reason: request.reason || \"\",\n      notes: request.notes || \"\",\n      status: request.status,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (id: number) => {\n    deleteMutation.mutate(id);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      pending: { variant: \"outline\" as const, label: \"Pending\", icon: Clock },\n      approved: {\n        variant: \"default\" as const,\n        label: \"Approved\",\n        icon: CheckCircle,\n      },\n      rejected: {\n        variant: \"destructive\" as const,\n        label: \"Rejected\",\n        icon: XCircle,\n      },\n    };\n\n    const config =\n      statusConfig[status as keyof typeof statusConfig] || statusConfig.pending;\n    const Icon = config.icon;\n\n    return (\n      <Badge variant={config.variant} className=\"flex items-center gap-1\">\n        <Icon className=\"h-3 w-3\" />\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const getLeaveTypeBadge = (type: string) => {\n    const typeConfig = {\n      vacation: { variant: \"default\" as const, label: \"Vacation\" },\n      sick: { variant: \"secondary\" as const, label: \"Sick Leave\" },\n      personal: { variant: \"outline\" as const, label: \"Personal\" },\n      emergency: { variant: \"destructive\" as const, label: \"Emergency\" },\n      maternity: { variant: \"secondary\" as const, label: \"Maternity\" },\n      paternity: { variant: \"secondary\" as const, label: \"Paternity\" },\n    };\n\n    const config =\n      typeConfig[type as keyof typeof typeConfig] || typeConfig.vacation;\n    return <Badge variant={config.variant}>{config.label}</Badge>;\n  };\n\n  const filteredRequests = (leaveRequests || []).filter((request: any) => {\n    const matchesSearch =\n      `${request.staffName} ${request.leaveType} ${request.reason}`\n        .toLowerCase()\n        .includes(searchQuery.toLowerCase());\n    const matchesStaff =\n      selectedStaff === \"all\" || request.staffId.toString() === selectedStaff;\n    const matchesStatus =\n      filterStatus === \"all\" || request.status === filterStatus;\n\n    return matchesSearch && matchesStaff && matchesStatus;\n  });\n\n  const isLoading = staffLoading || requestsLoading;\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n            <Calendar className=\"h-8 w-8\" />\n            Leave Requests\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Manage employee leave requests and approvals\n          </p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={resetForm}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              New Leave Request\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingRequest ? \"Edit Leave Request\" : \"New Leave Request\"}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"staffId\">Staff Member *</Label>\n                  <Select\n                    value={formData.staffId}\n                    onValueChange={(value) =>\n                      setFormData({ ...formData, staffId: value })\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select staff member\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {staff.map((member: any) => (\n                        <SelectItem\n                          key={member.id}\n                          value={member.id.toString()}\n                        >\n                          {member.firstName} {member.lastName} -{\" \"}\n                          {member.position}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"leaveType\">Leave Type *</Label>\n                  <Select\n                    value={formData.leaveType || undefined}\n                    onValueChange={(value) =>\n                      setFormData({ ...formData, leaveType: value })\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select leave type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"vacation\">Vacation</SelectItem>\n                      <SelectItem value=\"sick\">Sick Leave</SelectItem>\n                      <SelectItem value=\"personal\">Personal</SelectItem>\n                      <SelectItem value=\"emergency\">Emergency</SelectItem>\n                      <SelectItem value=\"maternity\">Maternity</SelectItem>\n                      <SelectItem value=\"paternity\">Paternity</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"startDate\">Start Date *</Label>\n                  <Input\n                    id=\"startDate\"\n                    type=\"date\"\n                    value={formData.startDate}\n                    onChange={(e) =>\n                      setFormData({ ...formData, startDate: e.target.value })\n                    }\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"endDate\">End Date *</Label>\n                  <Input\n                    id=\"endDate\"\n                    type=\"date\"\n                    value={formData.endDate}\n                    onChange={(e) =>\n                      setFormData({ ...formData, endDate: e.target.value })\n                    }\n                    required\n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"reason\">Reason *</Label>\n                <Textarea\n                  id=\"reason\"\n                  value={formData.reason}\n                  onChange={(e) =>\n                    setFormData({ ...formData, reason: e.target.value })\n                  }\n                  placeholder=\"Please provide a reason for the leave request\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"notes\">Additional Notes</Label>\n                <Textarea\n                  id=\"notes\"\n                  value={formData.notes}\n                  onChange={(e) =>\n                    setFormData({ ...formData, notes: e.target.value })\n                  }\n                  placeholder=\"Any additional notes or comments\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"status\">Status</Label>\n                <Select\n                  value={formData.status || undefined}\n                  onValueChange={(value) =>\n                    setFormData({ ...formData, status: value })\n                  }\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"approved\">Approved</SelectItem>\n                    <SelectItem value=\"rejected\">Rejected</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={\n                    createMutation.isPending || updateMutation.isPending\n                  }\n                >\n                  {createMutation.isPending || updateMutation.isPending\n                    ? \"Saving...\"\n                    : editingRequest\n                      ? \"Update\"\n                      : \"Create\"}{\" \"}\n                  Request\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"staffFilter\">Staff Member</Label>\n              <Select value={selectedStaff} onValueChange={setSelectedStaff}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All staff\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All staff</SelectItem>\n                  {staff.map((member: any) => (\n                    <SelectItem key={member.id} value={member.id.toString()}>\n                      {member.firstName} {member.lastName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"statusFilter\">Status</Label>\n              <Select value={filterStatus} onValueChange={setFilterStatus}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All statuses\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All statuses</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"approved\">Approved</SelectItem>\n                  <SelectItem value=\"rejected\">Rejected</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"search\">Search</Label>\n              <SearchBar\n                placeholder=\"Search leave requests...\"\n                value={searchQuery}\n                onChange={setSearchQuery}\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Leave Requests Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Leave Requests ({filteredRequests.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n              <p className=\"text-muted-foreground mt-2\">\n                Loading leave requests...\n              </p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Staff Member</TableHead>\n                    <TableHead>Leave Type</TableHead>\n                    <TableHead>Start Date</TableHead>\n                    <TableHead>End Date</TableHead>\n                    <TableHead>Duration</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Reason</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredRequests.length > 0 ? (\n                    filteredRequests.map((request: any) => (\n                      <TableRow key={request.id}>\n                        <TableCell className=\"font-medium\">\n                          {request.staffName}\n                        </TableCell>\n                        <TableCell>\n                          {getLeaveTypeBadge(request.leaveType)}\n                        </TableCell>\n                        <TableCell>\n                          {request.startDate\n                            ? format(\n                                new Date(request.startDate),\n                                \"MMM dd, yyyy\",\n                              )\n                            : \"N/A\"}\n                        </TableCell>\n                        <TableCell>\n                          {request.endDate\n                            ? format(new Date(request.endDate), \"MMM dd, yyyy\")\n                            : \"N/A\"}\n                        </TableCell>\n                        <TableCell>\n                          {request.startDate && request.endDate\n                            ? `${Math.ceil(\n                                (new Date(request.endDate).getTime() -\n                                  new Date(request.startDate).getTime()) /\n                                  (1000 * 60 * 60 * 24) +\n                                  1,\n                              )} days`\n                            : \"N/A\"}\n                        </TableCell>\n                        <TableCell>{getStatusBadge(request.status)}</TableCell>\n                        <TableCell className=\"max-w-xs truncate\">\n                          {request.reason}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleEdit(request)}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <DeleteConfirmationDialog\n                              trigger={\n                                <Button variant=\"outline\" size=\"sm\">\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              }\n                              title=\"Delete Leave Request\"\n                              itemName={`${request.staffName}'s ${request.leaveType} request`}\n                              onConfirm={() => handleDelete(request.id)}\n                              isLoading={deleteMutation.isPending}\n                            />\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  ) : (\n                    <TableRow>\n                      <TableCell\n                        colSpan={8}\n                        className=\"text-center py-8 text-muted-foreground\"\n                      >\n                        No leave requests found.\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":24718},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/notifications.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bell, Filter, Search } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Notification {\n  id: string;\n  type: \"order\" | \"stock\" | \"production\" | \"system\";\n  title: string;\n  description: string;\n  timestamp: string;\n  read: boolean;\n  priority: \"low\" | \"medium\" | \"high\";\n}\n\nexport default function Notifications() {\n  const [activeTab, setActiveTab] = useState(\"activity\");\n  const [filter, setFilter] = useState(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: string) => {\n      const response = await fetch(\n        `/api/notifications/${notificationId}/read`,\n        {\n          method: \"PUT\",\n          credentials: \"include\",\n        },\n      );\n      if (!response.ok) throw new Error(\"Failed to mark as read\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n  });\n\n  const markAllAsReadMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/notifications/mark-all-read\", {\n        method: \"PUT\",\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to mark all as read\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n      toast({\n        title: \"Success\",\n        description: \"All notifications marked as read\",\n      });\n    },\n  });\n\n  // Fetch notifications data\n  const { data: notifications = [] } = useQuery({\n    queryKey: [\"/api/notifications\"],\n  });\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"order\":\n        return \"fas fa-shopping-cart\";\n      case \"stock\":\n        return \"fas fa-boxes\";\n      case \"production\":\n        return \"fas fa-industry\";\n      case \"system\":\n        return \"fas fa-cog\";\n      default:\n        return \"fas fa-bell\";\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case \"order\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"stock\":\n        return \"bg-green-100 text-green-800\";\n      case \"production\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"system\":\n        return \"bg-gray-100 text-gray-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return \"bg-red-500\";\n      case \"medium\":\n        return \"bg-yellow-500\";\n      case \"low\":\n        return \"bg-green-500\";\n      default:\n        return \"bg-gray-400\";\n    }\n  };\n\n  const filteredNotifications = notifications.filter((notification) => {\n    const matchesFilter = filter === \"all\" || notification.type === filter;\n    const matchesSearch =\n      notification.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      notification.description.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesFilter && matchesSearch;\n  });\n  const unreadImportantCount = notifications.filter(\n    (n) => !n.read && [\"order\", \"stock\", \"production\"].includes(n.type),\n  ).length;\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <p className=\"text-gray-600\">\n            Stay updated with your bakery activities\n          </p>\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n            <div className=\"flex gap-2\">\n              <Button\n                variant={activeTab === \"order\" ? \"default\" : \"outline\"}\n                onClick={() => setActiveTab(\"order\")}\n                size=\"sm\"\n              >\n                Order\n              </Button>\n              <Button\n                variant={activeTab === \"activity\" ? \"destructive\" : \"outline\"}\n                onClick={() => setActiveTab(\"activity\")}\n                size=\"sm\"\n              >\n                Activity\n              </Button>\n              {unreadImportantCount > 0 && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => markAllAsReadMutation.mutate()}\n                  disabled={markAllAsReadMutation.isPending}\n                >\n                  Mark All Read\n                </Button>\n              )}\n            </div>\n\n            <div className=\"flex gap-2 items-center\">\n              <Select value={filter} onValueChange={setFilter}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue placeholder=\"Lifetime\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All</SelectItem>\n                  <SelectItem value=\"order\">Orders</SelectItem>\n                  <SelectItem value=\"stock\">Stock</SelectItem>\n                  <SelectItem value=\"production\">Production</SelectItem>\n                  <SelectItem value=\"system\">System</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select defaultValue=\"all\">\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue placeholder=\"Type: All\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Type: All</SelectItem>\n                  <SelectItem value=\"read\">Read</SelectItem>\n                  <SelectItem value=\"unread\">Unread</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"flex gap-2 mt-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search notifications...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          <div className=\"space-y-1\">\n            <div className=\"text-sm font-medium text-muted-foreground mb-4\">\n              June 16th, 2025\n            </div>\n\n            {filteredNotifications.map((notification) => (\n              <div\n                key={notification.id}\n                className={`flex items-start gap-3 p-4 rounded-lg border transition-colors hover:bg-muted/50 cursor-pointer ${\n                  !notification.read\n                    ? \"bg-blue-50/50 border-blue-200\"\n                    : \"bg-white\"\n                }`}\n                onClick={() => {\n                  if (!notification.read) {\n                    markAsReadMutation.mutate(notification.id);\n                  }\n                }}\n              >\n                <div className=\"flex-shrink-0 mt-1\">\n                  <div\n                    className={`w-8 h-8 rounded-full flex items-center justify-center ${getTypeColor(notification.type)}`}\n                  >\n                    <i\n                      className={`${getTypeIcon(notification.type)} text-sm`}\n                    ></i>\n                  </div>\n                </div>\n\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-medium text-sm\">\n                        {notification.title}\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        {notification.description}\n                      </p>\n                    </div>\n\n                    <div className=\"flex items-center gap-2 ml-4\">\n                      <div\n                        className={`w-2 h-2 rounded-full ${getPriorityColor(notification.priority)}`}\n                      ></div>\n                      <span className=\"text-xs text-muted-foreground whitespace-nowrap\">\n                        {notification.timestamp}\n                      </span>\n                      {/* Highlight important unread notifications */}\n                      {!notification.read &&\n                        [\"order\", \"stock\", \"production\"].includes(\n                          notification.type,\n                        ) && (\n                          <Badge className=\"bg-red-500 text-white text-xs px-1.5 py-0.5\">\n                            New\n                          </Badge>\n                        )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n\n            {filteredNotifications.length === 0 && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Bell className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p>No notifications found</p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9639},"client/src/pages/orders.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport OrderForm from \"@/components/order-form\"; // Ensure OrderForm correctly saves data\nimport SearchBar from \"@/components/search-bar\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTableSort } from \"@/hooks/useTableSort\";\nimport { SortableTableHeader } from \"@/components/ui/sortable-table-header\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\nimport {\n  Pagination,\n  PaginationInfo,\n  PageSizeSelector,\n  usePagination,\n} from \"@/components/ui/pagination\";\n\ninterface Order {\n  id: number;\n  orderNumber: string;\n  customerName: string;\n  customerEmail?: string;\n  customerPhone?: string;\n  orderDate: string;\n  dueDate?: string;\n  totalAmount: string;\n  status: string;\n  notes?: string;\n  items?: OrderItem[];\n}\n\ninterface OrderItem {\n  id: number;\n  productName: string;\n  quantity: number;\n  unitPrice: string;\n  totalPrice: string;\n  unit?: string;\n  unitAbbreviation?: string;\n}\n\nexport default function Orders() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [showOrderForm, setShowOrderForm] = useState(false);\n  const { formatCurrency } = useCurrency();\n  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);\n  const { toast } = useToast();\n\n  // --- Data Fetching ---\n  // Ensure your API endpoint /api/orders returns all necessary fields:\n  // id, orderNumber, customerName, customerEmail, customerPhone, orderDate,\n  // dueDate, totalAmount, status, notes, etc.\n  const {\n    data: orders = [],\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\"/api/orders\"],\n    queryFn: () => apiRequest(\"GET\", \"/api/orders\"),\n    staleTime: 1000 * 60 * 5, // 5 minutes\n  });\n\n  // --- Mutation for Updating Status ---\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({\n      orderId,\n      status,\n    }: {\n      orderId: number;\n      status: string;\n    }) => {\n      // Ensure your PUT /api/orders/:id endpoint correctly updates the status\n      await apiRequest(\"PUT\", `/api/orders/${orderId}`, { status });\n    },\n    onSuccess: () => {\n      // Invalidate relevant queries to refetch updated data\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/dashboard/recent-orders\"],\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Order status updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        // Consider using a more robust navigation method if available\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update order status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // --- Helper Function for Status Badges ---\n  const getStatusBadge = (status: string) => {\n    // Maps status strings to Badge variants for color coding\n    const variants: Record<\n      string,\n      \"default\" | \"secondary\" | \"destructive\" | \"outline\"\n    > = {\n      completed: \"default\", // Typically green\n      in_progress: \"secondary\", // Typically blue/gray\n      pending: \"outline\", // Typically gray border\n      cancelled: \"destructive\", // Typically red\n    };\n    const labels: Record<string, string> = {\n      completed: \"Completed\",\n      in_progress: \"In Progress\",\n      pending: \"Pending\",\n      cancelled: \"Cancelled\",\n    };\n    return (\n      <Badge variant={variants[status] || \"outline\"}>\n        {labels[status] || status}\n      </Badge>\n    );\n  };\n\n  // --- Helper Function for Status Actions ---\n  const getStatusActions = (currentStatus: string, orderId: number) => {\n    const actions = [];\n    if (currentStatus === \"pending\") {\n      actions.push(\n        <Button\n          key=\"start\"\n          size=\"sm\"\n          variant=\"outline\"\n          onClick={() =>\n            updateStatusMutation.mutate({ orderId, status: \"in_progress\" })\n          }\n          disabled={updateStatusMutation.isPending}\n        >\n          Start\n        </Button>,\n      );\n    }\n    if (currentStatus === \"in_progress\") {\n      actions.push(\n        <Button\n          key=\"complete\"\n          size=\"sm\"\n          onClick={() =>\n            updateStatusMutation.mutate({ orderId, status: \"completed\" })\n          }\n          disabled={updateStatusMutation.isPending}\n        >\n          Complete\n        </Button>,\n      );\n    }\n    // Allow cancellation for pending or in_progress orders\n    if (currentStatus !== \"cancelled\" && currentStatus !== \"completed\") {\n      actions.push(\n        <Button\n          key=\"cancel\"\n          size=\"sm\"\n          variant=\"destructive\"\n          onClick={() =>\n            updateStatusMutation.mutate({ orderId, status: \"cancelled\" })\n          }\n          disabled={updateStatusMutation.isPending}\n        >\n          Cancel\n        </Button>,\n      );\n    }\n    return actions;\n  };\n\n  // --- Filtering Logic ---\n  const filteredOrders = orders.filter((order: any) => {\n    const matchesSearch =\n      order.customerName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      order.orderNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      (order.customerEmail?.toLowerCase().includes(searchQuery.toLowerCase()) ??\n        false); // Safer check\n\n    const matchesStatus =\n      statusFilter === \"all\" || order.status === statusFilter;\n\n    // As per original logic: Hide completed orders from the main list view\n    const isNotCompleted = order.status !== \"completed\";\n\n    return matchesSearch && matchesStatus && isNotCompleted;\n  });\n\n  // --- Sorting Logic ---\n  const { sortedData, sortConfig, requestSort } = useTableSort(\n    filteredOrders,\n    \"orderNumber\", // Default sort by order number\n  );\n\n  // --- Pagination Logic ---\n  const pagination = usePagination(sortedData, 5); // Default page size 5\n  const {\n    currentPage,\n    pageSize,\n    totalPages,\n    totalItems,\n    paginatedData: paginatedOrders,\n    handlePageChange,\n    handlePageSizeChange,\n  } = pagination;\n\n  // --- Loading State ---\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"space-y-4\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // --- Error Handling ---\n  if (error) {\n    if (isUnauthorizedError(error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return null; // Prevent further rendering\n    } else {\n      // Handle other errors if needed, or let React Query's default error handling show\n      console.error(\"Error fetching orders:\", error);\n      // Optionally, show a user-friendly error message here\n    }\n  }\n\n  // --- Main Render ---\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-gray-600\">Track and manage customer orders</p>\n        </div>\n        <Button onClick={() => setShowOrderForm(true)}>\n          <i className=\"fas fa-plus mr-2\"></i> {/* Consider Lucide Icons */}\n          New Order\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <SearchBar\n                placeholder=\"Search orders, customers...\"\n                value={searchQuery}\n                onChange={setSearchQuery}\n                className=\"w-full\"\n              />\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Orders List Table */}\n      <div className=\"overflow-x-auto bg-white rounded-lg border\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <SortableTableHeader\n                sortKey=\"id\"\n                sortConfig={sortConfig}\n                onSort={requestSort}\n              >\n                Order ID\n              </SortableTableHeader>\n              <SortableTableHeader\n                sortKey=\"customerName\"\n                sortConfig={sortConfig}\n                onSort={requestSort}\n              >\n                Customer\n              </SortableTableHeader>\n              <SortableTableHeader\n                sortKey=\"orderDate\"\n                sortConfig={sortConfig}\n                onSort={requestSort}\n              >\n                Date\n              </SortableTableHeader>\n              <SortableTableHeader\n                sortKey=\"dueDate\"\n                sortConfig={sortConfig}\n                onSort={requestSort}\n              >\n                Due Date\n              </SortableTableHeader>\n              <SortableTableHeader\n                sortKey=\"customerPhone\"\n                sortConfig={sortConfig}\n                onSort={requestSort}\n              >\n                Phone\n              </SortableTableHeader>\n              <SortableTableHeader\n                sortKey=\"totalAmount\"\n                sortConfig={sortConfig}\n                onSort={requestSort}\n                className=\"text-right\"\n              >\n                Total\n              </SortableTableHeader>\n              <SortableTableHeader\n                sortKey=\"status\"\n                sortConfig={sortConfig}\n                onSort={requestSort}\n              >\n                Status\n              </SortableTableHeader>\n              <TableHead className=\"text-right\">Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {paginatedOrders && paginatedOrders.length > 0 ? (\n              paginatedOrders.map((order: any) => {\n                // ‚úÖ Move the logic here\n                let statusClass = \"bg-gray-100 text-gray-800\";\n                if (order.status === \"completed\") {\n                  statusClass = \"bg-green-100 text-green-800\";\n                } else if (order.status === \"pending\") {\n                  statusClass = \"bg-yellow-100 text-yellow-800\";\n                } else if (order.status === \"cancelled\") {\n                  statusClass = \"bg-red-100 text-red-800\";\n                }\n\n                return (\n                  <TableRow key={order.id} className=\"hover:bg-muted/50\">\n                    {/* Order ID */}\n                    <TableCell className=\"font-medium\">{order.id}</TableCell>\n                    {/* Customer Info */}\n                    <TableCell>\n                      <div>{order.customerName}</div>\n                      {order.customerEmail && (\n                        <div className=\"text-xs text-muted-foreground\">\n                          {order.customerEmail}\n                        </div>\n                      )}\n                    </TableCell>\n                    {/* Order Date */}\n                    <TableCell>\n                      {new Date(order.orderDate).toLocaleDateString()}\n                    </TableCell>\n                    {/* Due Date */}\n                    <TableCell>\n                      {order.dueDate\n                        ? new Date(order.dueDate).toLocaleDateString()\n                        : \"-\"}\n                    </TableCell>\n                    {/* Phone */}\n                    <TableCell>{order.customerPhone || \"-\"}</TableCell>\n                    {/* Total Amount */}\n                    <TableCell className=\"text-right font-semibold\">\n                      {formatCurrency(Number(order.totalAmount))}\n                    </TableCell>\n                    {/* Status with Color */}\n                    <TableCell>\n                      <span\n                        className={`px-2 py-1 rounded-full text-xs ${statusClass}`}\n                      >\n                        {order.status}\n                      </span>\n                    </TableCell>\n                    {/* Actions */}\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end space-x-1\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setSelectedOrder(order)}\n                        >\n                          <i className=\"fas fa-eye mr-1\"></i>\n                        </Button>\n                        {getStatusActions(order.status, order.id)}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                );\n              })\n            ) : (\n              <TableRow>\n                <TableCell colSpan={8} className=\"text-center py-12\">\n                  <div className=\"flex flex-col items-center justify-center\">\n                    <i className=\"fas fa-shopping-cart text-4xl text-gray-300 mb-4\"></i>\n                    <h3 className=\"text-lg font-semibold text-gray-600 mb-2\">\n                      No orders found\n                    </h3>\n                    <p className=\"text-gray-500 mb-4\">\n                      {searchQuery || statusFilter !== \"all\"\n                        ? \"Try adjusting your search criteria\"\n                        : \"Start by creating your first order\"}\n                    </p>\n                  </div>\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n\n        {/* Pagination Controls */}\n        {filteredOrders.length > 0 && (\n          <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 p-4 border-t\">\n            <PaginationInfo\n              currentPage={currentPage}\n              pageSize={pageSize}\n              totalItems={totalItems}\n            />\n            <div className=\"flex items-center gap-4\">\n              <PageSizeSelector\n                pageSize={pageSize}\n                onPageSizeChange={handlePageSizeChange}\n                options={[5, 10, 20, 50]}\n              />\n              <Pagination\n                currentPage={currentPage}\n                totalPages={totalPages}\n                onPageChange={handlePageChange}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Create Order Modal */}\n      <Dialog open={showOrderForm} onOpenChange={setShowOrderForm}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Create New Order</DialogTitle>\n          </DialogHeader>\n          {/* Ensure OrderForm calls onSuccess correctly after saving */}\n          <OrderForm onSuccess={() => setShowOrderForm(false)} />\n        </DialogContent>\n      </Dialog>\n\n      {/* View Order Details Modal */}\n      <Dialog\n        open={!!selectedOrder} // Opens if selectedOrder is not null\n        onOpenChange={() => setSelectedOrder(null)} // Clears selection on close\n      >\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Order Details - {selectedOrder?.id}</DialogTitle>\n          </DialogHeader>\n          {/* Display details only if selectedOrder exists */}\n          {selectedOrder && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {/* Customer Information Section */}\n                <div>\n                  <h4 className=\"font-semibold text-gray-900 mb-2\">\n                    Customer Information\n                  </h4>\n                  <div className=\"space-y-1 text-sm\">\n                    <div>\n                      <strong>Name:</strong> {selectedOrder.customerName}\n                    </div>\n                    {selectedOrder.customerEmail && (\n                      <div>\n                        <strong>Email:</strong> {selectedOrder.customerEmail}\n                      </div>\n                    )}\n                    {selectedOrder.customerPhone && (\n                      <div>\n                        <strong>Phone:</strong> {selectedOrder.customerPhone}\n                      </div>\n                    )}\n                    {/* Add other customer fields if needed */}\n                  </div>\n                </div>\n\n                {/* Order Information Section */}\n                <div>\n                  <h4 className=\"font-semibold text-gray-900 mb-2\">\n                    Order Information\n                  </h4>\n                  <div className=\"space-y-1 text-sm\">\n                    <div>\n                      <strong>Status:</strong>{\" \"}\n                      {getStatusBadge(selectedOrder.status)}{\" \"}\n                      {/* Uses the badge helper */}\n                    </div>\n                    <div>\n                      <strong>Order Date:</strong>{\" \"}\n                      {new Date(selectedOrder.orderDate).toLocaleDateString()}\n                    </div>\n                    {selectedOrder.dueDate && (\n                      <div>\n                        <strong>Due Date:</strong>{\" \"}\n                        {new Date(selectedOrder.dueDate).toLocaleDateString()}\n                      </div>\n                    )}\n                    <div>\n                      <strong>Total:</strong>{\" \"}\n                      {formatCurrency(selectedOrder.totalAmount)}\n                    </div>\n                    {/* Add other order fields if needed (e.g., items if stored) */}\n                  </div>\n                </div>\n              </div>\n\n              {/* Order Items */}\n              {selectedOrder.items && selectedOrder.items.length > 0 && (\n                <div>\n                  <h4 className=\"font-semibold text-gray-900 mb-2\">\n                    Order Items\n                  </h4>\n                  <div className=\"space-y-2\">\n                    {selectedOrder.items.map((item: any, index: number) => (\n                      <div\n                        key={index}\n                        className=\"flex justify-between items-center p-2 bg-gray-50 rounded\"\n                      >\n                        <div>\n                          <span className=\"font-medium\">\n                            {item.productName}\n                          </span>\n                          <span className=\"text-gray-600 ml-2\">\n                            (Qty: {item.quantity}{\" \"}\n                            {item.unitAbbreviation || item.unit || \"\"})\n                          </span>\n                        </div>\n                        <div className=\"text-right\">\n                          <div>\n                            {formatCurrency(item.unitPrice)} per{\" \"}\n                            {item.unitAbbreviation || item.unit || \"unit\"}\n                          </div>\n                          <div className=\"font-semibold\">\n                            {formatCurrency(item.totalPrice)}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Notes Section */}\n              {selectedOrder.notes && (\n                <div>\n                  <h4 className=\"font-semibold text-gray-900 mb-2\">Notes</h4>\n                  <p className=\"text-sm text-gray-600 bg-gray-50 p-3 rounded-lg\">\n                    {selectedOrder.notes}\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":21317},"client/src/pages/parties.tsx":{"content":"import { useState, useMemo, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  PermissionWrapper,\n  ReadOnlyWrapper,\n} from \"@/components/permission-wrapper\";\nimport { Input } from \"@/components/ui/input\";\nimport SearchBar from \"@/components/search-bar\";\nimport { useTableSort } from \"@/hooks/useTableSort\";\nimport { SortableTableHeader } from \"@/components/ui/sortable-table-header\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Plus,\n  Search,\n  Edit,\n  Trash2,\n  Building,\n  Eye,\n  Download,\n  AlertCircle,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\nimport { DeleteConfirmationDialog } from \"@/components/ui/delete-confirmation-dialog\";\nimport { format } from \"date-fns\";\n\ninterface LedgerTransaction {\n  id: number;\n  transactionDate: string;\n  description: string;\n  referenceNumber?: string;\n  debitAmount: string;\n  creditAmount: string;\n  runningBalance: string;\n  transactionType: string;\n  paymentMethod?: string;\n  notes?: string;\n}\n\ninterface FormErrors {\n  name?: string;\n  type?: string;\n  email?: string;\n  phone?: string;\n  openingBalance?: string;\n}\n\ninterface TransactionFormErrors {\n  transactionType?: string;\n  amount?: string;\n  description?: string;\n  transactionDate?: string;\n}\n\nexport default function Parties() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingParty, setEditingParty] = useState<any>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [selectedParty, setSelectedParty] = useState<any>(null);\n  const [isLedgerDialogOpen, setIsLedgerDialogOpen] = useState(false);\n  const [selectedType, setSelectedType] = useState(\"\");\n  const [transactionType, setTransactionType] = useState(\"\");\n  const [formErrors, setFormErrors] = useState<FormErrors>({});\n  const [transactionErrors, setTransactionErrors] =\n    useState<TransactionFormErrors>({});\n  const { formatCurrency } = useCurrency();\n\n  const {\n    data: parties = [],\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\"/api/parties\"],\n    retry: (failureCount, error) => {\n      if (isUnauthorizedError(error)) return false;\n      return failureCount < 3;\n    },\n  });\n\n  // Check URL parameters for auto-opening ledger\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const viewLedgerParam = urlParams.get(\"viewLedger\");\n\n    if (viewLedgerParam && parties.length > 0) {\n      const partyId = parseInt(viewLedgerParam);\n      const party = parties.find((p: any) => p.id === partyId);\n\n      if (party) {\n        setSelectedParty(party);\n        setIsLedgerDialogOpen(true);\n        // Clear the URL parameter\n        window.history.replaceState({}, \"\", window.location.pathname);\n      }\n    }\n  }, [parties]);\n\n  const { data: ledgerTransactions = [] } = useQuery({\n    queryKey: [\"/api/ledger/party\", selectedParty?.id],\n    enabled: !!selectedParty?.id,\n    retry: (failureCount, error) => {\n      if (isUnauthorizedError(error)) return false;\n      return failureCount < 3;\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/parties\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/parties\"] });\n      setIsDialogOpen(false);\n      setEditingParty(null);\n      setFormErrors({});\n      toast({ title: \"Success\", description: \"Party saved successfully\" });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n\n      if (error.response?.data?.errors) {\n        setFormErrors(error.response.data.errors);\n      } else {\n        toast({\n          title: \"Error\",\n          description: error.response?.data?.message || \"Failed to save party\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: any }) =>\n      apiRequest(\"PUT\", `/api/parties/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/parties\"] });\n      setIsDialogOpen(false);\n      setEditingParty(null);\n      setFormErrors({});\n      toast({ title: \"Success\", description: \"Party updated successfully\" });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n\n      if (error.response?.data?.errors) {\n        setFormErrors(error.response.data.errors);\n      } else {\n        toast({\n          title: \"Error\",\n          description:\n            error.response?.data?.message || \"Failed to update party\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => apiRequest(\"DELETE\", `/api/parties/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/parties\"] });\n      toast({ title: \"Success\", description: \"Party deleted successfully\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete party\",\n        variant: \"destructive\",\n      });\n    },\n  });\n  const [isTransactionDialogOpen, setIsTransactionDialogOpen] = useState(false);\n  const transactionMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/ledger\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/parties\"] });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/ledger/party\", selectedParty?.id],\n      });\n      setIsTransactionDialogOpen(false);\n      setTransactionType(\"\");\n      setTransactionErrors({});\n      toast({\n        title: \"Success\",\n        description: \"Transaction added successfully\",\n      });\n    },\n    onError: (error: any) => {\n      if (error.response?.data?.errors) {\n        setTransactionErrors(error.response.data.errors);\n      } else {\n        toast({\n          title: \"Error\",\n          description:\n            error.response?.data?.message || \"Failed to add transaction\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const validateForm = (formData: FormData): boolean => {\n    const errors: FormErrors = {};\n\n    const name = formData.get(\"name\") as string;\n    const type = formData.get(\"type\") as string;\n    const email = formData.get(\"email\") as string;\n    const phone = formData.get(\"phone\") as string;\n    const openingBalance = formData.get(\"openingBalance\") as string;\n\n    if (!name || name.trim().length < 2) {\n      errors.name = \"Party name must be at least 2 characters long\";\n    }\n\n    if (!type) {\n      errors.type = \"Please select a party type\";\n    }\n\n    if (email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n      errors.email = \"Please enter a valid email address\";\n    }\n\n    if (phone && !/^[\\d\\s\\-\\+\\(\\)]+$/.test(phone)) {\n      errors.phone = \"Please enter a valid phone number\";\n    }\n\n    if (openingBalance && isNaN(parseFloat(openingBalance))) {\n      errors.openingBalance = \"Opening balance must be a valid number\";\n    }\n\n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const validateTransactionForm = (formData: FormData): boolean => {\n    const errors: TransactionFormErrors = {};\n\n    const amount = formData.get(\"amount\") as string;\n    const description = formData.get(\"description\") as string;\n    const transactionDate = formData.get(\"transactionDate\") as string;\n\n    if (!transactionType) {\n      errors.transactionType = \"Please select a transaction type\";\n    }\n\n    if (!amount || amount.trim() === \"\") {\n      errors.amount = \"Amount is required\";\n    } else if (isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {\n      errors.amount = \"Amount must be a positive number\";\n    } else if (parseFloat(amount) > 999999999.99) {\n      errors.amount = \"Amount is too large\";\n    }\n\n    if (!description || description.trim().length < 3) {\n      errors.description = \"Description must be at least 3 characters long\";\n    } else if (description.trim().length > 500) {\n      errors.description = \"Description is too long (max 500 characters)\";\n    }\n\n    if (!transactionDate) {\n      errors.transactionDate = \"Transaction date is required\";\n    } else {\n      const selectedDate = new Date(transactionDate);\n      const today = new Date();\n      const oneYearAgo = new Date();\n      oneYearAgo.setFullYear(today.getFullYear() - 1);\n\n      if (selectedDate > today) {\n        errors.transactionDate = \"Transaction date cannot be in the future\";\n      } else if (selectedDate < oneYearAgo) {\n        errors.transactionDate =\n          \"Transaction date cannot be more than 1 year ago\";\n      }\n    }\n\n    setTransactionErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleSave = (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n\n    if (!validateForm(formData)) {\n      return;\n    }\n\n    const data = {\n      name: formData.get(\"name\") as string,\n      type: selectedType || (formData.get(\"type\") as string),\n      email: (formData.get(\"email\") as string) || null,\n      phone: (formData.get(\"phone\") as string) || null,\n      address: (formData.get(\"address\") as string) || null,\n      contactPerson: (formData.get(\"contactPerson\") as string) || null,\n      taxId: (formData.get(\"taxId\") as string) || null,\n      notes: (formData.get(\"notes\") as string) || null,\n      openingBalance: formData.get(\"openingBalance\")\n        ? parseFloat(formData.get(\"openingBalance\") as string) || 0\n        : 0,\n      isActive: true,\n    };\n\n    if (editingParty) {\n      updateMutation.mutate({ id: editingParty.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleTransactionSave = (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n\n    if (!validateTransactionForm(formData)) {\n      return;\n    }\n\n    const amount = parseFloat(formData.get(\"amount\") as string);\n    const isDebit =\n      transactionType === \"purchase\" || transactionType === \"adjustment_debit\";\n\n    const data = {\n      customerOrPartyId: selectedParty.id,\n      entityType: \"party\",\n      transactionDate: formData.get(\"transactionDate\") as string,\n      description: formData.get(\"description\") as string,\n      referenceNumber: formData.get(\"referenceNumber\") as string,\n      debitAmount: isDebit ? amount : 0,\n      creditAmount: !isDebit ? amount : 0,\n      transactionType,\n      paymentMethod: formData.get(\"paymentMethod\") as string,\n      notes: formData.get(\"notes\") as string,\n    };\n\n    transactionMutation.mutate(data);\n  };\n\n  const exportLedger = () => {\n    const csvContent = [\n      [\"Date\", \"Description\", \"Reference\", \"Debit\", \"Credit\", \"Balance\"].join(\n        \",\",\n      ),\n      ...ledgerTransactions.map((txn: LedgerTransaction) =>\n        [\n          format(new Date(txn.transactionDate), \"dd/MM/yyyy\"),\n          txn.description,\n          txn.referenceNumber || \"\",\n          txn.debitAmount,\n          txn.creditAmount,\n          txn.runningBalance,\n        ].join(\",\"),\n      ),\n    ].join(\"\\n\");\n\n    const blob = new Blob([csvContent], { type: \"text/csv\" });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `${selectedParty?.name}_ledger.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n\n    toast({\n      title: \"Export Successful\",\n      description: \"Ledger exported to CSV file\",\n    });\n  };\n\n  const partyTypes = [\n    \"supplier\",\n    \"vendor\",\n    \"distributor\",\n    \"contractor\",\n    \"service_provider\",\n  ];\n\n  const filteredParties = (parties as any[]).filter((party: any) => {\n    const matchesSearch =\n      party.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      party.email?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      party.contactPerson?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesType = typeFilter === \"all\" || party.type === typeFilter;\n    return matchesSearch && matchesType;\n  });\n\n  // Add sorting functionality\n  const { sortedData, sortConfig, requestSort } = useTableSort(\n    filteredParties,\n    \"name\",\n  );\n\n  const getTypeBadge = (type: string) => {\n    const variants: Record<\n      string,\n      \"default\" | \"secondary\" | \"destructive\" | \"outline\"\n    > = {\n      supplier: \"default\",\n      vendor: \"secondary\",\n      distributor: \"outline\",\n      contractor: \"destructive\",\n      service_provider: \"default\",\n    };\n    return variants[type] || \"outline\";\n  };\n\n  const getBalanceBadge = (balance: any) => {\n    const amount = parseFloat(balance || 0);\n    if (amount > 0) {\n      return {\n        variant: \"destructive\" as const,\n        text: `Dr. ${formatCurrency(amount)}`,\n      };\n    } else if (amount < 0) {\n      return {\n        variant: \"default\" as const,\n        text: `Cr. ${formatCurrency(Math.abs(amount))}`,\n      };\n    }\n    return { variant: \"secondary\" as const, text: formatCurrency(0) };\n  };\n\n  const calculateTotals = () => {\n    let totalDebit = 0;\n    let totalCredit = 0;\n\n    ledgerTransactions.forEach((txn: LedgerTransaction) => {\n      totalDebit += parseFloat(txn.debitAmount) || 0;\n      totalCredit += parseFloat(txn.creditAmount) || 0;\n    });\n\n    return { totalDebit, totalCredit };\n  };\n\n  if (error) {\n    if (isUnauthorizedError(error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return null;\n    }\n    console.error(\"Error loading parties:\", error);\n  }\n\n  const createPartyMutation = useMutation({\n    mutationFn: async (partyData: any) => {\n      console.log(\"Submitting party data:\", partyData);\n      const response = await apiRequest(\"POST\", \"/api/parties\", partyData);\n      return response;\n    },\n    onSuccess: (data) => {\n      console.log(\"Party created successfully:\", data);\n      queryClient.invalidateQueries({ queryKey: [\"/api/parties\"] });\n      setIsDialogOpen(false);\n      setEditingParty(null);\n      setSelectedType(\"\");\n      setFormErrors({});\n      toast({\n        title: \"Success\",\n        description: \"Party created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Create party error:\", error);\n\n      // Handle unauthorized errors\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n\n      // Handle validation errors\n      if (error.response?.data?.errors) {\n        setFormErrors(error.response.data.errors);\n        toast({\n          title: \"Validation Error\",\n          description: \"Please check the form for errors\",\n          variant: \"destructive\",\n        });\n      } else {\n        const errorMessage =\n          error.response?.data?.message ||\n          error.message ||\n          \"Failed to create party\";\n        toast({\n          title: \"Error\",\n          description: errorMessage,\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const updatePartyMutation = useMutation({\n    mutationFn: async ({\n      id,\n      ...partyData\n    }: {\n      id: string;\n      [key: string]: any;\n    }) => {\n      console.log(`Updating party with ID: ${id} and data:`, partyData);\n      const response = await apiRequest(\"PUT\", `/api/parties/${id}`, partyData);\n      return response;\n    },\n    onSuccess: (data) => {\n      console.log(\"Party updated successfully:\", data);\n      queryClient.invalidateQueries({ queryKey: [\"/api/parties\"] });\n      setIsDialogOpen(false);\n      setEditingParty(null);\n      setSelectedType(\"\");\n      setFormErrors({});\n      toast({\n        title: \"Success\",\n        description: \"Party updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Update party error:\", error);\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      if (error.response?.data?.errors) {\n        setFormErrors(error.response.data.errors);\n        toast({\n          title: \"Validation Error\",\n          description: \"Please check the form for errors\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Error\",\n          description:\n            error.response?.data?.message || \"Failed to update party\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n\n    // Client-side validation\n    const errors: FormErrors = {};\n    const name = formData.get(\"name\") as string;\n    const type = formData.get(\"type\") as string;\n\n    if (!name?.trim()) {\n      errors.name = \"Party name is required\";\n    }\n    if (!type?.trim()) {\n      errors.type = \"Party type is required\";\n    }\n\n    // Validate email format if provided\n    const email = formData.get(\"email\") as string;\n    if (email && email.trim() && !/\\S+@\\S+\\.\\S+/.test(email.trim())) {\n      errors.email = \"Please enter a valid email address\";\n    }\n\n    // Validate opening balance if provided\n    const openingBalance = formData.get(\"openingBalance\") as string;\n    if (\n      openingBalance &&\n      openingBalance.trim() &&\n      isNaN(parseFloat(openingBalance))\n    ) {\n      errors.openingBalance = \"Please enter a valid number\";\n    }\n\n    if (Object.keys(errors).length > 0) {\n      setFormErrors(errors);\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fix the errors in the form\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Clear previous errors\n    setFormErrors({});\n\n    const partyData = {\n      name: name.trim(),\n      type: type.trim(),\n      contactPerson: (formData.get(\"contactPerson\") as string)?.trim() || null,\n      email: email?.trim() || null,\n      phone: (formData.get(\"phone\") as string)?.trim() || null,\n      address: (formData.get(\"address\") as string)?.trim() || null,\n      taxId: (formData.get(\"taxId\") as string)?.trim() || null,\n      notes: (formData.get(\"notes\") as string)?.trim() || null,\n      openingBalance: openingBalance?.trim() || \"0\",\n    };\n\n    console.log(\"Form submission - Party data:\", partyData);\n\n    if (editingParty) {\n      updatePartyMutation.mutate({ id: editingParty.id, ...partyData });\n    } else {\n      createPartyMutation.mutate(partyData);\n    }\n  };\n\n  return (\n    <div className=\"p-4 sm:p-6 space-y-6\">\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <p className=\"text-gray-600\">\n            Manage suppliers, vendors, and business partners with complete\n            transaction history\n          </p>\n        </div>\n        <PermissionWrapper resource=\"parties\" action=\"write\">\n          <Dialog\n            open={isDialogOpen}\n            onOpenChange={(open) => {\n              setIsDialogOpen(open);\n              if (!open) {\n                setEditingParty(null);\n                setSelectedType(\"\");\n                setFormErrors({});\n              }\n            }}\n          >\n            <DialogTrigger asChild>\n              <Button\n                onClick={() => {\n                  setEditingParty(null);\n                  setSelectedType(\"\");\n                  setFormErrors({});\n                }}\n                className=\"w-full sm:w-auto\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Party\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl mx-auto max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingParty ? \"Edit Party\" : \"Add New Party\"}\n                </DialogTitle>\n                <DialogDescription>Enter party details below</DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Party Name *</Label>\n                    <Input\n                      id=\"name\"\n                      name=\"name\"\n                      placeholder=\"Enter party name\"\n                      defaultValue={editingParty?.name || \"\"}\n                      className={formErrors.name ? \"border-red-500\" : \"\"}\n                      required\n                    />\n                    {formErrors.name && (\n                      <div className=\"flex items-center gap-1 text-sm text-red-600\">\n                        <AlertCircle className=\"h-4 w-4\" />\n                        {formErrors.name}\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"type\">Party Type *</Label>\n                    <Select\n                      value={selectedType || editingParty?.type || \"\"}\n                      onValueChange={setSelectedType}\n                    >\n                      <SelectTrigger\n                        className={formErrors.type ? \"border-red-500\" : \"\"}\n                      >\n                        <SelectValue placeholder=\"Select party type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {partyTypes.map((type) => (\n                          <SelectItem key={type} value={type}>\n                            {type.charAt(0).toUpperCase() +\n                              type.slice(1).replace(\"_\", \" \")}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <input\n                      type=\"hidden\"\n                      name=\"type\"\n                      value={selectedType || editingParty?.type || \"\"}\n                    />\n                    {formErrors.type && (\n                      <div className=\"flex items-center gap-1 text-sm text-red-600\">\n                        <AlertCircle className=\"h-4 w-4\" />\n                        {formErrors.type}\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <Input\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      placeholder=\"Enter email address\"\n                      defaultValue={editingParty?.email || \"\"}\n                      className={formErrors.email ? \"border-red-500\" : \"\"}\n                    />\n                    {formErrors.email && (\n                      <div className=\"flex items-center gap-1 text-sm text-red-600\">\n                        <AlertCircle className=\"h-4 w-4\" />\n                        {formErrors.email}\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Phone Number</Label>\n                    <Input\n                      id=\"phone\"\n                      name=\"phone\"\n                      placeholder=\"Enter phone number\"\n                      defaultValue={editingParty?.phone || \"\"}\n                      className={formErrors.phone ? \"border-red-500\" : \"\"}\n                    />\n                    {formErrors.phone && (\n                      <div className=\"flex items-center gap-1 text-sm text-red-600\">\n                        <AlertCircle className=\"h-4 w-4\" />\n                        {formErrors.phone}\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"contactPerson\">Contact Person</Label>\n                    <Input\n                      id=\"contactPerson\"\n                      name=\"contactPerson\"\n                      placeholder=\"Enter contact person name\"\n                      defaultValue={editingParty?.contactPerson || \"\"}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"taxId\">Tax ID / VAT Number</Label>\n                    <Input\n                      id=\"taxId\"\n                      name=\"taxId\"\n                      placeholder=\"Enter tax ID or VAT number\"\n                      defaultValue={editingParty?.taxId || \"\"}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">Address</Label>\n                  <Textarea\n                    id=\"address\"\n                    name=\"address\"\n                    placeholder=\"Enter complete address\"\n                    defaultValue={editingParty?.address || \"\"}\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"openingBalance\">Opening Balance</Label>\n                  <Input\n                    id=\"openingBalance\"\n                    name=\"openingBalance\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    placeholder=\"Enter opening balance (positive for debit, negative for credit)\"\n                    defaultValue={editingParty?.openingBalance || \"0\"}\n                    className={\n                      formErrors.openingBalance ? \"border-red-500\" : \"\"\n                    }\n                  />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Positive values represent amounts owed to you (debit),\n                    negative values represent amounts you owe (credit)\n                  </p>\n                  {formErrors.openingBalance && (\n                    <div className=\"flex items-center gap-1 text-sm text-red-600\">\n                      <AlertCircle className=\"h-4 w-4\" />\n                      {formErrors.openingBalance}\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"notes\">Notes</Label>\n                  <Textarea\n                    id=\"notes\"\n                    name=\"notes\"\n                    placeholder=\"Enter any additional notes\"\n                    defaultValue={editingParty?.notes || \"\"}\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"flex flex-col sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsDialogOpen(false)}\n                    className=\"w-full sm:w-auto\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={\n                      createMutation.isPending || updateMutation.isPending\n                    }\n                    className=\"w-full sm:w-auto\"\n                  >\n                    {editingParty ? \"Update Party\" : \"Create Party\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </PermissionWrapper>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n            <CardTitle>Parties List</CardTitle>\n            <div className=\"flex flex-col sm:flex-row gap-2 w-full sm:w-auto\">\n              <div className=\"w-full sm:w-64\">\n                <SearchBar\n                  placeholder=\"Search parties...\"\n                  value={searchQuery}\n                  onChange={setSearchQuery}\n                  className=\"w-full\"\n                />\n              </div>\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"w-full sm:w-48\">\n                  <SelectValue placeholder=\"All Types\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  {partyTypes.map((type) => (\n                    <SelectItem key={type} value={type}>\n                      {type.charAt(0).toUpperCase() +\n                        type.slice(1).replace(\"_\", \" \")}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <SortableTableHeader\n                      sortKey=\"name\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Party Details\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"type\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Type\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"email\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                      className=\"hidden sm:table-cell\"\n                    >\n                      Contact Info\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"currentBalance\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Account Balance\n                    </SortableTableHeader>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sortedData.map((party: any) => {\n                    const balanceInfo = getBalanceBadge(party.currentBalance);\n                    return (\n                      <TableRow key={party.id}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                              <Building className=\"h-4 w-4 text-primary\" />\n                            </div>\n                            <div>\n                              <div className=\"font-medium\">{party.name}</div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                {party.contactPerson &&\n                                  `Contact: ${party.contactPerson}`}\n                              </div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={getTypeBadge(party.type)}>\n                            {party.type?.charAt(0).toUpperCase() +\n                              party.type?.slice(1).replace(\"_\", \" \")}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"hidden sm:table-cell\">\n                          <div className=\"text-sm\">\n                            {party.email && <div>{party.email}</div>}\n                            {party.phone && (\n                              <div className=\"text-muted-foreground\">\n                                {party.phone}\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={balanceInfo.variant}>\n                            {balanceInfo.text}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-1\">\n                            <PermissionWrapper resource=\"parties\" action=\"read\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setSelectedParty(party);\n                                  setIsLedgerDialogOpen(true);\n                                }}\n                                className=\"text-green-600 hover:text-green-800 focus:outline-none\"\n                                title=\"View\"\n                              >\n                                <Eye className=\"h-4 w-4\" />\n                              </Button>\n                            </PermissionWrapper>\n                            <PermissionWrapper\n                              resource=\"parties\"\n                              action=\"write\"\n                            >\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setSelectedParty(party);\n                                  setIsTransactionDialogOpen(true);\n                                }}\n                                title=\"Add Transaction\"\n                              >\n                                <Plus className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setEditingParty(party);\n                                  setSelectedType(party.type || \"\");\n                                  setFormErrors({});\n                                  setIsDialogOpen(true);\n                                }}\n                                className=\"text-blue-600 hover:text-blue-800 focus:outline-none\"\n                                title=\"Edit\"\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <DeleteConfirmationDialog\n                                trigger={\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    className=\"text-red-600 hover:text-red-800 focus:outline-none\"\n                                    title=\"Delete\"\n                                  >\n                                    <Trash2 className=\"h-4 w-4\" />\n                                  </Button>\n                                }\n                                title=\"Delete Party\"\n                                itemName={party.name}\n                                onConfirm={() =>\n                                  deleteMutation.mutate(party.id)\n                                }\n                                isLoading={deleteMutation.isPending}\n                              />\n                            </PermissionWrapper>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n              {sortedData.length === 0 && (\n                <div className=\"text-center py-8\">\n                  <Building className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-muted-foreground mb-2\">\n                    No parties found\n                  </h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    {searchQuery || typeFilter !== \"all\"\n                      ? \"Try adjusting your search criteria\"\n                      : \"Start by adding your first party\"}\n                  </p>\n                  <Button onClick={() => setIsDialogOpen(true)}>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Party\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Transaction Dialog */}\n      <Dialog\n        open={isTransactionDialogOpen}\n        onOpenChange={(open) => {\n          setIsTransactionDialogOpen(open);\n          if (!open) {\n            setTransactionType(\"\");\n            setTransactionErrors({});\n          }\n        }}\n      >\n        <DialogContent className=\"max-w-2xl mx-auto max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Plus className=\"h-5 w-5\" />\n              Add Transaction for {selectedParty?.name}\n            </DialogTitle>\n            <DialogDescription className=\"text-base\">\n              Record a new transaction to track debits and credits for this\n              party\n            </DialogDescription>\n          </DialogHeader>\n\n          <form onSubmit={handleTransactionSave} className=\"space-y-6\">\n            {/* Transaction Type Section */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg\">Transaction Details</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label\n                      htmlFor=\"transactionType\"\n                      className=\"text-sm font-medium\"\n                    >\n                      Transaction Type *\n                    </Label>\n                    <Select\n                      value={transactionType}\n                      onValueChange={setTransactionType}\n                      required\n                    >\n                      <SelectTrigger\n                        className={\n                          transactionErrors.transactionType\n                            ? \"border-red-500\"\n                            : \"\"\n                        }\n                      >\n                        <SelectValue placeholder=\"Select transaction type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"purchase\">\n                          <div className=\"flex flex-col\">\n                            <span className=\"font-medium\">Purchase</span>\n                            <span className=\"text-xs text-muted-foreground\">\n                              We owe them (Debit)\n                            </span>\n                          </div>\n                        </SelectItem>\n                        <SelectItem value=\"payment_sent\">\n                          <div className=\"flex flex-col\">\n                            <span className=\"font-medium\">Payment Sent</span>\n                            <span className=\"text-xs text-muted-foreground\">\n                              We paid them (Credit)\n                            </span>\n                          </div>\n                        </SelectItem>\n                        <SelectItem value=\"adjustment_debit\">\n                          <div className=\"flex flex-col\">\n                            <span className=\"font-medium\">\n                              Adjustment (Debit)\n                            </span>\n                            <span className=\"text-xs text-muted-foreground\">\n                              Increase what they owe us\n                            </span>\n                          </div>\n                        </SelectItem>\n                        <SelectItem value=\"adjustment_credit\">\n                          <div className=\"flex flex-col\">\n                            <span className=\"font-medium\">\n                              Adjustment (Credit)\n                            </span>\n                            <span className=\"text-xs text-muted-foreground\">\n                              Decrease what they owe us\n                            </span>\n                          </div>\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                    {transactionErrors.transactionType && (\n                      <div className=\"flex items-center gap-1 text-sm text-red-600\">\n                        <AlertCircle className=\"h-4 w-4\" />\n                        {transactionErrors.transactionType}\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label\n                      htmlFor=\"transactionDate\"\n                      className=\"text-sm font-medium\"\n                    >\n                      Transaction Date *\n                    </Label>\n                    <Input\n                      id=\"transactionDate\"\n                      name=\"transactionDate\"\n                      type=\"date\"\n                      defaultValue={format(new Date(), \"yyyy-MM-dd\")}\n                      className={\n                        transactionErrors.transactionDate\n                          ? \"border-red-500\"\n                          : \"\"\n                      }\n                      required\n                    />\n                    {transactionErrors.transactionDate && (\n                      <div className=\"flex items-center gap-1 text-sm text-red-600\">\n                        <AlertCircle className=\"h-4 w-4\" />\n                        {transactionErrors.transactionDate}\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\" className=\"text-sm font-medium\">\n                    Description *\n                  </Label>\n                  <Input\n                    id=\"description\"\n                    name=\"description\"\n                    placeholder=\"Enter detailed transaction description\"\n                    className={\n                      transactionErrors.description ? \"border-red-500\" : \"\"\n                    }\n                    required\n                  />\n                  {transactionErrors.description && (\n                    <div className=\"flex items-center gap-1 text-sm text-red-600\">\n                      <AlertCircle className=\"h-4 w-4\" />\n                      {transactionErrors.description}\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Amount and Payment Section */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg\">Financial Details</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"amount\" className=\"text-sm font-medium\">\n                      Amount *\n                    </Label>\n                    <Input\n                      id=\"amount\"\n                      name=\"amount\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      min=\"0.01\"\n                      placeholder=\"0.00\"\n                      className={\n                        transactionErrors.amount ? \"border-red-500\" : \"\"\n                      }\n                      required\n                    />\n                    {transactionErrors.amount && (\n                      <div className=\"flex items-center gap-1 text-sm text-red-600\">\n                        <AlertCircle className=\"h-4 w-4\" />\n                        {transactionErrors.amount}\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label\n                      htmlFor=\"paymentMethod\"\n                      className=\"text-sm font-medium\"\n                    >\n                      Payment Method\n                    </Label>\n                    <Select name=\"paymentMethod\">\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select payment method\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"cash\">Cash</SelectItem>\n                        <SelectItem value=\"bank_transfer\">\n                          Bank Transfer\n                        </SelectItem>\n                        <SelectItem value=\"cheque\">Cheque</SelectItem>\n                        <SelectItem value=\"credit_card\">Credit Card</SelectItem>\n                        <SelectItem value=\"upi\">UPI</SelectItem>\n                        <SelectItem value=\"other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label\n                    htmlFor=\"referenceNumber\"\n                    className=\"text-sm font-medium\"\n                  >\n                    Reference Number\n                  </Label>\n                  <Input\n                    id=\"referenceNumber\"\n                    name=\"referenceNumber\"\n                    placeholder=\"Invoice number, receipt number, etc. (optional)\"\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    Enter invoice number, receipt number, or any reference for\n                    this transaction\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Additional Information Section */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg\">\n                  Additional Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"notes\" className=\"text-sm font-medium\">\n                    Additional Notes\n                  </Label>\n                  <Textarea\n                    id=\"notes\"\n                    name=\"notes\"\n                    placeholder=\"Any additional notes, terms, or conditions (optional)\"\n                    rows={3}\n                    className=\"resize-none\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Account Impact Preview */}\n            {transactionType && (\n              <Card className=\"border-blue-200 bg-blue-50\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                    <span className=\"text-sm font-medium text-blue-900\">\n                      Account Impact\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-blue-800\">\n                    {transactionType === \"purchase\" &&\n                      \"This will increase the amount owed to the party (Debit their account)\"}\n                    {transactionType === \"payment_sent\" &&\n                      \"This will decrease the amount owed to the party (Credit their account)\"}\n                    {transactionType === \"adjustment_debit\" &&\n                      \"This will increase the party's account balance (Debit adjustment)\"}\n                    {transactionType === \"adjustment_credit\" &&\n                      \"This will decrease the party's account balance (Credit adjustment)\"}\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Form Actions */}\n            <div className=\"flex flex-col sm:flex-row justify-end gap-3 pt-4 border-t\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  setIsTransactionDialogOpen(false);\n                  setTransactionType(\"\");\n                  setTransactionErrors({});\n                }}\n                className=\"w-full sm:w-auto\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={transactionMutation.isPending || !transactionType}\n                className=\"w-full sm:w-auto\"\n              >\n                {transactionMutation.isPending ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Adding Transaction...\n                  </>\n                ) : (\n                  <>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Transaction\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Ledger View Dialog */}\n      <Dialog open={isLedgerDialogOpen} onOpenChange={setIsLedgerDialogOpen}>\n        <DialogContent className=\"max-w-6xl mx-auto max-h-[80vh]\">\n          <DialogHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <DialogTitle>Party Ledger - {selectedParty?.name}</DialogTitle>\n                <DialogDescription>\n                  Complete transaction history with debit/credit tracking\n                </DialogDescription>\n              </div>\n              <Button variant=\"outline\" onClick={exportLedger}>\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export CSV\n              </Button>\n            </div>\n          </DialogHeader>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Total Debits\n                </div>\n                <div className=\"text-lg font-semibold text-red-600\">\n                  {formatCurrency(calculateTotals().totalDebit)}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Total Credits\n                </div>\n                <div className=\"text-lg font-semibold text-green-600\">\n                  {formatCurrency(calculateTotals().totalCredit)}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-sm text-muted-foreground\">Net Balance</div>\n                <div\n                  className={`text-lg font-semibold ${\n                    parseFloat(selectedParty?.currentBalance || 0) >= 0\n                      ? \"text-red-600\"\n                      : \"text-green-600\"\n                  }`}\n                >\n                  {getBalanceBadge(selectedParty?.currentBalance).text}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"overflow-y-auto max-h-[50vh] border rounded-lg\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Description</TableHead>\n                  <TableHead>Reference</TableHead>\n                  <TableHead className=\"text-right\">Debit</TableHead>\n                  <TableHead className=\"text-right\">Credit</TableHead>\n                  <TableHead className=\"text-right\">Running Balance</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {ledgerTransactions.map((transaction: LedgerTransaction) => (\n                  <TableRow key={transaction.id}>\n                    <TableCell>\n                      {format(\n                        new Date(transaction.transactionDate),\n                        \"dd/MM/yyyy\",\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">\n                          {transaction.description}\n                        </div>\n                        {transaction.notes && (\n                          <div className=\"text-sm text-muted-foreground\">\n                            {transaction.notes}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>{transaction.referenceNumber || \"-\"}</TableCell>\n                    <TableCell className=\"text-right\">\n                      {parseFloat(transaction.debitAmount) > 0 ? (\n                        <span className=\"text-red-600 font-medium\">\n                          {formatCurrency(parseFloat(transaction.debitAmount))}\n                        </span>\n                      ) : (\n                        \"-\"\n                      )}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      {parseFloat(transaction.creditAmount) > 0 ? (\n                        <span className=\"text-green-600 font-medium\">\n                          {formatCurrency(parseFloat(transaction.creditAmount))}\n                        </span>\n                      ) : (\n                        \"-\"\n                      )}\n                    </TableCell>\n                    <TableCell className=\"text-right font-medium\">\n                      <span\n                        className={\n                          parseFloat(transaction.runningBalance) >= 0\n                            ? \"text-red-600\"\n                            : \"text-green-600\"\n                        }\n                      >\n                        {formatCurrency(\n                          Math.abs(parseFloat(transaction.runningBalance)),\n                        )}\n                        {parseFloat(transaction.runningBalance) >= 0\n                          ? \" Dr\"\n                          : \" Cr\"}\n                      </span>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {ledgerTransactions.length === 0 && (\n                  <TableRow>\n                    <TableCell\n                      colSpan={6}\n                      className=\"text-center py-8 text-muted-foreground\"\n                    >\n                      No transactions found. Click the \"+\" button to add the\n                      first transaction.\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":57454},"client/src/pages/production.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport SearchBar from \"@/components/search-bar\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useTableSort } from \"@/hooks/useTableSort\";\nimport { SortableTableHeader } from \"@/components/ui/sortable-table-header\";\nimport {\n  Pagination,\n  PaginationInfo,\n  PageSizeSelector,\n  usePagination,\n} from \"@/components/ui/pagination\";\nimport { Plus, Search, Edit, Trash2, Clock, Check, Target } from \"lucide-react\";\nimport { DeleteConfirmationDialog } from \"@/components/ui/delete-confirmation-dialog\";\n\ninterface ProductionItem {\n  id: number;\n  productId: number;\n  productName: string;\n  quantity: number;\n  actualQuantity?: number;\n  scheduledDate: string;\n  startTime?: string;\n  endTime?: string;\n  status: string;\n  assignedTo?: string;\n  notes?: string;\n}\n\nexport default function Production() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingProduction, setEditingProduction] =\n    useState<ProductionItem | null>(null);\n  const [selectedProductId, setSelectedProductId] = useState(\"\");\n  const [selectedStatus, setSelectedStatus] = useState(\"\");\n  const { toast } = useToast();\n\n  // For search and filtering\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n\n  // Fetch products\n  const { data: products = [] } = useQuery({\n    queryKey: [\"products\"],\n    queryFn: async () => {\n      try {\n        const res = await apiRequest(\"GET\", \"/api/products\");\n        return Array.isArray(res) ? res : res.products || [];\n      } catch (error) {\n        console.error(\"Failed to fetch products:\", error);\n        return [];\n      }\n    },\n    retry: (failureCount, error) =>\n      !isUnauthorizedError(error) && failureCount < 3,\n  });\n\n  // Fetch production schedule\n  const {\n    data: productionSchedule = [],\n    isLoading,\n    isError,\n    error,\n  } = useQuery({\n    queryKey: [\"production-schedule\"],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", \"/api/production-schedule\");\n      return Array.isArray(res) ? res : res.schedule || [];\n    },\n    retry: (failureCount, error) =>\n      !isUnauthorizedError(error) && failureCount < 3,\n  });\n\n  // Create production mutation\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", \"/api/production-schedule\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"production-schedule\"] });\n      setIsDialogOpen(false);\n      setEditingProduction(null);\n      setSelectedProductId(\"\");\n      setSelectedStatus(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Production item scheduled successfully\",\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Session expired. Redirecting to login...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => (window.location.href = \"/api/login\"), 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to schedule production\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update production mutation\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      await apiRequest(\"PUT\", `/api/production-schedule/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"production-schedule\"] });\n      setIsDialogOpen(false);\n      setEditingProduction(null);\n      setSelectedProductId(\"\");\n      setSelectedStatus(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Production item updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Session expired. Redirecting to login...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => (window.location.href = \"/api/login\"), 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update production\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete production mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"DELETE\", `/api/production-schedule/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"production-schedule\"] });\n      toast({\n        title: \"Success\",\n        description: \"Production item deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Session expired. Redirecting to login...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => (window.location.href = \"/api/login\"), 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete production item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Close day mutation\n  const closeDayMutation = useMutation({\n    mutationFn: async () => {\n      const today = new Date().toISOString().split(\"T\")[0];\n      await apiRequest(\"POST\", \"/api/production-schedule/close-day\", {\n        date: today,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"production-schedule\"] });\n      toast({\n        title: \"Success\",\n        description: \"Production day closed successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to close production day\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n\n    const productId = parseInt(selectedProductId);\n    const quantity = parseFloat(formData.get(\"quantity\") as string);\n    const scheduledDate = formData.get(\"scheduledDate\") as string;\n    const startTime = formData.get(\"startTime\") as string;\n    const endTime = formData.get(\"endTime\") as string;\n    const status = selectedStatus;\n    const assignedTo = formData.get(\"assignedTo\") as string;\n    const notes = formData.get(\"notes\") as string;\n    const actualQuantity = formData.get(\"actualQuantity\") as string;\n\n    if (!productId || !quantity || !scheduledDate || !status) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const data = {\n      productId,\n      quantity,\n      actualQuantity: actualQuantity ? parseFloat(actualQuantity) : null,\n      scheduledDate,\n      startTime: startTime || null,\n      endTime: endTime || null,\n      status,\n      assignedTo: assignedTo || null,\n      notes: notes || null,\n    };\n\n    if (editingProduction) {\n      updateMutation.mutate({ id: editingProduction.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"default\";\n      case \"in_progress\":\n        return \"secondary\";\n      case \"scheduled\":\n        return \"outline\";\n      case \"cancelled\":\n        return \"destructive\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  // Set form values when editing\n  useEffect(() => {\n    if (editingProduction) {\n      setSelectedProductId(editingProduction.productId.toString());\n      setSelectedStatus(editingProduction.status);\n    } else {\n      setSelectedProductId(\"\");\n      setSelectedStatus(\"\");\n    }\n  }, [editingProduction]);\n\n  // Calculate totals\n  const totalPlanned = productionSchedule.reduce(\n    (sum: number, item: any) => sum + (item.quantity || 0),\n    0,\n  );\n  const totalActual = productionSchedule.reduce(\n    (sum: number, item: any) => sum + (item.actualQuantity || 0),\n    0,\n  );\n\n  // Filter and sort data\n  const filteredSchedule = productionSchedule.filter((item: any) => {\n    const matchesSearch =\n      item.productName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      item.notes?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus =\n      statusFilter === \"all\" || item.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  // Add sorting functionality\n  const { sortedData, sortConfig, requestSort } = useTableSort(\n    filteredSchedule,\n    \"scheduledDate\",\n  );\n\n  // Add pagination functionality\n  const {\n    currentItems,\n    currentPage,\n    totalPages,\n    pageSize,\n    setPageSize,\n    goToPage,\n    totalItems,\n  } = usePagination(sortedData, 10);\n\n  return (\n    <div className=\"p-4 sm:p-6 space-y-6\">\n      {/* Header with Statistics */}\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <p className=\"text-gray-600\">\n            Plan and track your production activities\n          </p>\n          <div className=\"flex gap-4 mt-2 text-sm\">\n            <span className=\"flex items-center gap-1\">\n              <Target className=\"h-4 w-4 text-blue-600\" />\n              <strong>Planned Quantity:</strong> {totalPlanned}\n            </span>\n            <span className=\"flex items-center gap-1\">\n              <Check className=\"h-4 w-4 text-green-600\" />\n              <strong>Actual Production:</strong> {totalActual}\n            </span>\n          </div>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button\n            onClick={() => closeDayMutation.mutate()}\n            variant=\"outline\"\n            disabled={closeDayMutation.isPending}\n          >\n            <Clock className=\"h-4 w-4 mr-2\" />\n            {closeDayMutation.isPending ? \"Closing...\" : \"Close Day\"}\n          </Button>\n          <Dialog\n            open={isDialogOpen}\n            onOpenChange={(open) => {\n              setIsDialogOpen(open);\n              if (!open) {\n                setEditingProduction(null);\n                setSelectedProductId(\"\");\n                setSelectedStatus(\"\");\n              }\n            }}\n          >\n            <DialogTrigger asChild>\n              <Button\n                onClick={() => setEditingProduction(null)}\n                className=\"w-full sm:w-auto\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Schedule Production\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md mx-auto max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingProduction\n                    ? \"Edit Production Item\"\n                    : \"Schedule New Production\"}\n                </DialogTitle>\n                <DialogDescription>\n                  Enter production details below\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleSave} className=\"space-y-4\">\n                <div>\n                  <Select\n                    value={selectedProductId}\n                    onValueChange={setSelectedProductId}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select Product\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {products.map((product: any) => (\n                        <SelectItem\n                          key={product.id}\n                          value={product.id.toString()}\n                        >\n                          {product.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Input\n                    name=\"quantity\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    placeholder={`Planned Quantity${\n                      selectedProductId\n                        ? (() => {\n                            const product = products.find(\n                              (p: any) => p.id.toString() === selectedProductId,\n                            );\n                            return product?.unitAbbreviation || product?.unit\n                              ? ` (${product.unitAbbreviation || product.unit})`\n                              : \"\";\n                          })()\n                        : \"\"\n                    }`}\n                    defaultValue={editingProduction?.quantity || \"\"}\n                    required\n                  />\n                </div>\n                {editingProduction && (\n                  <div>\n                    <Input\n                      name=\"actualQuantity\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder={`Actual Quantity Produced${\n                        selectedProductId\n                          ? (() => {\n                              const product = products.find(\n                                (p: any) =>\n                                  p.id.toString() === selectedProductId,\n                              );\n                              return product?.unitAbbreviation || product?.unit\n                                ? ` (${product.unitAbbreviation || product.unit})`\n                                : \"\";\n                            })()\n                          : \"\"\n                      }`}\n                      defaultValue={editingProduction?.actualQuantity || \"\"}\n                    />\n                  </div>\n                )}\n                <Input\n                  name=\"scheduledDate\"\n                  type=\"date\"\n                  defaultValue={\n                    editingProduction?.scheduledDate\n                      ? new Date(editingProduction.scheduledDate)\n                          .toISOString()\n                          .split(\"T\")[0]\n                      : new Date().toISOString().split(\"T\")[0]\n                  }\n                  required\n                />\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <Input\n                    name=\"startTime\"\n                    type=\"time\"\n                    placeholder=\"Start Time\"\n                    defaultValue={editingProduction?.startTime || \"\"}\n                  />\n                  <Input\n                    name=\"endTime\"\n                    type=\"time\"\n                    placeholder=\"End Time\"\n                    defaultValue={editingProduction?.endTime || \"\"}\n                  />\n                </div>\n                <div>\n                  <Select\n                    value={selectedStatus}\n                    onValueChange={setSelectedStatus}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select Status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                      <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                      <SelectItem value=\"completed\">Completed</SelectItem>\n                      <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <Input\n                  name=\"assignedTo\"\n                  placeholder=\"Assigned To (optional)\"\n                  defaultValue={editingProduction?.assignedTo || \"\"}\n                />\n                <Textarea\n                  name=\"notes\"\n                  placeholder=\"Notes (optional)\"\n                  defaultValue={editingProduction?.notes || \"\"}\n                  rows={3}\n                />\n                <div className=\"flex flex-col sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsDialogOpen(false)}\n                    className=\"w-full sm:w-auto\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={\n                      createMutation.isPending || updateMutation.isPending\n                    }\n                    className=\"w-full sm:w-auto\"\n                  >\n                    {createMutation.isPending || updateMutation.isPending\n                      ? \"Saving...\"\n                      : editingProduction\n                        ? \"Update\"\n                        : \"Schedule\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Search, Filter and Status */}\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <SearchBar\n          placeholder=\"Search by product name or notes...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n        />\n        <div className=\"flex gap-2\">\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-full sm:w-auto\">\n              <SelectValue placeholder=\"Filter by Status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Statuses</SelectItem>\n              <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n              <SelectItem value=\"in_progress\">In Progress</SelectItem>\n              <SelectItem value=\"completed\">Completed</SelectItem>\n              <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Production Schedule List */}\n      <Card>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : isError ? (\n            <div className=\"text-center py-8 text-destructive\">\n              Error loading production schedule: {error.message}\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <SortableTableHeader\n                      sortKey=\"productName\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Product\n                    </SortableTableHeader>\n                    <TableCell>Planned Qty</TableCell>\n                    <TableCell>Actual Qty</TableCell>\n                    <SortableTableHeader\n                      sortKey=\"scheduledDate\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Date\n                    </SortableTableHeader>\n                    <TableHead>Time</TableHead>\n                    <SortableTableHeader\n                      sortKey=\"status\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Status\n                    </SortableTableHeader>\n                    <TableHead>Assigned To</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {currentItems.length > 0 ? (\n                    currentItems.map((item: ProductionItem) => (\n                      <TableRow key={item.id}>\n                        <TableCell className=\"font-medium\">\n                          {item.productName}\n                        </TableCell>\n                        <TableCell>\n                          {item.quantity}\n                          {(() => {\n                            const product = products.find(\n                              (p: any) => p.id === item.productId,\n                            );\n                            return (\n                              product?.unitAbbreviation || product?.unit || \"\"\n                            );\n                          })() &&\n                            ` ${(() => {\n                              const product = products.find(\n                                (p: any) => p.id === item.productId,\n                              );\n                              return (\n                                product?.unitAbbreviation || product?.unit || \"\"\n                              );\n                            })()}`}\n                        </TableCell>\n                        <TableCell>\n                          {item.actualQuantity !== null &&\n                          item.actualQuantity !== undefined ? (\n                            <span className=\"text-green-600 font-medium\">\n                              {item.actualQuantity}\n                              {(() => {\n                                const product = products.find(\n                                  (p: any) => p.id === item.productId,\n                                );\n                                return (\n                                  product?.unitAbbreviation ||\n                                  product?.unit ||\n                                  \"\"\n                                );\n                              })() &&\n                                ` ${(() => {\n                                  const product = products.find(\n                                    (p: any) => p.id === item.productId,\n                                  );\n                                  return (\n                                    product?.unitAbbreviation ||\n                                    product?.unit ||\n                                    \"\"\n                                  );\n                                })()}`}\n                            </span>\n                          ) : (\n                            <span className=\"text-gray-400\">‚Äî</span>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          {new Date(item.scheduledDate).toLocaleDateString()}\n                        </TableCell>\n                        <TableCell>\n                          {item.startTime && item.endTime ? (\n                            <span className=\"text-sm\">\n                              {item.startTime} - {item.endTime}\n                            </span>\n                          ) : (\n                            <span className=\"text-gray-400\">‚Äî</span>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={getStatusBadgeVariant(item.status)}>\n                            {item.status}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          {item.assignedTo || (\n                            <span className=\"text-gray-400\">‚Äî</span>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-1\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => {\n                                setEditingProduction(item);\n                                setIsDialogOpen(true);\n                              }}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <DeleteConfirmationDialog\n                              trigger={\n                                <Button variant=\"ghost\" size=\"sm\">\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              }\n                              title=\"Delete Production Item\"\n                              itemName={`production for ${item.productName}`}\n                              onConfirm={() => deleteMutation.mutate(item.id)}\n                              isLoading={deleteMutation.isPending}\n                            />\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  ) : (\n                    <TableRow>\n                      <TableCell colSpan={8} className=\"text-center py-8\">\n                        <Target className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-semibold text-muted-foreground mb-2\">\n                          No production items found\n                        </h3>\n                        <p className=\"text-muted-foreground mb-4\">\n                          Adjust your search or filters to find production\n                          items.\n                        </p>\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n        {!isLoading && !isError && currentItems.length > 0 && (\n          <CardContent>\n            <div className=\"flex flex-col sm:flex-row justify-between items-center\">\n              <PaginationInfo\n                currentPage={currentPage}\n                totalPages={totalPages}\n                pageSize={pageSize}\n                totalItems={totalItems}\n              />\n              <Pagination\n                currentPage={currentPage}\n                totalPages={totalPages}\n                onPageChange={goToPage}\n              />\n              <PageSizeSelector pageSize={pageSize} setPageSize={setPageSize} />\n            </div>\n          </CardContent>\n        )}\n      </Card>\n    </div>\n  );\n}\n","size_bytes":26905},"client/src/pages/products.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Label } from \"@/components/ui/label\";\nimport ProductForm from \"@/components/product-form\";\nimport CostCalculator from \"@/components/recipe\";\nimport SearchBar from \"@/components/search-bar\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTableSort } from \"@/hooks/useTableSort\";\nimport { SortableTableHeader } from \"@/components/ui/sortable-table-header\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\nimport { DeleteConfirmationDialog } from \"@/components/ui/delete-confirmation-dialog\";\nimport {\n  Pagination,\n  PaginationInfo,\n  PageSizeSelector,\n  usePagination,\n} from \"@/components/ui/pagination\";\nimport {\n  MoreHorizontal,\n  Plus,\n  Printer,\n  Edit,\n  Trash2,\n  Download,\n  Upload,\n  Cookie,\n  Calculator,\n} from \"lucide-react\";\nimport { useUnits } from \"@/hooks/useUnits\";\n\nexport default function Products() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState(\"all\");\n  const [showProductForm, setShowProductForm] = useState(false);\n  const [showCostCalculator, setShowCostCalculator] = useState(false);\n  const [showLabelPrint, setShowLabelPrint] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<any>(null);\n  const [selectedProductForLabel, setSelectedProductForLabel] =\n    useState<any>(null);\n  const [labelData, setLabelData] = useState({\n    companyName: \"\",\n    companyLocation: \"\",\n    regNo: \"\",\n    dtqocNo: \"\",\n    batchNo: \"\",\n    netWeight: \"\",\n    ingredients: \"\",\n    mrp: \"\",\n    manufactureDate: \"\",\n    expireDate: \"\",\n  });\n\n  const { toast } = useToast();\n  const { formatCurrency } = useCurrency();\n\n  // Fetch products\n  const {\n    data: productsData,\n    isLoading,\n    error: productsError,\n  } = useQuery({\n    queryKey: [\"products\"],\n    queryFn: async () => {\n      try {\n        const res = await apiRequest(\"GET\", \"/api/products\");\n        return Array.isArray(res) ? res : res.products || [];\n      } catch (error) {\n        console.error(\"Failed to fetch products:\", error);\n        throw error;\n      }\n    },\n    retry: (failureCount, error) =>\n      !isUnauthorizedError(error) && failureCount < 3,\n  });\n\n  const products = Array.isArray(productsData) ? productsData : [];\n\n  // Fetch units\n  const { data: units = [] } = useUnits();\n\n  // Fetch categories\n  const { data: categoriesData = [] } = useQuery({\n    queryKey: [\"categories\"],\n    queryFn: async () => {\n      try {\n        const res = await apiRequest(\"GET\", \"/api/categories\");\n        return Array.isArray(res) ? res : res.categories || [];\n      } catch (error) {\n        console.error(\"Failed to fetch categories:\", error);\n        return [];\n      }\n    },\n    retry: (failureCount, error) =>\n      !isUnauthorizedError(error) && failureCount < 3,\n  });\n\n  const categories = Array.isArray(categoriesData) ? categoriesData : [];\n\n  // Fetch settings\n  const { data: settingsData = {} } = useQuery({\n    queryKey: [\"settings\"],\n    queryFn: async () => {\n      try {\n        const res = await apiRequest(\"GET\", \"/api/settings\");\n        return res || {};\n      } catch (error) {\n        console.error(\"Failed to fetch settings:\", error);\n        return {};\n      }\n    },\n    retry: (failureCount, error) =>\n      !isUnauthorizedError(error) && failureCount < 3,\n  });\n\n  const settings = settingsData?.settings || {};\n\n  // Delete mutation\n  const deleteProductMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"DELETE\", `/api/products/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"products\"] });\n      toast({ title: \"Success\", description: \"Product deleted successfully\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Session expired. Redirecting to login...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => (window.location.href = \"/api/login\"), 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredProducts = products.filter((product: any) => {\n    const matchesSearch =\n      product.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      product.sku?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory =\n      selectedCategory === \"all\" ||\n      product.categoryId?.toString() === selectedCategory;\n    const matchesStatus =\n      selectedStatus === \"all\" ||\n      (selectedStatus === \"active\" && product.isActive) ||\n      (selectedStatus === \"inactive\" && !product.isActive);\n    return matchesSearch && matchesCategory && matchesStatus;\n  });\n\n  const { sortedData, sortConfig, requestSort } = useTableSort(\n    filteredProducts,\n    \"name\",\n  );\n  const pagination = usePagination(sortedData || [], 10);\n\n  const {\n    currentPage,\n    pageSize,\n    totalPages,\n    totalItems,\n    paginatedData: paginatedProducts = [],\n    handlePageChange,\n    handlePageSizeChange,\n  } = pagination;\n\n  // Update MRP when product or currency changes\n  useEffect(() => {\n    if (selectedProductForLabel) {\n      setLabelData((prev) => ({\n        ...prev,\n        mrp: formatCurrency(Number(selectedProductForLabel.price)),\n      }));\n    }\n  }, [selectedProductForLabel, formatCurrency]);\n\n  // Initialize label data when settings load\n  useEffect(() => {\n    setLabelData((prev) => ({\n      ...prev,\n      companyName: settings.companyName || \"Baked Link\",\n      companyLocation: settings.companyAddress || \"\",\n      regNo: settings.companyRegNo || \"\",\n      dtqocNo: settings.companyDtqocNo || \"\",\n    }));\n  }, [settings]);\n\n  const handleLabelPrint = (product: any) => {\n    setSelectedProductForLabel(product);\n    setShowLabelPrint(true);\n  };\n\n  const printLabel = () => {\n    if (!labelData.companyName || !selectedProductForLabel) {\n      toast({\n        title: \"Missing Info\",\n        description: \"Please ensure company name and product are set.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const printWindow = window.open(\"\", \"_blank\");\n    if (!printWindow) {\n      toast({\n        title: \"Blocked\",\n        description: \"Please allow pop-ups to print labels.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const labelSize = settings.labelSize || \"small\";\n    const orientation = settings.labelOrientation || \"portrait\";\n    const margin = settings.labelMargin || \"2\";\n\n    const sizeConfig = {\n      small: { width: \"200px\", height: \"120px\" },\n      medium: { width: \"280px\", height: \"200px\" },\n      large: { width: \"350px\", height: \"260px\" },\n    };\n\n    const currentSize =\n      sizeConfig[labelSize as keyof typeof sizeConfig] || sizeConfig.small;\n\n    const printContent = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Product Label - ${selectedProductForLabel.name}</title>\n          <style>\n            body { font-family: 'Arial', sans-serif; margin: ${margin}mm; font-size: 10px; background: white; }\n            .label {\n              border: 2px solid #000; padding: 8px; width: ${currentSize.width}; height: ${currentSize.height};\n              margin: 0 auto; box-sizing: border-box; display: flex; flex-direction: column;\n              ${orientation === \"landscape\" ? \"transform: rotate(90deg); transform-origin: center;\" : \"\"}\n            }\n            .header { text-align: center; border-bottom: 1px solid #000; padding-bottom: 6px; margin-bottom: 6px; }\n            .company-name { font-size: 12px; font-weight: bold; margin-bottom: 2px; }\n            .company-location { font-size: 8px; }\n            .product-name { font-size: 11px; font-weight: bold; text-align: center; margin: 4px 0; border: 1px solid #000; padding: 3px; background: #f9f9f9; }\n            .fields { flex: 1; display: flex; flex-direction: column; gap: 2px; }\n            .field { display: flex; justify-content: space-between; align-items: flex-start; line-height: 1.2; }\n            .field-label { font-weight: bold; width: 35%; font-size: 9px; }\n            .field-value { width: 60%; text-align: right; font-size: 9px; word-wrap: break-word; }\n            .ingredients .field-value { font-size: 7px; line-height: 1.1; }\n            @media print { body { margin: 0; } .label { page-break-inside: avoid; } }\n          </style>\n        </head>\n        <body>\n          <div class=\"label\">\n            <div class=\"header\">\n              <div class=\"company-name\">${labelData.companyName}</div>\n              ${labelData.companyLocation ? `<div class=\"company-location\">${labelData.companyLocation}</div>` : \"\"}\n            </div>\n            <div class=\"product-name\">${selectedProductForLabel.name}</div>\n            <div class=\"fields\">\n              ${labelData.regNo ? `<div class=\"field\"><span class=\"field-label\">Reg. No:</span><span class=\"field-value\">${labelData.regNo}</span></div>` : \"\"}\n              ${labelData.dtqocNo ? `<div class=\"field\"><span class=\"field-label\">DTQOC No:</span><span class=\"field-value\">${labelData.dtqocNo}</span></div>` : \"\"}\n              ${labelData.batchNo ? `<div class=\"field\"><span class=\"field-label\">Batch No:</span><span class=\"field-value\">${labelData.batchNo}</span></div>` : \"\"}\n              ${labelData.netWeight ? `<div class=\"field\"><span class=\"field-label\">Net Weight:</span><span class=\"field-value\">${labelData.netWeight}</span></div>` : \"\"}\n              ${labelData.ingredients ? `<div class=\"field ingredients\"><span class=\"field-label\">Ingredients:</span><span class=\"field-value\">${labelData.ingredients}</span></div>` : \"\"}\n              <div class=\"field\"><span class=\"field-label\">MRP:</span><span class=\"field-value\">${labelData.mrp}</span></div>\n              ${labelData.manufactureDate ? `<div class=\"field\"><span class=\"field-label\">Mfg. Date:</span><span class=\"field-value\">${new Date(labelData.manufactureDate).toLocaleDateString()}</span></div>` : \"\"}\n              ${labelData.expireDate ? `<div class=\"field\"><span class=\"field-label\">Exp. Date:</span><span class=\"field-value\">${new Date(labelData.expireDate).toLocaleDateString()}</span></div>` : \"\"}\n            </div>\n          </div>\n        </body>\n      </html>\n    `;\n\n    printWindow.document.write(printContent);\n    printWindow.document.close();\n    printWindow.focus();\n    printWindow.print();\n    printWindow.onafterprint = () => printWindow.close();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"h-96 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (productsError) {\n    return (\n      <div className=\"p-6 text-center text-red-500\">\n        <h2>Error loading products</h2>\n        <p>{(productsError as Error).message}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-gray-600\">\n            Manage your bakery products and recipes\n          </p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button onClick={() => setShowCostCalculator(true)} variant=\"outline\">\n            <Calculator className=\"h-4 w-4 mr-2\" />\n            Cost Calculator\n          </Button>\n          <Button onClick={() => setShowProductForm(true)}>\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Product\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col lg:flex-row gap-4 items-center\">\n            <div className=\"flex-1\">\n              <SearchBar\n                placeholder=\"Search products...\"\n                value={searchQuery}\n                onChange={setSearchQuery}\n                className=\"w-full\"\n              />\n            </div>\n            <div className=\"flex gap-2\">\n              <Select\n                value={selectedCategory}\n                onValueChange={setSelectedCategory}\n              >\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue placeholder=\"Category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {categories.map((category: any) => (\n                    <SelectItem\n                      key={category.id}\n                      value={category.id.toString()}\n                    >\n                      {category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Button variant=\"outline\" size=\"sm\">\n                <Upload className=\"h-4 w-4 mr-2\" />\n                Import\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Products Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <SortableTableHeader\n                  sortKey=\"name\"\n                  sortConfig={sortConfig}\n                  onSort={requestSort}\n                >\n                  Name\n                </SortableTableHeader>\n                <SortableTableHeader\n                  sortKey=\"sku\"\n                  sortConfig={sortConfig}\n                  onSort={requestSort}\n                >\n                  Code\n                </SortableTableHeader>\n                <SortableTableHeader\n                  sortKey=\"cost\"\n                  sortConfig={sortConfig}\n                  onSort={requestSort}\n                >\n                  Cost\n                </SortableTableHeader>\n                <SortableTableHeader\n                  sortKey=\"price\"\n                  sortConfig={sortConfig}\n                  onSort={requestSort}\n                >\n                  Regular Price\n                </SortableTableHeader>\n                <SortableTableHeader\n                  sortKey=\"isActive\"\n                  sortConfig={sortConfig}\n                  onSort={requestSort}\n                >\n                  Status\n                </SortableTableHeader>\n                <SortableTableHeader\n                  sortKey=\"unit\"\n                  sortConfig={sortConfig}\n                  onSort={requestSort}\n                >\n                  Unit\n                </SortableTableHeader>\n                <SortableTableHeader\n                  sortKey=\"categoryId\"\n                  sortConfig={sortConfig}\n                  onSort={requestSort}\n                >\n                  Category\n                </SortableTableHeader>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {paginatedProducts.length > 0 ? (\n                paginatedProducts.map((product) => (\n                  <TableRow key={product.id}>\n                    <TableCell className=\"font-medium\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-8 h-8 bg-orange-100 rounded flex items-center justify-center\">\n                          <Cookie className=\"h-4 w-4 text-orange-600\" />\n                        </div>\n                        <span>{product.name}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>{product.sku || \"‚Äî\"}</TableCell>\n                    <TableCell>\n                      {formatCurrency(Number(product.cost))}\n                    </TableCell>\n                    <TableCell>\n                      {formatCurrency(Number(product.price))}\n                    </TableCell>\n                    <TableCell>\n                      <Badge\n                        variant={product.isActive ? \"default\" : \"secondary\"}\n                        className={\n                          product.isActive\n                            ? \"bg-green-100 text-green-800\"\n                            : \"bg-gray-100 text-gray-800\"\n                        }\n                      >\n                        {product.isActive ? \"In stock\" : \"Out of stock\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>{product.unitName || \"‚Äî\"}</TableCell>\n                    <TableCell>{product.categoryName || \"‚Äî\"}</TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <button\n                          onClick={() => {\n                            setEditingProduct(product);\n                            setShowProductForm(true);\n                          }}\n                          className=\"text-blue-600 hover:text-blue-800 focus:outline-none\"\n                          title=\"Edit\"\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </button>\n                        <button\n                          onClick={() => handleLabelPrint(product)}\n                          className=\"text-green-600 hover:text-green-800 focus:outline-none\"\n                          title=\"Label Print\"\n                        >\n                          <Printer className=\"h-4 w-4\" />\n                        </button>\n                        <DeleteConfirmationDialog\n                          trigger={\n                            <button\n                              className=\"text-red-600 hover:text-red-800 focus:outline-none\"\n                              title=\"Delete\"\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </button>\n                          }\n                          title=\"Delete Product\"\n                          itemName={product.name}\n                          onConfirm={() =>\n                            deleteProductMutation.mutate(product.id)\n                          }\n                          isLoading={deleteProductMutation.isPending}\n                        />\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))\n              ) : (\n                <TableRow>\n                  <TableCell colSpan={8} className=\"text-center py-8\">\n                    <div className=\"flex flex-col items-center\">\n                      <Cookie className=\"text-4xl text-gray-300 mb-4\" />\n                      <h3 className=\"text-lg font-semibold text-gray-600 mb-2\">\n                        No products found\n                      </h3>\n                      <p className=\"text-gray-500 mb-4\">\n                        {searchQuery || selectedCategory !== \"all\"\n                          ? \"Try adjusting your search criteria\"\n                          : \"Start by adding your first product\"}\n                      </p>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* Pagination */}\n      {filteredProducts.length > 0 && (\n        <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4\">\n          <PaginationInfo\n            currentPage={currentPage}\n            pageSize={pageSize}\n            totalItems={totalItems}\n          />\n          <div className=\"flex items-center gap-4\">\n            <PageSizeSelector\n              pageSize={pageSize}\n              onPageSizeChange={handlePageSizeChange}\n              options={[10, 25, 50, 100]}\n            />\n            <Pagination\n              currentPage={currentPage}\n              totalPages={totalPages}\n              onPageChange={handlePageChange}\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Modals */}\n      <Dialog\n        open={showProductForm}\n        onOpenChange={(open) => {\n          if (!open) setEditingProduct(null);\n          setShowProductForm(open);\n        }}\n      >\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingProduct ? \"Edit Product\" : \"Add New Product\"}\n            </DialogTitle>\n          </DialogHeader>\n          <ProductForm\n            product={editingProduct}\n            onSuccess={() => {\n              setShowProductForm(false);\n              setEditingProduct(null);\n            }}\n          />\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={showCostCalculator} onOpenChange={setShowCostCalculator}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Product Cost Calculator</DialogTitle>\n          </DialogHeader>\n          <CostCalculator\n            onSave={(productData) => {\n              setShowCostCalculator(false);\n              setEditingProduct(productData);\n              setShowProductForm(true);\n            }}\n          />\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={showLabelPrint} onOpenChange={setShowLabelPrint}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Printer className=\"h-5 w-5\" />\n              Print Product Label\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Left: Form */}\n            <div className=\"space-y-4\">\n              <div className=\"border rounded-lg p-4\">\n                <h3 className=\"font-semibold mb-3 text-sm text-gray-600 uppercase tracking-wide\">\n                  Company Information\n                </h3>\n                <div className=\"grid grid-cols-1 gap-3\">\n                  <div>\n                    <Label className=\"text-xs font-medium\">Company Name</Label>\n                    <Input\n                      value={labelData.companyName}\n                      onChange={(e) =>\n                        setLabelData({\n                          ...labelData,\n                          companyName: e.target.value,\n                        })\n                      }\n                      className=\"h-8\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium\">\n                      Location/Address\n                    </Label>\n                    <Input\n                      value={labelData.companyLocation}\n                      onChange={(e) =>\n                        setLabelData({\n                          ...labelData,\n                          companyLocation: e.target.value,\n                        })\n                      }\n                      className=\"h-8\"\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div>\n                      <Label className=\"text-xs font-medium\">\n                        Registration No.\n                      </Label>\n                      <Input\n                        value={labelData.regNo}\n                        onChange={(e) =>\n                          setLabelData({ ...labelData, regNo: e.target.value })\n                        }\n                        className=\"h-8\"\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-xs font-medium\">DTQOC No.</Label>\n                      <Input\n                        value={labelData.dtqocNo}\n                        onChange={(e) =>\n                          setLabelData({\n                            ...labelData,\n                            dtqocNo: e.target.value,\n                          })\n                        }\n                        className=\"h-8\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"border rounded-lg p-4\">\n                <h3 className=\"font-semibold mb-3 text-sm text-gray-600 uppercase tracking-wide\">\n                  Product Information\n                </h3>\n                <div className=\"grid grid-cols-1 gap-3\">\n                  <div>\n                    <Label className=\"text-xs font-medium\">Product Name</Label>\n                    <Input\n                      value={selectedProductForLabel?.name || \"\"}\n                      readOnly\n                      className=\"bg-gray-50 h-8\"\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div>\n                      <Label className=\"text-xs font-medium\">Batch No.</Label>\n                      <Input\n                        value={labelData.batchNo}\n                        onChange={(e) =>\n                          setLabelData({\n                            ...labelData,\n                            batchNo: e.target.value,\n                          })\n                        }\n                        className=\"h-8\"\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-xs font-medium\">Net Weight</Label>\n                      <Input\n                        value={labelData.netWeight}\n                        onChange={(e) =>\n                          setLabelData({\n                            ...labelData,\n                            netWeight: e.target.value,\n                          })\n                        }\n                        placeholder=\"e.g., 250g\"\n                        className=\"h-8\"\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium\">Ingredients</Label>\n                    <Input\n                      value={labelData.ingredients}\n                      onChange={(e) =>\n                        setLabelData({\n                          ...labelData,\n                          ingredients: e.target.value,\n                        })\n                      }\n                      placeholder=\"List of ingredients\"\n                      className=\"h-8\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium\">MRP</Label>\n                    <Input\n                      value={labelData.mrp}\n                      onChange={(e) =>\n                        setLabelData({ ...labelData, mrp: e.target.value })\n                      }\n                      className=\"h-8\"\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div>\n                      <Label className=\"text-xs font-medium\">\n                        Manufacture Date\n                      </Label>\n                      <Input\n                        type=\"date\"\n                        value={labelData.manufactureDate}\n                        onChange={(e) =>\n                          setLabelData({\n                            ...labelData,\n                            manufactureDate: e.target.value,\n                          })\n                        }\n                        className=\"h-8\"\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-xs font-medium\">Expire Date</Label>\n                      <Input\n                        type=\"date\"\n                        value={labelData.expireDate}\n                        onChange={(e) =>\n                          setLabelData({\n                            ...labelData,\n                            expireDate: e.target.value,\n                          })\n                        }\n                        className=\"h-8\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"border rounded-lg p-4\">\n                <h3 className=\"font-semibold mb-3 text-sm text-gray-600 uppercase tracking-wide\">\n                  Printing Options\n                </h3>\n                <div className=\"grid grid-cols-1 gap-3\">\n                  <div>\n                    <Label className=\"text-xs font-medium\">Printer Name</Label>\n                    <Input\n                      defaultValue={settings.defaultPrinter || \"\"}\n                      placeholder=\"Select or enter printer name\"\n                      className=\"h-8\"\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div>\n                      <Label className=\"text-xs font-medium\">Label Size</Label>\n                      <Select defaultValue={settings.labelSize || \"small\"}>\n                        <SelectTrigger className=\"h-8\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"small\">Small (50x30mm)</SelectItem>\n                          <SelectItem value=\"medium\">\n                            Medium (75x50mm)\n                          </SelectItem>\n                          <SelectItem value=\"large\">\n                            Large (100x75mm)\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label className=\"text-xs font-medium\">Orientation</Label>\n                      <Select\n                        defaultValue={settings.labelOrientation || \"portrait\"}\n                      >\n                        <SelectTrigger className=\"h-8\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"portrait\">Portrait</SelectItem>\n                          <SelectItem value=\"landscape\">Landscape</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Right: Preview */}\n            <div className=\"space-y-4\">\n              <div className=\"border rounded-lg p-4\">\n                <h3 className=\"font-semibold mb-3 text-sm text-gray-600 uppercase tracking-wide\">\n                  Label Preview\n                </h3>\n                <div\n                  className=\"border-2 border-gray-300 p-4 bg-white shadow-sm max-w-sm mx-auto text-xs\"\n                  style={{ fontFamily: \"Arial\", fontSize: \"10px\" }}\n                >\n                  <div className=\"text-center border-b border-gray-300 pb-2 mb-3\">\n                    <div className=\"font-bold text-sm\">\n                      {labelData.companyName}\n                    </div>\n                    {labelData.companyLocation && (\n                      <div>{labelData.companyLocation}</div>\n                    )}\n                  </div>\n                  <div className=\"font-bold text-center border border-gray-300 p-1 mb-2\">\n                    {selectedProductForLabel?.name}\n                  </div>\n                  <div className=\"space-y-1\">\n                    {labelData.regNo && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-semibold\">Reg. No:</span>\n                        <span>{labelData.regNo}</span>\n                      </div>\n                    )}\n                    {labelData.dtqocNo && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-semibold\">DTQOC No:</span>\n                        <span>{labelData.dtqocNo}</span>\n                      </div>\n                    )}\n                    {labelData.batchNo && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-semibold\">Batch No:</span>\n                        <span>{labelData.batchNo}</span>\n                      </div>\n                    )}\n                    {labelData.netWeight && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-semibold\">Net Weight:</span>\n                        <span>{labelData.netWeight}</span>\n                      </div>\n                    )}\n                    {labelData.ingredients && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-semibold\">Ingredients:</span>\n                        <span>{labelData.ingredients}</span>\n                      </div>\n                    )}\n                    <div className=\"flex justify-between\">\n                      <span className=\"font-semibold\">MRP:</span>\n                      <span>{labelData.mrp}</span>\n                    </div>\n                    {labelData.manufactureDate && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-semibold\">Mfg. Date:</span>\n                        <span>\n                          {new Date(\n                            labelData.manufactureDate,\n                          ).toLocaleDateString()}\n                        </span>\n                      </div>\n                    )}\n                    {labelData.expireDate && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-semibold\">Exp. Date:</span>\n                        <span>\n                          {new Date(labelData.expireDate).toLocaleDateString()}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n            <Button variant=\"outline\" onClick={() => setShowLabelPrint(false)}>\n              Cancel\n            </Button>\n            <Button onClick={printLabel}>\n              <Printer className=\"h-4 w-4 mr-2\" />\n              Print Label\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":36011},"client/src/pages/purchases.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport SearchBar from \"@/components/search-bar\";\nimport { useTableSort } from \"@/hooks/useTableSort\";\nimport { SortableTableHeader } from \"@/components/ui/sortable-table-header\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Pagination,\n  PaginationInfo,\n  PageSizeSelector,\n  usePagination,\n} from \"@/components/ui/pagination\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Plus,\n  Edit,\n  Trash2,\n  ShoppingCart,\n  Eye,\n  FileText,\n  ExternalLink,\n  ShoppingBag,\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Purchase {\n  id: number;\n  supplierName: string;\n  partyId?: number;\n  totalAmount: string;\n  paymentMethod: string;\n  status: string;\n  purchaseDate?: string;\n  invoiceNumber?: string;\n  notes?: string;\n  createdAt: string;\n  items?: PurchaseItem[];\n}\n\ninterface PurchaseItem {\n  id: number;\n  inventoryItemId: number;\n  inventoryItemName: string;\n  quantity: string;\n  unitPrice: string;\n  totalPrice: string;\n}\n\ninterface Party {\n  id: number;\n  name: string;\n  type: string;\n  currentBalance: string;\n}\n\nexport default function Purchases() {\n  const { toast } = useToast();\n  const { formatCurrency, formatCurrencyWithCommas } = useCurrency();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isDetailDialogOpen, setIsDetailDialogOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [supplierFilter, setSupplierFilter] = useState(\"all\");\n  const [dateFrom, setDateFrom] = useState(\"\");\n  const [dateTo, setDateTo] = useState(\"\");\n  const [selectedPurchase, setSelectedPurchase] = useState<Purchase | null>(\n    null,\n  );\n  const [editingPurchase, setEditingPurchase] = useState<Purchase | null>(null);\n\n  const { data: purchases = [], isLoading } = useQuery({\n    queryKey: [\"/api/purchases\"],\n  });\n\n  const { data: inventoryItems = [], isLoading: itemsLoading } = useQuery({\n    queryKey: [\"/api/inventory\"],\n  });\n\n  const { data: parties = [] } = useQuery({\n    queryKey: [\"/api/parties\"],\n  });\n\n  const [purchaseForm, setPurchaseForm] = useState({\n    partyId: \"\",\n    supplierName: \"\",\n    paymentMethod: \"cash\",\n    invoiceNumber: \"\",\n    purchaseDate: new Date().toISOString().split(\"T\")[0],\n    status: \"completed\",\n    notes: \"\",\n    items: [{ inventoryItemId: \"\", quantity: 1, unitPrice: \"0\" }],\n  });\n\n  // Create Purchase Mutation\n  const createPurchaseMutation = useMutation({\n    mutationFn: async (purchaseData: any) => {\n      return apiRequest(\"POST\", \"/api/purchases\", purchaseData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchases\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/low-stock\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description:\n          \"Purchase recorded and stock quantities updated successfully\",\n      });\n      handleCloseDialog();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to record purchase\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update Purchase Mutation\n  const updatePurchaseMutation = useMutation({\n    mutationFn: async (data: { id: number; purchaseData: any }) => {\n      return apiRequest(\"PUT\", `/api/purchases/${data.id}`, data.purchaseData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchases\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory\"] });\n      toast({\n        title: \"Success\",\n        description: \"Purchase updated successfully\",\n      });\n      setIsEditDialogOpen(false);\n      setEditingPurchase(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update purchase\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete Purchase Mutation\n  const deletePurchaseMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return apiRequest(\"DELETE\", `/api/purchases/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchases\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/parties\"] });\n      toast({\n        title: \"Success\",\n        description: \"Purchase deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete purchase\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const totalAmount = purchaseForm.items.reduce((sum, item) => {\n      const itemTotal = parseFloat(item.unitPrice) * item.quantity;\n      return sum + itemTotal;\n    }, 0);\n\n    const purchaseData = {\n      partyId: purchaseForm.partyId ? parseInt(purchaseForm.partyId) : null,\n      supplierName: purchaseForm.supplierName,\n      totalAmount: totalAmount.toString(),\n      paymentMethod: purchaseForm.paymentMethod,\n      status: purchaseForm.status,\n      invoiceNumber: purchaseForm.invoiceNumber || null,\n      purchaseDate: purchaseForm.purchaseDate,\n      notes: purchaseForm.notes || null,\n      items: purchaseForm.items.map((item) => ({\n        inventoryItemId: parseInt(item.inventoryItemId),\n        quantity: item.quantity,\n        unitPrice: item.unitPrice,\n        totalPrice: (parseFloat(item.unitPrice) * item.quantity).toString(),\n      })),\n    };\n\n    createPurchaseMutation.mutate(purchaseData);\n  };\n\n  const handleEdit = (purchase: Purchase) => {\n    setEditingPurchase(purchase);\n    setPurchaseForm({\n      partyId: purchase.partyId?.toString() || \"\",\n      supplierName: purchase.supplierName,\n      paymentMethod: purchase.paymentMethod,\n      invoiceNumber: purchase.invoiceNumber || \"\",\n      purchaseDate: purchase.purchaseDate\n        ? new Date(purchase.purchaseDate).toISOString().split(\"T\")[0]\n        : new Date(purchase.createdAt).toISOString().split(\"T\")[0],\n      status: purchase.status,\n      notes: purchase.notes || \"\",\n      items:\n        purchase.items && purchase.items.length > 0\n          ? purchase.items.map((item) => ({\n              inventoryItemId: item.inventoryItemId.toString(),\n              quantity: parseInt(item.quantity),\n              unitPrice: item.unitPrice,\n            }))\n          : [{ inventoryItemId: \"\", quantity: 1, unitPrice: \"0\" }],\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleEditSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!editingPurchase) return;\n\n    const totalAmount = purchaseForm.items.reduce((sum, item) => {\n      const itemTotal = parseFloat(item.unitPrice) * item.quantity;\n      return sum + itemTotal;\n    }, 0);\n\n    const purchaseData = {\n      partyId: purchaseForm.partyId ? parseInt(purchaseForm.partyId) : null,\n      supplierName: purchaseForm.supplierName,\n      totalAmount: totalAmount.toString(),\n      paymentMethod: purchaseForm.paymentMethod,\n      status: purchaseForm.status,\n      invoiceNumber: purchaseForm.invoiceNumber || null,\n      purchaseDate: purchaseForm.purchaseDate,\n      notes: purchaseForm.notes || null,\n    };\n\n    updatePurchaseMutation.mutate({\n      id: editingPurchase.id,\n      purchaseData,\n    });\n  };\n\n  const handleDelete = (id: number) => {\n    if (\n      confirm(\n        \"Are you sure you want to delete this purchase? This action cannot be undone.\",\n      )\n    ) {\n      deletePurchaseMutation.mutate(id);\n    }\n  };\n\n  const handleViewDetails = (purchase: Purchase) => {\n    setSelectedPurchase(purchase);\n    setIsDetailDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setIsDialogOpen(false);\n    setPurchaseForm({\n      partyId: \"\",\n      supplierName: \"\",\n      paymentMethod: \"cash\",\n      invoiceNumber: \"\",\n      purchaseDate: new Date().toISOString().split(\"T\")[0],\n      status: \"completed\",\n      notes: \"\",\n      items: [{ inventoryItemId: \"\", quantity: 1, unitPrice: \"0\" }],\n    });\n  };\n\n  const addItem = () => {\n    setPurchaseForm({\n      ...purchaseForm,\n      items: [\n        ...purchaseForm.items,\n        { inventoryItemId: \"\", quantity: 1, unitPrice: \"0\" },\n      ],\n    });\n  };\n\n  const removeItem = (index: number) => {\n    setPurchaseForm({\n      ...purchaseForm,\n      items: purchaseForm.items.filter((_, i) => i !== index),\n    });\n  };\n\n  const updateItem = (index: number, field: string, value: any) => {\n    const updatedItems = purchaseForm.items.map((item, i) => {\n      if (i === index) {\n        return { ...item, [field]: value };\n      }\n      return item;\n    });\n    setPurchaseForm({ ...purchaseForm, items: updatedItems });\n  };\n\n  // Filter and search logic\n  const filteredPurchases = useMemo(() => {\n    return purchases.filter((purchase: Purchase) => {\n      const supplierName = purchase.supplierName?.toLowerCase() || \"\";\n      const invoiceNumber = purchase.invoiceNumber?.toLowerCase() || \"\";\n      const searchLower = searchTerm.toLowerCase();\n\n      const matchesSearch =\n        supplierName.includes(searchLower) ||\n        invoiceNumber.includes(searchLower) ||\n        purchase.totalAmount.includes(searchLower);\n\n      const matchesStatus =\n        statusFilter === \"all\" || purchase.status === statusFilter;\n\n      const matchesSupplier =\n        supplierFilter === \"all\" || purchase.supplierName === supplierFilter;\n\n      const purchaseDate = new Date(\n        purchase.purchaseDate || purchase.createdAt,\n      );\n      const matchesDateFrom = !dateFrom || purchaseDate >= new Date(dateFrom);\n      const matchesDateTo =\n        !dateTo || purchaseDate <= new Date(dateTo + \"T23:59:59\");\n\n      return (\n        matchesSearch &&\n        matchesStatus &&\n        matchesSupplier &&\n        matchesDateFrom &&\n        matchesDateTo\n      );\n    });\n  }, [purchases, searchTerm, statusFilter, supplierFilter, dateFrom, dateTo]);\n\n  // Sorting\n  const { sortedData, sortConfig, requestSort } = useTableSort(\n    filteredPurchases,\n    \"purchaseDate\",\n  );\n\n  // Pagination\n  const {\n    currentItems,\n    currentPage,\n    totalPages,\n    pageSize,\n    setPageSize,\n    goToPage,\n    totalItems,\n  } = usePagination(sortedData, 10);\n\n  // Get unique suppliers for filter\n  const uniqueSuppliers = useMemo(() => {\n    const suppliers = [\n      ...new Set(purchases.map((p: Purchase) => p.supplierName)),\n    ];\n    return suppliers.filter(Boolean);\n  }, [purchases]);\n\n  // Summary calculations\n  const totalPurchases = filteredPurchases.reduce(\n    (sum: number, purchase: Purchase) => sum + parseFloat(purchase.totalAmount),\n    0,\n  );\n\n  const statusCounts = useMemo(() => {\n    return filteredPurchases.reduce((acc: any, purchase: Purchase) => {\n      acc[purchase.status] = (acc[purchase.status] || 0) + 1;\n      return acc;\n    }, {});\n  }, [filteredPurchases]);\n\n  const getStatusBadge = (status: string) => {\n    const variants: {\n      [key: string]: \"default\" | \"secondary\" | \"destructive\" | \"outline\";\n    } = {\n      completed: \"default\",\n      pending: \"secondary\",\n      cancelled: \"destructive\",\n      partial: \"outline\",\n    };\n    return (\n      <Badge variant={variants[status] || \"outline\"}>\n        {status?.charAt(0).toUpperCase() + status?.slice(1)}\n      </Badge>\n    );\n  };\n\n  const viewSupplierLedger = (partyId: number) => {\n    if (partyId) {\n      window.open(`/parties?viewLedger=${partyId}`, \"_blank\");\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"text-muted-foreground mt-2\">Loading purchases...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-gray-600\">\n            Record and track all purchase transactions with detailed history\n          </p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={handleCloseDialog}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Record Purchase\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Record New Purchase</DialogTitle>\n              <DialogDescription>\n                Enter the purchase transaction details\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"supplier\">Supplier</Label>\n                  <Select\n                    value={purchaseForm.partyId || undefined}\n                    onValueChange={(value) => {\n                      const party = parties.find(\n                        (p: any) => p.id === parseInt(value),\n                      );\n                      setPurchaseForm({\n                        ...purchaseForm,\n                        partyId: value,\n                        supplierName: party?.name || \"\",\n                      });\n                    }}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select supplier\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {parties.map((party: any) => (\n                        <SelectItem key={party.id} value={party.id.toString()}>\n                          {party.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"supplierName\">Supplier Name</Label>\n                  <Input\n                    id=\"supplierName\"\n                    value={purchaseForm.supplierName}\n                    onChange={(e) =>\n                      setPurchaseForm({\n                        ...purchaseForm,\n                        supplierName: e.target.value,\n                      })\n                    }\n                    placeholder=\"Enter supplier name\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"invoiceNumber\">Invoice Number</Label>\n                  <Input\n                    id=\"invoiceNumber\"\n                    value={purchaseForm.invoiceNumber}\n                    onChange={(e) =>\n                      setPurchaseForm({\n                        ...purchaseForm,\n                        invoiceNumber: e.target.value,\n                      })\n                    }\n                    placeholder=\"Enter invoice number\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"purchaseDate\">Purchase Date</Label>\n                  <Input\n                    id=\"purchaseDate\"\n                    type=\"date\"\n                    value={purchaseForm.purchaseDate}\n                    onChange={(e) =>\n                      setPurchaseForm({\n                        ...purchaseForm,\n                        purchaseDate: e.target.value,\n                      })\n                    }\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"paymentMethod\">Payment Method</Label>\n                  <Select\n                    value={purchaseForm.paymentMethod || undefined}\n                    onValueChange={(value) =>\n                      setPurchaseForm({ ...purchaseForm, paymentMethod: value })\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"cash\">Cash</SelectItem>\n                      <SelectItem value=\"card\">Card</SelectItem>\n                      <SelectItem value=\"upi\">UPI</SelectItem>\n                      <SelectItem value=\"bank_transfer\">\n                        Bank Transfer\n                      </SelectItem>\n                      <SelectItem value=\"credit\">Credit</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"status\">Status</Label>\n                  <Select\n                    value={purchaseForm.status || undefined}\n                    onValueChange={(value) =>\n                      setPurchaseForm({ ...purchaseForm, status: value })\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"completed\">Completed</SelectItem>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"partial\">Partial</SelectItem>\n                      <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"notes\">Notes</Label>\n                  <Input\n                    id=\"notes\"\n                    value={purchaseForm.notes}\n                    onChange={(e) =>\n                      setPurchaseForm({\n                        ...purchaseForm,\n                        notes: e.target.value,\n                      })\n                    }\n                    placeholder=\"Additional notes\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <Label>Items</Label>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={addItem}\n                  >\n                    Add Item\n                  </Button>\n                </div>\n                {purchaseForm.items.map((item, index) => (\n                  <div key={index} className=\"grid grid-cols-12 gap-2 mb-2\">\n                    <div className=\"col-span-5\">\n                      <Select\n                        value={item.inventoryItemId || undefined}\n                        onValueChange={(value) =>\n                          updateItem(index, \"inventoryItemId\", value)\n                        }\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select item\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {inventoryItems && Array.isArray(inventoryItems) ? (\n                            inventoryItems.map((inventoryItem: any) => (\n                              <SelectItem\n                                key={inventoryItem.id}\n                                value={inventoryItem.id.toString()}\n                              >\n                                {inventoryItem.name}\n                              </SelectItem>\n                            ))\n                          ) : (\n                            <SelectItem value=\"no-items\" disabled>\n                              No inventory items available\n                            </SelectItem>\n                          )}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"col-span-2\">\n                      <Input\n                        type=\"number\"\n                        value={item.quantity}\n                        onChange={(e) =>\n                          updateItem(\n                            index,\n                            \"quantity\",\n                            parseInt(e.target.value),\n                          )\n                        }\n                        min=\"1\"\n                        placeholder=\"Qty\"\n                      />\n                    </div>\n                    <div className=\"col-span-3\">\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={item.unitPrice}\n                        onChange={(e) =>\n                          updateItem(index, \"unitPrice\", e.target.value)\n                        }\n                        placeholder=\"Price\"\n                      />\n                    </div>\n                    <div className=\"col-span-2\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => removeItem(index)}\n                        disabled={purchaseForm.items.length === 1}\n                      >\n                        Remove\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"flex justify-end gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={handleCloseDialog}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createPurchaseMutation.isPending}\n                >\n                  {createPurchaseMutation.isPending\n                    ? \"Recording...\"\n                    : \"Record Purchase\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Total Purchases\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {formatCurrencyWithCommas(totalPurchases)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {filteredPurchases.length} transactions\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Completed</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {statusCounts.completed || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Successfully processed\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              {statusCounts.pending || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Awaiting completion</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Unique Suppliers\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{uniqueSuppliers.length}</div>\n            <p className=\"text-xs text-muted-foreground\">Active vendors</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters and Search */}\n      <Card>\n        <CardContent className=\"pt-6 pb-4 space-y-4\">\n          <div className=\"flex flex-col lg:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <SearchBar\n                value={searchTerm}\n                onChange={setSearchTerm}\n                placeholder=\"Search by supplier, invoice number, or amount...\"\n                className=\"w-full\"\n              />\n            </div>\n            <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div>\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All statuses\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All statuses</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                    <SelectItem value=\"partial\">Partial</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Select\n                  value={supplierFilter}\n                  onValueChange={setSupplierFilter}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All suppliers\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All suppliers</SelectItem>\n                    {uniqueSuppliers.map((supplier) => (\n                      <SelectItem key={supplier} value={supplier}>\n                        {supplier}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Input\n                  id=\"date-from\"\n                  type=\"date\"\n                  value={dateFrom}\n                  onChange={(e) => setDateFrom(e.target.value)}\n                />\n              </div>\n              <div>\n                <Input\n                  id=\"date-to\"\n                  type=\"date\"\n                  value={dateTo}\n                  onChange={(e) => setDateTo(e.target.value)}\n                />\n              </div>\n            </div>\n          </div>\n          {(searchTerm ||\n            statusFilter !== \"all\" ||\n            supplierFilter !== \"all\" ||\n            dateFrom ||\n            dateTo) && (\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  setSearchTerm(\"\");\n                  setStatusFilter(\"all\");\n                  setSupplierFilter(\"all\");\n                  setDateFrom(\"\");\n                  setDateTo(\"\");\n                }}\n              >\n                Clear Filters\n              </Button>\n              <span className=\"text-sm text-muted-foreground self-center\">\n                Showing {filteredPurchases.length} of {purchases.length}{\" \"}\n                purchases\n              </span>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Purchase History Table */}\n      <Card>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <SortableTableHeader\n                    label=\"Date\"\n                    sortKey=\"purchaseDate\"\n                    sortConfig={sortConfig}\n                    onSort={requestSort}\n                  >\n                    Date\n                  </SortableTableHeader>\n                  <SortableTableHeader\n                    label=\"Supplier Name\"\n                    sortKey=\"supplierName\"\n                    sortConfig={sortConfig}\n                    onSort={requestSort}\n                  >\n                    Supplier Name\n                  </SortableTableHeader>\n                  <SortableTableHeader\n                    label=\"Invoice Number\"\n                    sortKey=\"invoiceNumber\"\n                    sortConfig={sortConfig}\n                    onSort={requestSort}\n                  >\n                    Invoice Number\n                  </SortableTableHeader>\n                  <SortableTableHeader>Items</SortableTableHeader>\n                  <SortableTableHeader\n                    label=\"Total Amount\"\n                    sortKey=\"totalAmount\"\n                    sortConfig={sortConfig}\n                    onSort={requestSort}\n                  >\n                    Total Amount\n                  </SortableTableHeader>\n                  <SortableTableHeader>Payment Method</SortableTableHeader>\n                  <SortableTableHeader\n                    label=\"Status\"\n                    sortKey=\"status\"\n                    sortConfig={sortConfig}\n                    onSort={requestSort}\n                  >\n                    Status\n                  </SortableTableHeader>\n                  <SortableTableHeader>Actions</SortableTableHeader>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {currentItems.length > 0 ? (\n                  currentItems.map((purchase) => (\n                    <TableRow key={purchase.id}>\n                      <TableCell>\n                        {format(\n                          new Date(purchase.purchaseDate || purchase.createdAt),\n                          \"MMM dd, yyyy\",\n                        )}\n                      </TableCell>\n                      <TableCell className=\"font-medium\">\n                        {purchase.supplierName}\n                        {purchase.partyId && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"ml-2 h-6 px-2\"\n                            onClick={() =>\n                              viewSupplierLedger(purchase.partyId!)\n                            }\n                            title=\"View Supplier Ledger\"\n                          >\n                            <ExternalLink className=\"h-3 w-3\" />\n                          </Button>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        {purchase.invoiceNumber ? (\n                          purchase.invoiceNumber\n                        ) : (\n                          <span className=\"text-muted-foreground\">\n                            No invoice\n                          </span>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleViewDetails(purchase)}\n                          className=\"text-blue-600 hover:text-blue-800 flex items-center gap-1\"\n                        >\n                          <ShoppingCart className=\"h-4 w-4\" />\n                          View Items\n                        </Button>\n                      </TableCell>\n                      <TableCell className=\"font-medium\">\n                        {formatCurrencyWithCommas(\n                          parseFloat(purchase.totalAmount || \"0\"),\n                        )}\n                      </TableCell>\n                      <TableCell className=\"capitalize\">\n                        {purchase.paymentMethod?.replace(\"_\", \" \") || \"N/A\"}\n                      </TableCell>\n                      <TableCell>{getStatusBadge(purchase.status)}</TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleViewDetails(purchase)}\n                            title=\"View Details\"\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(purchase)}\n                            title=\"Edit Purchase\"\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(purchase.id)}\n                            title=\"Delete Purchase\"\n                            className=\"text-red-600 hover:text-red-800\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={8} className=\"text-center py-8\">\n                      {/* Use a proper icon like Package or ShoppingBag */}\n                      <div className=\"flex flex-col items-center text-muted-foreground\">\n                        <ShoppingBag className=\"h-12 w-12 mb-4 opacity-50\" />\n                        <h3 className=\"text-lg font-semibold mb-2\">\n                          No Purchase Record Found\n                        </h3>\n                        <p className=\"text-sm mb-4\">\n                          {searchTerm || statusFilter !== \"all\"\n                            ? \"Try adjusting your search or filter criteria.\"\n                            : \"Start by adding a new purchase entry.\"}\n                        </p>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n\n          {/* Pagination */}\n          <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4 mt-4\">\n            <PaginationInfo\n              currentPage={currentPage}\n              totalPages={totalPages}\n              totalItems={totalItems}\n            />\n            <div className=\"flex items-center gap-4\">\n              <PageSizeSelector\n                pageSize={pageSize}\n                onPageSizeChange={setPageSize}\n              />\n              <Pagination\n                currentPage={currentPage}\n                totalPages={totalPages}\n                onPageChange={goToPage}\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Purchase Details Dialog */}\n      <Dialog open={isDetailDialogOpen} onOpenChange={setIsDetailDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Purchase Details</DialogTitle>\n            <DialogDescription>\n              Complete information for purchase #{selectedPurchase?.id}\n            </DialogDescription>\n          </DialogHeader>\n\n          {selectedPurchase && (\n            <div className=\"space-y-6\">\n              {/* Purchase Information */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium\">Supplier</Label>\n                  <p className=\"text-sm\">{selectedPurchase.supplierName}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Purchase Date</Label>\n                  <p className=\"text-sm\">\n                    {format(\n                      new Date(\n                        selectedPurchase.purchaseDate ||\n                          selectedPurchase.createdAt,\n                      ),\n                      \"PPP\",\n                    )}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Invoice Number</Label>\n                  <p className=\"text-sm\">\n                    {selectedPurchase.invoiceNumber || \"Not provided\"}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Payment Method</Label>\n                  <p className=\"text-sm capitalize\">\n                    {selectedPurchase.paymentMethod?.replace(\"_\", \" \")}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <div className=\"mt-1\">\n                    {getStatusBadge(selectedPurchase.status)}\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Total Amount</Label>\n                  <p className=\"text-lg font-semibold\">\n                    {formatCurrencyWithCommas(\n                      parseFloat(selectedPurchase.totalAmount),\n                    )}\n                  </p>\n                </div>\n              </div>\n\n              {/* Purchase Items */}\n              {selectedPurchase.items && selectedPurchase.items.length > 0 && (\n                <div>\n                  <Label className=\"text-sm font-medium\">Items Purchased</Label>\n                  <div className=\"mt-2 border rounded-lg\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Item</TableHead>\n                          <TableHead>Quantity</TableHead>\n                          <TableHead>Unit Price</TableHead>\n                          <TableHead>Total</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {selectedPurchase.items.map((item) => (\n                          <TableRow key={item.id}>\n                            <TableCell>{item.inventoryItemName}</TableCell>\n                            <TableCell>{item.quantity}</TableCell>\n                            <TableCell>\n                              {formatCurrency(parseFloat(item.unitPrice))}\n                            </TableCell>\n                            <TableCell className=\"font-medium\">\n                              {formatCurrency(parseFloat(item.totalPrice))}\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                </div>\n              )}\n\n              {/* Notes */}\n              {selectedPurchase.notes && (\n                <div>\n                  <Label className=\"text-sm font-medium\">Notes</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {selectedPurchase.notes}\n                  </p>\n                </div>\n              )}\n\n              {/* Supplier Ledger Link */}\n              {selectedPurchase.partyId && (\n                <div className=\"border-t pt-4\">\n                  <Button\n                    onClick={() =>\n                      viewSupplierLedger(selectedPurchase.partyId!)\n                    }\n                    className=\"w-full\"\n                  >\n                    <FileText className=\"h-4 w-4 mr-2\" />\n                    View Supplier Ledger & Transaction History\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Purchase Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Purchase</DialogTitle>\n            <DialogDescription>Update purchase information</DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleEditSubmit} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"edit-supplier\">Supplier</Label>\n                <Select\n                  value={purchaseForm.partyId || undefined}\n                  onValueChange={(value) => {\n                    const party = parties.find(\n                      (p: any) => p.id === parseInt(value),\n                    );\n                    setPurchaseForm({\n                      ...purchaseForm,\n                      partyId: value,\n                      supplierName: party?.name || \"\",\n                    });\n                  }}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select supplier\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {parties.map((party: any) => (\n                      <SelectItem key={party.id} value={party.id.toString()}>\n                        {party.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"edit-supplierName\">Supplier Name</Label>\n                <Input\n                  id=\"edit-supplierName\"\n                  value={purchaseForm.supplierName}\n                  onChange={(e) =>\n                    setPurchaseForm({\n                      ...purchaseForm,\n                      supplierName: e.target.value,\n                    })\n                  }\n                  placeholder=\"Enter supplier name\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"edit-invoiceNumber\">Invoice Number</Label>\n                <Input\n                  id=\"edit-invoiceNumber\"\n                  value={purchaseForm.invoiceNumber}\n                  onChange={(e) =>\n                    setPurchaseForm({\n                      ...purchaseForm,\n                      invoiceNumber: e.target.value,\n                    })\n                  }\n                  placeholder=\"Enter invoice number\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-purchaseDate\">Purchase Date</Label>\n                <Input\n                  id=\"edit-purchaseDate\"\n                  type=\"date\"\n                  value={purchaseForm.purchaseDate}\n                  onChange={(e) =>\n                    setPurchaseForm({\n                      ...purchaseForm,\n                      purchaseDate: e.target.value,\n                    })\n                  }\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-paymentMethod\">Payment Method</Label>\n                <Select\n                  value={purchaseForm.paymentMethod || undefined}\n                  onValueChange={(value) =>\n                    setPurchaseForm({ ...purchaseForm, paymentMethod: value })\n                  }\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"cash\">Cash</SelectItem>\n                    <SelectItem value=\"card\">Card</SelectItem>\n                    <SelectItem value=\"upi\">UPI</SelectItem>\n                    <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                    <SelectItem value=\"credit\">Credit</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"edit-status\">Status</Label>\n                <Select\n                  value={purchaseForm.status || undefined}\n                  onValueChange={(value) =>\n                    setPurchaseForm({ ...purchaseForm, status: value })\n                  }\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"partial\">Partial</SelectItem>\n                    <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"edit-notes\">Notes</Label>\n                <Input\n                  id=\"edit-notes\"\n                  value={purchaseForm.notes}\n                  onChange={(e) =>\n                    setPurchaseForm({\n                      ...purchaseForm,\n                      notes: e.target.value,\n                    })\n                  }\n                  placeholder=\"Additional notes\"\n                />\n              </div>\n            </div>\n\n            <div className=\"flex justify-end gap-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  setIsEditDialogOpen(false);\n                  setEditingPurchase(null);\n                }}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={updatePurchaseMutation.isPending}>\n                {updatePurchaseMutation.isPending\n                  ? \"Updating...\"\n                  : \"Update Purchase\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":46755},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\nimport {\n  FileText,\n  TrendingUp,\n  ShoppingCart,\n  DollarSign,\n  Settings,\n  Download,\n  HelpCircle,\n  BookOpen,\n} from \"lucide-react\";\n\nexport default function Reports() {\n  const [timeRange, setTimeRange] = useState(\"30\");\n  const { toast } = useToast();\n  const { formatCurrency } = useCurrency();\n\n  const startDate = new Date();\n  startDate.setDate(startDate.getDate() - parseInt(timeRange));\n\n  const {\n    data: analytics,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\n      \"/api/analytics/sales\",\n      { startDate: startDate.toISOString(), endDate: new Date().toISOString() },\n    ],\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  if (error && isUnauthorizedError(error)) {\n    toast({\n      title: \"Unauthorized\",\n      description: \"You are logged out. Logging in again...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n    return null;\n  }\n\n  const exportReport = (reportType: string) => {\n    toast({\n      title: \"Export Started\",\n      description: `${reportType} report is being generated and will download shortly.`,\n    });\n    // In a real implementation, this would trigger a download\n  };\n\n  const generateReport = (reportType: string) => {\n    toast({\n      title: \"Report Generated\",\n      description: `${reportType} has been generated successfully.`,\n    });\n    // In a real implementation, this would generate the specific report\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {[1, 2, 3, 4, 5, 6].map((i) => (\n              <div key={i} className=\"h-64 bg-gray-200 rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-gray-600\">\n            Comprehensive business reports and analytics\n          </p>\n        </div>\n        <div className=\"flex space-x-3\">\n          <Button variant=\"outline\" className=\"flex items-center gap-2\">\n            <HelpCircle className=\"h-4 w-4\" />\n            Need Help?\n          </Button>\n          <Button variant=\"outline\" className=\"flex items-center gap-2\">\n            <BookOpen className=\"h-4 w-4\" />\n            Learn more\n          </Button>\n        </div>\n      </div>\n\n      {/* Report Sections */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Accounting Reports */}\n        <Card className=\"border-red-200 bg-red-50\">\n          <CardHeader className=\"pb-4\">\n            <CardTitle className=\"flex items-center gap-2 text-red-800\">\n              <div className=\"w-8 h-8 bg-red-200 rounded-full flex items-center justify-center\">\n                <FileText className=\"h-4 w-4 text-red-600\" />\n              </div>\n              Accounting\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-gray-700 hover:bg-red-100\"\n              onClick={() => generateReport(\"Transaction List\")}\n            >\n              Transaction List\n            </Button>\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-gray-700 hover:bg-red-100\"\n              onClick={() => generateReport(\"Day Book\")}\n            >\n              Day Book\n            </Button>\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-gray-700 hover:bg-red-100\"\n              onClick={() => generateReport(\"Account Summary\")}\n            >\n              Account Summary\n            </Button>\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-gray-700 hover:bg-red-100\"\n              onClick={() => generateReport(\"Trial Balance\")}\n            >\n              Trial Balance\n            </Button>\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-gray-700 hover:bg-red-100\"\n              onClick={() => generateReport(\"Income Statement\")}\n            >\n              Income Statement\n            </Button>\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-gray-700 hover:bg-red-100\"\n              onClick={() => generateReport(\"Balance Sheet\")}\n            >\n              Balance Sheet\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Tax Report (For Nepal) */}\n        <Card className=\"border-red-200 bg-red-50\">\n          <CardHeader className=\"pb-4\">\n            <CardTitle className=\"flex items-center gap-2 text-red-800\">\n              <div className=\"w-8 h-8 bg-red-200 rounded-full flex items-center justify-center\">\n                <DollarSign className=\"h-4 w-4 text-red-600\" />\n              </div>\n              Tax Report (For Nepal)\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-gray-700 hover:bg-red-100\"\n              onClick={() => generateReport(\"Sales Register\")}\n            >\n              Sales Register\n            </Button>\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-gray-700 hover:bg-red-100\"\n              onClick={() => generateReport(\"Sales Return Register\")}\n            >\n              Sales Return Register\n            </Button>\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-gray-700 hover:bg-red-100\"\n              onClick={() => generateReport(\"Purchase Register\")}\n            >\n              Purchase Register\n            </Button>\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-gray-700 hover:bg-red-100\"\n              onClick={() => generateReport(\"Purchase Return Register\")}\n            >\n              Purchase Return Register\n            </Button>\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-gray-700 hover:bg-red-100\"\n              onClick={() => generateReport(\"VAT Summary Report\")}\n            >\n              VAT Summary Report\n            </Button>\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-gray-700 hover:bg-red-100\"\n              onClick={() => generateReport(\"Annex 13 Report\")}\n            >\n              Annex 13 Report\n            </Button>\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-gray-700 hover:bg-red-100\"\n              onClick={() => generateReport(\"Annex 5 Materialized View Report\")}\n            >\n              Annex 5 Materialized View Report\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Purchase Report */}\n        <Card className=\"border-red-200 bg-red-50\">\n          <CardHeader className=\"pb-4\">\n            <CardTitle className=\"flex items-center gap-2 text-red-800\">\n              <div className=\"w-8 h-8 bg-red-200 rounded-full flex items-center justify-center\">\n                <ShoppingCart className=\"h-4 w-4 text-red-600\" />\n              </div>\n              Purchase Report\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-gray-700 hover:bg-red-100\"\n              onClick={() => generateReport(\"Purchase VAT Reconciliation\")}\n            >\n              Purchase VAT Reconciliation\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Sales Report */}\n        <Card className=\"border-red-200 bg-red-50\">\n          <CardHeader className=\"pb-4\">\n            <CardTitle className=\"flex items-center gap-2 text-red-800\">\n              <div className=\"w-8 h-8 bg-red-200 rounded-full flex items-center justify-center\">\n                <TrendingUp className=\"h-4 w-4 text-red-600\" />\n              </div>\n              Sales Report\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-gray-700 hover:bg-red-100\"\n              onClick={() => generateReport(\"Sales Master Report\")}\n            >\n              Sales Master Report\n            </Button>\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-gray-700 hover:bg-red-100\"\n              onClick={() => generateReport(\"Sales Ledger\")}\n            >\n              Sales Ledger\n            </Button>\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-gray-700 hover:bg-red-100\"\n              onClick={() => generateReport(\"Customer Monthly Sales\")}\n            >\n              Customer Monthly Sales\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Setting */}\n        <Card className=\"border-red-200 bg-red-50\">\n          <CardHeader className=\"pb-4\">\n            <CardTitle className=\"flex items-center gap-2 text-red-800\">\n              <div className=\"w-8 h-8 bg-red-200 rounded-full flex items-center justify-center\">\n                <Settings className=\"h-4 w-4 text-red-600\" />\n              </div>\n              Setting\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-gray-700 hover:bg-red-100\"\n              onClick={() => generateReport(\"Account Heads\")}\n            >\n              Account Heads\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Analytics Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mt-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-500\">\n                  Total Revenue\n                </p>\n                <p className=\"text-3xl font-bold text-gray-900\">\n                  {formatCurrency(\n                    analytics?.salesData?.reduce(\n                      (sum: number, day: any) => sum + day.sales,\n                      0,\n                    ) || 0,\n                  )}\n                </p>\n                <p className=\"text-sm text-green-600\">Last {timeRange} days</p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                <DollarSign className=\"h-6 w-6 text-green-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-500\">\n                  Total Orders\n                </p>\n                <p className=\"text-3xl font-bold text-gray-900\">\n                  {analytics?.salesData?.reduce(\n                    (sum: number, day: any) => sum + day.orders,\n                    0,\n                  ) || 0}\n                </p>\n                <p className=\"text-sm text-blue-600\">Last {timeRange} days</p>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <ShoppingCart className=\"h-6 w-6 text-blue-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-500\">\n                  Average Order\n                </p>\n                <p className=\"text-3xl font-bold text-gray-900\">\n                  {formatCurrency(\n                    analytics?.salesData?.length > 0\n                      ? analytics.salesData.reduce(\n                          (sum: number, day: any) => sum + day.sales,\n                          0,\n                        ) /\n                          analytics.salesData.reduce(\n                            (sum: number, day: any) => sum + day.orders,\n                            0,\n                          )\n                      : 0,\n                  )}\n                </p>\n                <p className=\"text-sm text-purple-600\">Per order value</p>\n              </div>\n              <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"h-6 w-6 text-purple-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-500\">\n                  Products in Stock\n                </p>\n                <p className=\"text-3xl font-bold text-gray-900\">\n                  {stats?.productsInStock || 0}\n                </p>\n                <p className=\"text-sm text-orange-600\">\n                  {stats?.lowStockItems || 0} low stock\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                <FileText className=\"h-6 w-6 text-orange-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Export Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Download className=\"h-5 w-5\" />\n            Export Reports\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-3\">\n            <Button\n              variant=\"outline\"\n              onClick={() => exportReport(\"All Accounting Reports\")}\n              className=\"flex items-center gap-2\"\n            >\n              <Download className=\"h-4 w-4\" />\n              Export Accounting Reports\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => exportReport(\"Tax Reports\")}\n              className=\"flex items-center gap-2\"\n            >\n              <Download className=\"h-4 w-4\" />\n              Export Tax Reports\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => exportReport(\"Sales Reports\")}\n              className=\"flex items-center gap-2\"\n            >\n              <Download className=\"h-4 w-4\" />\n              Export Sales Reports\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => exportReport(\"Purchase Reports\")}\n              className=\"flex items-center gap-2\"\n            >\n              <Download className=\"h-4 w-4\" />\n              Export Purchase Reports\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":16082},"client/src/pages/salary.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Edit, DollarSign, Calendar } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport SearchBar from \"@/components/search-bar\";\nimport { useTableSort } from \"@/hooks/useTableSort\";\nimport { SortableTableHeader } from \"@/components/ui/sortable-table-header\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function SalaryPayments() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingPayment, setEditingPayment] = useState<any>(null);\n  const [selectedStaff, setSelectedStaff] = useState(\"\");\n  const [formData, setFormData] = useState({\n    staffId: \"\",\n    payPeriodStart: \"\",\n    payPeriodEnd: \"\",\n    basicSalary: \"\",\n    overtimePay: \"\",\n    bonus: \"\",\n    allowances: \"\",\n    deductions: \"\",\n    taxPercentage: \"0\",\n    taxAmount: \"0\",\n    netPay: \"0\",\n    paymentDate: new Date().toISOString().split(\"T\")[0], // default today\n    paymentMethod: \"bank_transfer\",\n    status: \"pending\",\n    notes: \"\",\n  });\n\n  const { toast } = useToast();\n\n  const { data: staff = [], isLoading: staffLoading } = useQuery({\n    queryKey: [\"staff\"],\n    queryFn: () => apiRequest(\"GET\", \"/api/staff\"),\n  });\n\n  const { data: salaryPayments = [], isLoading: paymentsLoading } = useQuery({\n    queryKey: [\"salary-payments\", selectedStaff],\n    queryFn: () => {\n      const params = selectedStaff ? `?staffId=${selectedStaff}` : \"\";\n      return apiRequest(\"GET\", `/api/salary-payments${params}`);\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/salary-payments\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Salary payment created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"salary-payments\"] });\n      setIsDialogOpen(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create salary payment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\n        \"PUT\",\n        `/api/salary-payments/${editingPayment?.id}`,\n        data,\n      );\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Salary payment updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"salary-payments\"] });\n      setIsDialogOpen(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update salary payment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      staffId: \"\",\n      payPeriodStart: \"\",\n      payPeriodEnd: \"\",\n      basicSalary: \"\",\n      overtimePay: \"\",\n      bonus: \"\",\n      allowances: \"\",\n      deductions: \"\",\n      taxPercentage: \"0\",\n      taxAmount: \"0\",\n      netPay: \"0\",\n      paymentDate: new Date().toISOString().split(\"T\")[0],\n      paymentMethod: \"bank_transfer\",\n      status: \"pending\",\n      notes: \"\",\n    });\n    setEditingPayment(null);\n  };\n\n  // Auto-calculate tax and net pay whenever financial fields change\n  useEffect(() => {\n    const basicSalary = parseFloat(formData.basicSalary) || 0;\n    const overtimePay = parseFloat(formData.overtimePay) || 0;\n    const bonus = parseFloat(formData.bonus) || 0;\n    const allowances = parseFloat(formData.allowances) || 0;\n    const deductions = parseFloat(formData.deductions) || 0;\n    const taxPercentage = parseFloat(formData.taxPercentage) || 0;\n\n    const grossPay = basicSalary + overtimePay + bonus + allowances;\n    const taxAmount = (grossPay * taxPercentage) / 100;\n    const netPay = grossPay - deductions - taxAmount;\n\n    setFormData((prev) => ({\n      ...prev,\n      taxAmount: taxAmount.toFixed(2),\n      netPay: netPay.toFixed(2),\n    }));\n  }, [\n    formData.basicSalary,\n    formData.overtimePay,\n    formData.bonus,\n    formData.allowances,\n    formData.deductions,\n    formData.taxPercentage,\n  ]);\n\n  const handleFormChange = (field: string, value: string) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const { staffId, payPeriodStart, payPeriodEnd, basicSalary } = formData;\n\n    if (!staffId || !payPeriodStart || !payPeriodEnd || !basicSalary) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (new Date(payPeriodStart) > new Date(payPeriodEnd)) {\n      toast({\n        title: \"Error\",\n        description: \"Pay period start must be before end date\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const submitData = {\n      ...formData,\n      staffId: parseInt(staffId),\n      basicSalary: parseFloat(formData.basicSalary) || 0,\n      overtimePay: parseFloat(formData.overtimePay) || 0,\n      bonus: parseFloat(formData.bonus) || 0,\n      allowances: parseFloat(formData.allowances) || 0,\n      deductions: parseFloat(formData.deductions) || 0,\n      taxPercentage: parseFloat(formData.taxPercentage) || 0,\n      taxAmount: parseFloat(formData.taxAmount) || 0,\n      netPay: parseFloat(formData.netPay) || 0,\n    };\n\n    if (editingPayment) {\n      updateMutation.mutate(submitData);\n    } else {\n      createMutation.mutate(submitData);\n    }\n  };\n\n  const handleEdit = (payment: any) => {\n    setEditingPayment(payment);\n    setFormData({\n      staffId: payment.staffId?.toString() || \"\",\n      payPeriodStart: payment.payPeriodStart\n        ? new Date(payment.payPeriodStart).toISOString().split(\"T\")[0]\n        : \"\",\n      payPeriodEnd: payment.payPeriodEnd\n        ? new Date(payment.payPeriodEnd).toISOString().split(\"T\")[0]\n        : \"\",\n      basicSalary: payment.basicSalary?.toString() || \"0\",\n      overtimePay: payment.overtimePay?.toString() || \"0\",\n      bonus: payment.bonus?.toString() || \"0\",\n      allowances: payment.allowances?.toString() || \"0\",\n      deductions: payment.deductions?.toString() || \"0\",\n      taxPercentage: payment.taxPercentage?.toString() || \"0\",\n      taxAmount: payment.taxAmount?.toString() || \"0\",\n      netPay: payment.netPay?.toString() || \"0\",\n      paymentDate: payment.paymentDate\n        ? new Date(payment.paymentDate).toISOString().split(\"T\")[0]\n        : new Date().toISOString().split(\"T\")[0],\n      paymentMethod: payment.paymentMethod || \"bank_transfer\",\n      status: payment.status || \"pending\",\n      notes: payment.notes || \"\",\n    });\n    setIsDialogOpen(true);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      pending: { variant: \"secondary\" as const, label: \"Pending\" },\n      paid: { variant: \"default\" as const, label: \"Paid\" },\n      cancelled: { variant: \"destructive\" as const, label: \"Cancelled\" },\n    };\n\n    const config =\n      statusConfig[status as keyof typeof statusConfig] || statusConfig.pending;\n    return <Badge variant={config.variant}>{config.label}</Badge>;\n  };\n\n  const filteredPayments = salaryPayments.filter((payment: any) =>\n    payment.staffName?.toLowerCase().includes(searchQuery.toLowerCase()),\n  );\n\n  const { sortedData, sortConfig, requestSort } = useTableSort(\n    filteredPayments,\n    \"paymentDate\",\n  );\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n            <DollarSign className=\"h-8 w-8\" />\n            Salary Payments\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Manage staff salary payments and payroll\n          </p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={resetForm}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Salary Payment\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingPayment\n                  ? \"Edit Salary Payment\"\n                  : \"Add New Salary Payment\"}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"staffId\">Staff Member *</Label>\n                  <Select\n                    value={formData.staffId || undefined}\n                    onValueChange={(value) =>\n                      handleFormChange(\"staffId\", value)\n                    }\n                    disabled={!!editingPayment} // prevent changing staff when editing\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select staff member\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {staff.map((member: any) => (\n                        <SelectItem\n                          key={member.id}\n                          value={member.id.toString()}\n                        >\n                          {member.firstName} {member.lastName} -{\" \"}\n                          {member.position}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"paymentMethod\">Payment Method</Label>\n                  <Select\n                    value={formData.paymentMethod || undefined}\n                    onValueChange={(value) =>\n                      handleFormChange(\"paymentMethod\", value)\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select payment method\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"bank_transfer\">\n                        Bank Transfer\n                      </SelectItem>\n                      <SelectItem value=\"cash\">Cash</SelectItem>\n                      <SelectItem value=\"check\">Check</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"payPeriodStart\">Pay Period Start *</Label>\n                  <Input\n                    id=\"payPeriodStart\"\n                    type=\"date\"\n                    value={formData.payPeriodStart}\n                    onChange={(e) =>\n                      handleFormChange(\"payPeriodStart\", e.target.value)\n                    }\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"payPeriodEnd\">Pay Period End *</Label>\n                  <Input\n                    id=\"payPeriodEnd\"\n                    type=\"date\"\n                    value={formData.payPeriodEnd}\n                    onChange={(e) =>\n                      handleFormChange(\"payPeriodEnd\", e.target.value)\n                    }\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"basicSalary\">Basic Salary *</Label>\n                  <Input\n                    id=\"basicSalary\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={formData.basicSalary}\n                    onChange={(e) =>\n                      handleFormChange(\"basicSalary\", e.target.value)\n                    }\n                    placeholder=\"0.00\"\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"overtimePay\">Overtime Pay</Label>\n                  <Input\n                    id=\"overtimePay\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={formData.overtimePay}\n                    onChange={(e) =>\n                      handleFormChange(\"overtimePay\", e.target.value)\n                    }\n                    placeholder=\"0.00\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"bonus\">Bonus</Label>\n                  <Input\n                    id=\"bonus\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={formData.bonus}\n                    onChange={(e) => handleFormChange(\"bonus\", e.target.value)}\n                    placeholder=\"0.00\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"allowances\">Allowances</Label>\n                  <Input\n                    id=\"allowances\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={formData.allowances}\n                    onChange={(e) =>\n                      handleFormChange(\"allowances\", e.target.value)\n                    }\n                    placeholder=\"0.00\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"deductions\">Deductions</Label>\n                  <Input\n                    id=\"deductions\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={formData.deductions}\n                    onChange={(e) =>\n                      handleFormChange(\"deductions\", e.target.value)\n                    }\n                    placeholder=\"0.00\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"taxPercentage\">Tax Percentage (%)</Label>\n                  <Input\n                    id=\"taxPercentage\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    max=\"100\"\n                    value={formData.taxPercentage}\n                    onChange={(e) =>\n                      handleFormChange(\"taxPercentage\", e.target.value)\n                    }\n                    placeholder=\"0.00\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>Tax Amount (Auto-calculated)</Label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={formData.taxAmount}\n                    readOnly\n                    className=\"bg-gray-50\"\n                  />\n                </div>\n                <div>\n                  <Label>Net Pay (Auto-calculated)</Label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={formData.netPay}\n                    readOnly\n                    className=\"bg-gray-50 font-bold\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"paymentDate\">Payment Date</Label>\n                  <Input\n                    id=\"paymentDate\"\n                    type=\"date\"\n                    value={formData.paymentDate}\n                    onChange={(e) =>\n                      handleFormChange(\"paymentDate\", e.target.value)\n                    }\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"status\">Status</Label>\n                  <Select\n                    value={formData.status || undefined}\n                    onValueChange={(value) => handleFormChange(\"status\", value)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"paid\">Paid</SelectItem>\n                      <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"notes\">Notes</Label>\n                <Textarea\n                  id=\"notes\"\n                  value={formData.notes}\n                  onChange={(e) => handleFormChange(\"notes\", e.target.value)}\n                  placeholder=\"Additional notes\"\n                />\n              </div>\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={\n                    createMutation.isPending || updateMutation.isPending\n                  }\n                >\n                  {createMutation.isPending || updateMutation.isPending ? (\n                    <>\n                      <Calendar className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Saving...\n                    </>\n                  ) : editingPayment ? (\n                    \"Update\"\n                  ) : (\n                    \"Create\"\n                  )}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"flex-1\">\n          <SearchBar\n            placeholder=\"Search salary payments...\"\n            value={searchQuery}\n            onChange={setSearchQuery}\n            className=\"w-full\"\n          />\n        </div>\n        <Select value={selectedStaff || undefined} onValueChange={setSelectedStaff}>\n          <SelectTrigger className=\"w-[200px]\">\n            <SelectValue placeholder=\"Filter by staff\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Staff</SelectItem>\n            {staff.map((member: any) => (\n              <SelectItem key={member.id} value={member.id.toString()}>\n                {member.firstName} {member.lastName}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Salary Payments Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Salary Payments ({sortedData.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {paymentsLoading || staffLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n              <p className=\"text-muted-foreground mt-2\">\n                Loading salary payments...\n              </p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <SortableTableHeader\n                      sortKey=\"staffName\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Staff Member\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"payPeriodStart\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Pay Period\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"basicSalary\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Basic Salary\n                    </SortableTableHeader>\n                    <TableHead>Tax (%)</TableHead>\n                    <TableHead>Tax Amount</TableHead>\n                    <SortableTableHeader\n                      sortKey=\"netPay\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Net Pay\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"status\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Status\n                    </SortableTableHeader>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sortedData.length > 0 ? (\n                    sortedData.map((payment: any) => (\n                      <TableRow key={payment.id}>\n                        <TableCell className=\"font-medium\">\n                          <div>\n                            <div>{payment.staffName}</div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {payment.staffPosition}\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm\">\n                            <div>\n                              {new Date(\n                                payment.payPeriodStart,\n                              ).toLocaleDateString()}\n                            </div>\n                            <div className=\"text-muted-foreground\">\n                              to{\" \"}\n                              {new Date(\n                                payment.payPeriodEnd,\n                              ).toLocaleDateString()}\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          Rs. {parseFloat(payment.basicSalary || 0).toFixed(2)}\n                        </TableCell>\n                        <TableCell>{payment.taxPercentage || 0}%</TableCell>\n                        <TableCell>\n                          Rs. {parseFloat(payment.taxAmount || 0).toFixed(2)}\n                        </TableCell>\n                        <TableCell className=\"font-bold\">\n                          Rs. {parseFloat(payment.netPay || 0).toFixed(2)}\n                        </TableCell>\n                        <TableCell>\n                          {getStatusBadge(payment.status || \"pending\")}\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(payment)}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  ) : (\n                    <TableRow>\n                      <TableCell\n                        colSpan={8}\n                        className=\"text-center py-8 text-muted-foreground\"\n                      >\n                        No salary payments found.\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":24775},"client/src/pages/sales.tsx":{"content":"import { useState, useMemo } from \"react\"; // Added useMemo\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport SearchBar from \"@/components/search-bar\";\nimport { useTableSort } from \"@/hooks/useTableSort\";\nimport { SortableTableHeader } from \"@/components/ui/sortable-table-header\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Pagination,\n  PaginationInfo,\n  PageSizeSelector,\n  usePagination,\n} from \"@/components/ui/pagination\";\nimport { Plus, Receipt, Search, Filter, Eye, Printer } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\n\ninterface Sale {\n  id: number;\n  customerName: string;\n  totalAmount: string;\n  paymentMethod: string;\n  status: string;\n  createdAt: string;\n  items: SaleItem[];\n}\n\ninterface SaleItem {\n  id: number;\n  productName: string;\n  quantity: number;\n  unitPrice: string;\n  totalPrice: string;\n}\n\n// --- Helper function to fetch data ---\nconst fetchData = async (url: string) => {\n  const response = await fetch(url, {\n    method: \"GET\",\n    headers: { \"Content-Type\": \"application/json\" },\n    credentials: \"include\",\n  });\n  if (!response.ok) {\n    throw new Error(`Failed to fetch ${url}`);\n  }\n  return response.json();\n};\n\nexport default function Sales() {\n  const { toast } = useToast();\n  const { formatCurrency, formatCurrencyWithCommas } = useCurrency();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedSale, setSelectedSale] = useState<Sale | null>(null);\n\n  // --- FIXED: Added queryFn and extracted isLoading for all queries ---\n  const { data: sales = [], isLoading: isSalesLoading } = useQuery({\n    queryKey: [\"/api/sales\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/sales\", { credentials: \"include\" });\n      if (!res.ok) throw new Error(\"Failed to fetch sales\");\n      return res.json();\n    },\n  });\n\n  const { data: products = [], isLoading: isProductsLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/products\", { credentials: \"include\" });\n      if (!res.ok) throw new Error(\"Failed to fetch products\");\n      return res.json();\n    },\n  });\n\n  const { data: customers = [], isLoading: isCustomersLoading } = useQuery({\n    queryKey: [\"/api/customers\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/customers\", { credentials: \"include\" });\n      if (!res.ok) throw new Error(\"Failed to fetch customers\");\n      return res.json();\n    },\n  });\n\n  // --- FIXED: Now these variables are defined ---\n  const isLoading = isSalesLoading || isProductsLoading || isCustomersLoading;\n\n  const [saleForm, setSaleForm] = useState({\n    customerId: \"\",\n    customerName: \"\",\n    paymentMethod: \"cash\",\n    items: [{ productId: \"\", quantity: 1, unitPrice: \"0\" }],\n  });\n\n  const createSaleMutation = useMutation({\n    mutationFn: async (saleData: any) => {\n      const response = await fetch(\"/api/sales\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(saleData),\n      });\n      if (!response.ok) throw new Error(\"Failed to create sale\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sales\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory\"] });\n      toast({ title: \"Success\", description: \"Sale recorded successfully\" });\n      handleCloseDialog();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to record sale\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validate form\n    if (!saleForm.customerName.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Customer name is required.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (saleForm.items.length === 0 || !saleForm.items.some(item => item.productId)) {\n      toast({\n        title: \"Validation Error\",\n        description: \"At least one item is required.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const totalAmount = saleForm.items.reduce((sum, item) => {\n      if (!item.productId) return sum;\n      const itemTotal = parseFloat(item.unitPrice) * item.quantity;\n      return isNaN(itemTotal) ? sum : sum + itemTotal;\n    }, 0);\n\n    const validItems = saleForm.items\n      .filter(item => item.productId && parseFloat(item.unitPrice) > 0)\n      .map((item) => ({\n        productId: parseInt(item.productId, 10),\n        quantity: item.quantity,\n        unitPrice: parseFloat(item.unitPrice).toString(),\n        totalPrice: (parseFloat(item.unitPrice) * item.quantity).toString(),\n      }));\n\n    if (validItems.length === 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please add valid items with prices.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const saleData = {\n      customerId: saleForm.customerId ? parseInt(saleForm.customerId, 10) : null,\n      customerName: saleForm.customerName.trim(),\n      totalAmount: totalAmount.toString(),\n      paymentMethod: saleForm.paymentMethod,\n      status: \"completed\",\n      items: validItems,\n    };\n    \n    createSaleMutation.mutate(saleData);\n  };\n\n  const handleCloseDialog = () => {\n    setIsDialogOpen(false);\n    setSaleForm({\n      customerId: \"\",\n      customerName: \"\",\n      paymentMethod: \"cash\",\n      items: [{ productId: \"\", quantity: 1, unitPrice: \"0\" }],\n    });\n  };\n\n  const addItem = () => {\n    setSaleForm({\n      ...saleForm,\n      items: [\n        ...saleForm.items,\n        { productId: \"\", quantity: 1, unitPrice: \"0\" },\n      ],\n    });\n  };\n\n  const removeItem = (index: number) => {\n    if (saleForm.items.length <= 1) return; // Prevent removing the last item\n    setSaleForm({\n      ...saleForm,\n      items: saleForm.items.filter((_, i) => i !== index),\n    });\n  };\n\n  const updateItem = (index: number, field: string, value: any) => {\n    const updatedItems = saleForm.items.map((item, i) => {\n      if (i === index) {\n        if (field === \"productId\") {\n          const product = products.find(\n            (p: any) => p.id === parseInt(value, 10),\n          );\n          return {\n            ...item,\n            productId: value,\n            unitPrice: product?.price || \"0\",\n          };\n        }\n        return { ...item, [field]: value };\n      }\n      return item;\n    });\n    setSaleForm({ ...saleForm, items: updatedItems });\n  };\n\n  // --- Improved filtering logic using useMemo ---\n  const filteredSales = useMemo(() => {\n    // Filter sales based on search term and status\n    const filtered = (sales || []).filter((sale: Sale) => {\n      // Ensure sale.customerName exists and is a string before calling toLowerCase\n      const customerName =\n        typeof sale.customerName === \"string\" ? sale.customerName : \"\";\n      const matchesSearch = customerName\n        .toLowerCase()\n        .includes(searchTerm.toLowerCase());\n      const matchesStatus =\n        statusFilter === \"all\" || sale.status === statusFilter;\n      return matchesSearch && matchesStatus;\n    });\n\n    return filtered;\n  }, [sales, searchTerm, statusFilter]); // Recalculate when sales, searchTerm, or statusFilter change\n\n  // --- Apply sorting to filtered sales ---\n  const {\n    sortedData: sortedSales,\n    sortConfig,\n    requestSort,\n  } = useTableSort(filteredSales, \"customerName\");\n\n  // --- Use sortedSales for pagination ---\n  const pagination = usePagination(sortedSales, 5); // Explicit initial page size\n  const {\n    currentPage,\n    pageSize,\n    totalPages,\n    totalItems,\n    paginatedData: paginatedSales, // Use this for the table body\n    handlePageChange,\n    handlePageSizeChange,\n  } = pagination;\n\n  // --- Memoized calculations for summary cards ---\n  const { totalSales, todaySales, averageSale, transactionCount } =\n    useMemo(() => {\n      const salesArray = sales || []; // Ensure sales is an array\n      const total = salesArray.reduce(\n        (sum: number, sale: Sale) => sum + (parseFloat(sale.totalAmount) || 0), // Handle potential NaN\n        0,\n      );\n\n      const today = new Date().toDateString();\n      const todayTotal = salesArray\n        .filter(\n          (sale: Sale) => new Date(sale.createdAt).toDateString() === today,\n        )\n        .reduce(\n          (sum: number, sale: Sale) =>\n            sum + (parseFloat(sale.totalAmount) || 0),\n          0,\n        ); // Handle potential NaN\n\n      const count = salesArray.length;\n      const avg = count > 0 ? total / count : 0;\n\n      return {\n        totalSales: total,\n        todaySales: todayTotal,\n        averageSale: avg,\n        transactionCount: count,\n      };\n    }, [sales]); // Recalculate only when sales data changes\n\n  const printInvoice = (sale: Sale) => {\n    const printWindow = window.open(\"\", \"_blank\");\n    if (!printWindow) return;\n    const invoiceHTML = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Sales Invoice - ${sale.id}</title>\n          <style>\n            body {\n              font-family: Arial, sans-serif;\n              margin: 0;\n              padding: 20px;\n              color: #333;\n            }\n            .header {\n              text-align: center;\n              margin-bottom: 30px;\n              border-bottom: 2px solid #333;\n              padding-bottom: 20px;\n            }\n            .company-name {\n              font-size: 28px;\n              font-weight: bold;\n              color: #2563eb;\n              margin-bottom: 5px;\n            }\n            .company-tagline {\n              font-size: 14px;\n              color: #666;\n            }\n            .invoice-title {\n              font-size: 24px;\n              font-weight: bold;\n              margin: 20px 0;\n            }\n            .invoice-details {\n              display: flex;\n              justify-content: space-between;\n              margin-bottom: 30px;\n            }\n            .invoice-info, .customer-info {\n              flex: 1;\n            }\n            .invoice-info h3, .customer-info h3 {\n              font-size: 16px;\n              margin-bottom: 10px;\n              color: #2563eb;\n            }\n            .invoice-info p, .customer-info p {\n              margin: 5px 0;\n              font-size: 14px;\n            }\n            .items-table {\n              width: 100%;\n              border-collapse: collapse;\n              margin: 20px 0;\n            }\n            .items-table th, .items-table td {\n              border: 1px solid #ddd;\n              padding: 12px;\n              text-align: left;\n            }\n            .items-table th {\n              background-color: #f8f9fa;\n              font-weight: bold;\n              color: #333;\n            }\n            .items-table tr:nth-child(even) {\n              background-color: #f9f9f9;\n            }\n            .total-section {\n              text-align: right;\n              margin-top: 20px;\n            }\n            .total-row {\n              display: flex;\n              justify-content: flex-end;\n              margin: 5px 0;\n            }\n            .total-label {\n              width: 150px;\n              font-weight: bold;\n            }\n            .total-amount {\n              width: 100px;\n              text-align: right;\n            }\n            .grand-total {\n              border-top: 2px solid #333;\n              padding-top: 10px;\n              font-size: 18px;\n              font-weight: bold;\n              color: #2563eb;\n            }\n            .footer {\n              margin-top: 40px;\n              text-align: center;\n              font-size: 12px;\n              color: #666;\n              border-top: 1px solid #ddd;\n              padding-top: 20px;\n            }\n            @media print {\n              body { margin: 0; }\n              .no-print { display: none; }\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"header\">\n            <div class=\"company-name\">Bake Sewa</div>\n            <div class=\"company-tagline\">Delicious Moments, Sweet Memories</div>\n            <div class=\"invoice-title\">SALES INVOICE</div>\n          </div>\n          <div class=\"invoice-details\">\n            <div class=\"invoice-info\">\n              <h3>Invoice Information</h3>\n              <p><strong>Invoice #:</strong> INV-${sale.id}</p>\n              <p><strong>Date:</strong> ${format(new Date(sale.createdAt), \"dd/MM/yyyy\")}</p>\n              <p><strong>Time:</strong> ${format(new Date(sale.createdAt), \"HH:mm:ss\")}</p>\n              <p><strong>Payment Method:</strong> ${sale.paymentMethod?.toUpperCase() || \"N/A\"}</p>\n              <p><strong>Status:</strong> ${sale.status?.toUpperCase() || \"COMPLETED\"}</p>\n            </div>\n            <div class=\"customer-info\">\n              <h3>Customer Information</h3>\n              <p><strong>Name:</strong> ${sale.customerName}</p>\n              <p><strong>Invoice Date:</strong> ${format(new Date(sale.createdAt), \"MMMM dd, yyyy\")}</p>\n            </div>\n          </div>\n          <table class=\"items-table\">\n            <thead>\n              <tr>\n                <th>Item</th>\n                <th>Quantity</th>\n                <th>Unit Price</th>\n                <th>Total Price</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${\n                (sale.items || []) // Ensure items is an array\n                  .map(\n                    (item) => `\n                <tr>\n                  <td>${item.productName || \"N/A\"}</td>\n                  <td>${item.quantity}</td>\n                  <td>${formatCurrency(parseFloat(item.unitPrice) || 0)}</td>\n                  <td>${formatCurrency(parseFloat(item.totalPrice) || 0)}</td>\n                </tr>\n              `,\n                  )\n                  .join(\"\") || '<tr><td colspan=\"4\">No items found</td></tr>'\n              }\n            </tbody>\n          </table>\n          <div class=\"total-section\">\n            <div class=\"total-row grand-total\">\n              <div class=\"total-label\">Grand Total:</div>\n              <div class=\"total-amount\">${formatCurrency(parseFloat(sale.totalAmount) || 0)}</div>\n            </div>\n          </div>\n          <div class=\"footer\">\n            <p>Thank you for your business!</p>\n            <p>Bake Sewa - Where every bite is a delight</p>\n          </div>\n        </body>\n      </html>\n    `;\n    printWindow.document.write(invoiceHTML);\n    printWindow.document.close();\n    printWindow.focus();\n    printWindow.print();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"text-center\">Loading sales...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-gray-600\">\n            Record and track all sales transactions\n          </p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Record Sale\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Record New Sale</DialogTitle>\n              <DialogDescription>\n                Enter the sale transaction details\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"customer\">Customer</Label>\n                  <Select\n                    value={saleForm.customerId}\n                    onValueChange={(value) => {\n                      const customer = customers.find(\n                        (c: any) => c.id === parseInt(value, 10),\n                      );\n                      setSaleForm({\n                        ...saleForm,\n                        customerId: value,\n                        customerName: customer?.name || \"\",\n                      });\n                    }}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select customer\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {(customers || []).map(\n                        (\n                          customer: any, // Ensure customers is an array\n                        ) => (\n                          <SelectItem\n                            key={customer.id}\n                            value={customer.id.toString()}\n                          >\n                            {customer.name}\n                          </SelectItem>\n                        ),\n                      )}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"customerName\">Customer Name</Label>\n                  <Input\n                    id=\"customerName\"\n                    value={saleForm.customerName}\n                    onChange={(e) =>\n                      setSaleForm({ ...saleForm, customerName: e.target.value })\n                    }\n                    placeholder=\"Enter customer name\"\n                    // Removed required to allow manual entry without selection\n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"paymentMethod\">Payment Method</Label>\n                <Select\n                  value={saleForm.paymentMethod}\n                  onValueChange={(value) =>\n                    setSaleForm({ ...saleForm, paymentMethod: value })\n                  }\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"cash\">Cash</SelectItem>\n                    <SelectItem value=\"card\">Card</SelectItem>\n                    <SelectItem value=\"upi\">UPI</SelectItem>\n                    <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <Label>Items</Label>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={addItem}\n                  >\n                    Add Item\n                  </Button>\n                </div>\n                {saleForm.items.map((item, index) => (\n                  <div key={index} className=\"grid grid-cols-12 gap-2 mb-2\">\n                    <div className=\"col-span-5\">\n                      <Select\n                        value={item.productId}\n                        onValueChange={(value) =>\n                          updateItem(index, \"productId\", value)\n                        }\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select product\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {(products || []).map(\n                            (\n                              product: any, // Ensure products is an array\n                            ) => (\n                              <SelectItem\n                                key={product.id}\n                                value={product.id.toString()}\n                              >\n                                {product.name}\n                              </SelectItem>\n                            ),\n                          )}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"col-span-2\">\n                      <Input\n                        type=\"number\"\n                        value={item.quantity}\n                        onChange={(e) =>\n                          updateItem(\n                            index,\n                            \"quantity\",\n                            parseInt(e.target.value, 10) || 1, // Default to 1 if invalid\n                          )\n                        }\n                        min=\"1\"\n                      />\n                    </div>\n                    <div className=\"col-span-3\">\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={item.unitPrice}\n                        onChange={(e) =>\n                          updateItem(index, \"unitPrice\", e.target.value)\n                        }\n                        placeholder=\"Price\"\n                      />\n                    </div>\n                    <div className=\"col-span-2\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => removeItem(index)}\n                        disabled={saleForm.items.length === 1}\n                      >\n                        Remove\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              <div className=\"flex justify-end gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={handleCloseDialog}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={createSaleMutation.isPending}>\n                  {createSaleMutation.isPending\n                    ? \"Recording...\"\n                    : \"Record Sale\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Sales</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {formatCurrencyWithCommas(totalSales)}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Total Transactions\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{transactionCount}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Today's Sales</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {formatCurrencyWithCommas(todaySales)}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Average Sale</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {formatCurrencyWithCommas(averageSale)}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      <div className=\"space-y-4\">\n        {/* Filters Section - Placed above the table */}\n        <div className=\"flex flex-col sm:flex-row gap-4\">\n          <div className=\"flex-1\">\n            <SearchBar\n              placeholder=\"Search sales...\"\n              value={searchTerm}\n              onChange={setSearchTerm}\n              className=\"w-full\"\n            />\n          </div>\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-full sm:w-[180px]\">\n              <SelectValue placeholder=\"All Status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Status</SelectItem>\n              <SelectItem value=\"completed\">Completed</SelectItem>\n              <SelectItem value=\"pending\">Pending</SelectItem>\n              <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        {/* Sales Table */}\n        <div className=\"overflow-x-auto bg-white rounded-lg border\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <SortableTableHeader\n                  sortKey=\"invoiceID\"\n                  sortConfig={sortConfig}\n                  onSort={requestSort}\n                >\n                  Invoice ID\n                </SortableTableHeader>\n                <SortableTableHeader\n                  sortKey=\"customerName\"\n                  sortConfig={sortConfig}\n                  onSort={requestSort}\n                >\n                  Customer\n                </SortableTableHeader>\n                <SortableTableHeader\n                  sortKey=\"createdAt\"\n                  sortConfig={sortConfig}\n                  onSort={requestSort}\n                >\n                  Date\n                </SortableTableHeader>\n                <SortableTableHeader\n                  sortKey=\"paymentMethod\"\n                  sortConfig={sortConfig}\n                  onSort={requestSort}\n                >\n                  Payment Method\n                </SortableTableHeader>\n                <SortableTableHeader\n                  sortKey=\"status\"\n                  sortConfig={sortConfig}\n                  onSort={requestSort}\n                >\n                  Status\n                </SortableTableHeader>\n                <SortableTableHeader\n                  sortKey=\"totalAmount\"\n                  sortConfig={sortConfig}\n                  onSort={requestSort}\n                  className=\"text-right\"\n                >\n                  Total\n                </SortableTableHeader>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {paginatedSales && paginatedSales.length > 0 ? (\n                paginatedSales.map((sale: Sale) => {\n                  let statusClass = \"bg-gray-100 text-gray-800\";\n                  if (sale.status === \"completed\") {\n                    statusClass = \"bg-green-100 text-green-800\";\n                  } else if (sale.status === \"pending\") {\n                    statusClass = \"bg-yellow-100 text-yellow-800\";\n                  } else if (sale.status === \"cancelled\") {\n                    statusClass = \"bg-red-100 text-red-800\";\n                  }\n                  return (\n                    <TableRow key={sale.id} className=\"hover:bg-muted/50\">\n                      <TableCell className=\"font-medium\">\n                        <div className=\"flex items-center gap-2\">\n                          <Receipt className=\"h-4 w-4 text-muted-foreground\" />\n                          INV-{sale.id}\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"font-medium\">\n                        <div className=\"flex items-center gap-2\">\n                          <Receipt className=\"h-4 w-4 text-muted-foreground\" />\n                          {sale.customerName}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {format(new Date(sale.createdAt), \"MMM dd, yyyy\")}\n                      </TableCell>\n                      <TableCell>\n                        {sale.paymentMethod?.toUpperCase() ?? \"N/A\"}\n                      </TableCell>\n                      <TableCell>\n                        <span\n                          className={`px-2 py-1 rounded-full text-xs ${statusClass}`}\n                        >\n                          {sale.status}\n                        </span>\n                      </TableCell>\n                      <TableCell className=\"text-right font-semibold\">\n                        {formatCurrency(parseFloat(sale.totalAmount) || 0)}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-1\">\n                          <Button\n                            onClick={() => setSelectedSale(sale)}\n                            className=\"text-blue-600 hover:text-blue-800 focus:outline-none\"\n                            variant=\"outline-none\"\n                            title=\"View Details\"\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            className=\"text-green-600 hover:text-green-800 focus:outline-none\"\n                            variant=\"outline-none\"\n                            title=\"Label Print\"\n                            onClick={() => printInvoice(sale)}\n                          >\n                            <Printer className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })\n              ) : (\n                <TableRow>\n                  <TableCell colSpan={6} className=\"text-center py-12\">\n                    <div className=\"flex flex-col items-center justify-center\">\n                      <Receipt className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                      <h3 className=\"text-lg font-medium mb-2\">\n                        No sales found\n                      </h3>\n                      <p className=\"text-muted-foreground\">\n                        {searchTerm || statusFilter !== \"all\"\n                          ? \"Try adjusting your filters\"\n                          : \"Start by recording your first sale\"}\n                      </p>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n          {/* Pagination Controls */}\n          {sortedSales.length > 0 && (\n            <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 p-4 border-t\">\n              <PaginationInfo\n                currentPage={currentPage}\n                pageSize={pageSize}\n                totalItems={totalItems}\n              />\n              <div className=\"flex items-center gap-4\">\n                <PageSizeSelector\n                  pageSize={pageSize}\n                  onPageSizeChange={handlePageSizeChange}\n                  options={[5, 10, 20, 50]}\n                />\n                <Pagination\n                  currentPage={currentPage}\n                  totalPages={totalPages}\n                  onPageChange={handlePageChange}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Sales Detail Modal */}\n      <Dialog open={!!selectedSale} onOpenChange={() => setSelectedSale(null)}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Sales Invoice - INV-{selectedSale?.id}</DialogTitle>\n            <DialogDescription>\n              Detailed view of the sales transaction\n            </DialogDescription>\n          </DialogHeader>\n          {selectedSale && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-semibold text-gray-900 mb-3\">\n                    Invoice Information\n                  </h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Invoice #:</span>\n                      <span className=\"font-medium\">INV-{selectedSale.id}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Date:</span>\n                      <span className=\"font-medium\">\n                        {format(\n                          new Date(selectedSale.createdAt),\n                          \"MMM dd, yyyy\",\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Time:</span>\n                      <span className=\"font-medium\">\n                        {format(new Date(selectedSale.createdAt), \"HH:mm:ss\")}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Payment Method:</span>\n                      <span className=\"font-medium\">\n                        {selectedSale.paymentMethod?.toUpperCase() || \"N/A\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Status:</span>\n                      <span\n                        className={`px-2 py-1 rounded-full text-xs font-medium ${\n                          selectedSale.status === \"completed\"\n                            ? \"bg-green-100 text-green-800\"\n                            : selectedSale.status === \"pending\"\n                              ? \"bg-yellow-100 text-yellow-800\"\n                              : selectedSale.status === \"cancelled\"\n                                ? \"bg-red-100 text-red-800\"\n                                : \"bg-gray-100 text-gray-800\" // Default\n                        }`}\n                      >\n                        {selectedSale.status?.toUpperCase() || \"UNKNOWN\"}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-gray-900 mb-3\">\n                    Customer Information\n                  </h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Customer Name:</span>\n                      <span className=\"font-medium\">\n                        {selectedSale.customerName}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Phone Number:</span>\n                      <span className=\"font-medium\">\n                        {selectedSale.phoneNumber || \"N/A\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Company Name:</span>\n                      <span className=\"font-medium\">\n                        {selectedSale.companyName || \"-\"}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-3\">\n                  Items Sales\n                </h4>\n                <div className=\"border rounded-lg overflow-hidden\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-900\">\n                          Item\n                        </th>\n                        <th className=\"px-4 py-3 text-center text-sm font-medium text-gray-900\">\n                          Qty\n                        </th>\n                        <th className=\"px-4 py-3 text-right text-sm font-medium text-gray-900\">\n                          Unit Price\n                        </th>\n                        <th className=\"px-4 py-3 text-right text-sm font-medium text-gray-900\">\n                          Total\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-gray-200\">\n                      {selectedSale.items && selectedSale.items.length > 0 ? (\n                        selectedSale.items.map((item, index) => (\n                          <tr key={index}>\n                            <td className=\"px-4 py-3 text-sm text-gray-900\">\n                              {item.productName || \"N/A\"}\n                            </td>\n                            <td className=\"px-4 py-3 text-sm text-gray-900 text-center\">\n                              {item.quantity}\n                            </td>\n                            <td className=\"px-4 py-3 text-sm text-gray-900 text-right\">\n                              {formatCurrency(parseFloat(item.unitPrice) || 0)}\n                            </td>\n                            <td className=\"px-4 py-3 text-sm text-gray-900 text-right font-medium\">\n                              {formatCurrency(parseFloat(item.totalPrice) || 0)}\n                            </td>\n                          </tr>\n                        ))\n                      ) : (\n                        <tr>\n                          <td\n                            colSpan={4}\n                            className=\"px-4 py-8 text-center text-gray-500\"\n                          >\n                            No items found\n                          </td>\n                        </tr>\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n              <div className=\"border-t pt-4\">\n                <div className=\"flex justify-end\">\n                  <div className=\"w-64\">\n                    <div className=\"flex justify-between items-center text-lg font-bold text-gray-900\">\n                      <span>Grand Total:</span>\n                      <span>\n                        {formatCurrency(\n                          parseFloat(selectedSale.totalAmount) || 0,\n                        )}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex justify-end gap-3 pt-4 border-t\">\n                <Button variant=\"outline\" onClick={() => setSelectedSale(null)}>\n                  Close\n                </Button>\n                <Button\n                  onClick={() => printInvoice(selectedSale)}\n                  className=\"flex items-center gap-2\"\n                >\n                  <Printer className=\"h-4 w-4\" />\n                  Print Invoice\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":39669},"client/src/pages/settings.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Settings2,\n  Building,\n  Bell,\n  Shield,\n  Database,\n  Check,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\n// Function to convert hex to HSL\nfunction hexToHsl(hex: string) {\n  const r = parseInt(hex.slice(1, 3), 16) / 255;\n  const g = parseInt(hex.slice(3, 5), 16) / 255;\n  const b = parseInt(hex.slice(5, 7), 16) / 255;\n\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h,\n    s,\n    l = (max + min) / 2;\n\n  if (max === min) {\n    h = s = 0;\n  } else {\n    const d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n      default:\n        h = 0;\n    }\n    h /= 6;\n  }\n\n  return `hsl(${Math.round(h * 360)}, ${Math.round(s * 100)}%, ${Math.round(l * 100)}%)`;\n}\n\n// Function to apply theme color\nfunction applyThemeColor(color: string) {\n  const hslColor = hexToHsl(color);\n  document.documentElement.style.setProperty(\"--theme-color\", hslColor);\n}\n\nconst THEME_COLORS = [\n  {\n    name: \"Blue Steel\",\n    value: \"#507e96\",\n    description: \"Professional blue-gray\",\n  },\n  {\n    name: \"Golden Yellow\",\n    value: \"#ffca44\",\n    description: \"Warm sunshine yellow\",\n  },\n  { name: \"Forest Green\", value: \"#0f6863\", description: \"Rich forest green\" },\n  { name: \"Cherry Red\", value: \"#e40126\", description: \"Bold cherry red\" },\n  { name: \"Warm Bronze\", value: \"#c1853b\", description: \"Elegant bronze tone\" },\n  { name: \"Coffee Brown\", value: \"#7B4019\", description: \"Rich coffee brown\" },\n  {\n    name: \"Orange Sunset\",\n    value: \"#FF7D29\",\n    description: \"Vibrant sunset orange\",\n  },\n];\n\nfunction ThemeColorSelector({\n  settings,\n  onUpdate,\n}: {\n  settings: any;\n  onUpdate: (data: any) => void;\n}) {\n  const currentTheme = settings?.themeColor || \"#507e96\";\n  const [selectedColor, setSelectedColor] = useState(currentTheme);\n\n  const handleColorSelect = (color: string) => {\n    setSelectedColor(color);\n    applyThemeColor(color);\n    onUpdate({ themeColor: color });\n  };\n\n  // Apply theme color on component mount if settings exist\n  React.useEffect(() => {\n    if (settings?.themeColor) {\n      applyThemeColor(settings.themeColor);\n      setSelectedColor(settings.themeColor);\n    }\n  }, [settings]);\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {THEME_COLORS.map((color) => (\n          <div\n            key={color.value}\n            className={`relative p-4 rounded-lg border-2 cursor-pointer transition-all hover:shadow-md ${\n              selectedColor === color.value\n                ? \"border-primary bg-primary/5\"\n                : \"border-border hover:border-primary/50\"\n            }`}\n            onClick={() => handleColorSelect(color.value)}\n          >\n            <div className=\"flex items-center gap-3\">\n              <div\n                className=\"w-8 h-8 rounded-full border-2 border-white shadow-sm\"\n                style={{ backgroundColor: color.value }}\n              />\n              <div className=\"flex-1\">\n                <h4 className=\"font-medium text-sm\">{color.name}</h4>\n                <p className=\"text-xs text-muted-foreground\">\n                  {color.description}\n                </p>\n              </div>\n            </div>\n            {selectedColor === color.value && (\n              <Check className=\"absolute top-2 right-2 h-4 w-4 text-primary\" />\n            )}\n          </div>\n        ))}\n      </div>\n      <div className=\"pt-4 border-t\">\n        <p className=\"text-sm text-muted-foreground\">\n          Current theme color will be applied to buttons, links, and accent\n          elements throughout the application.\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default function Settings() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"general\");\n\n  const { data: settingsResponse = {}, isLoading: settingsLoading } = useQuery({\n    queryKey: [\"/api/settings\"],\n  });\n\n  // Extract settings from response structure\n  const settings = settingsResponse?.settings || {};\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"PUT\", \"/api/settings\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n      toast({ title: \"Success\", description: \"Settings updated successfully\" });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveGeneral = (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n\n    const data = {\n      companyName: formData.get(\"companyName\"),\n      companyAddress: formData.get(\"companyAddress\"),\n      companyPhone: formData.get(\"companyPhone\"),\n      companyEmail: formData.get(\"companyEmail\"),\n      companyRegNo: formData.get(\"companyRegNo\"),\n      companyDtqocNo: formData.get(\"companyDtqocNo\"),\n      timezone: formData.get(\"timezone\"),\n      currency: formData.get(\"currency\"),\n    };\n\n    updateSettingsMutation.mutate(data);\n  };\n\n  const handleSaveNotifications = (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n\n    const data = {\n      emailNotifications: formData.get(\"emailNotifications\") === \"on\",\n      lowStockAlerts: formData.get(\"lowStockAlerts\") === \"on\",\n      orderNotifications: formData.get(\"orderNotifications\") === \"on\",\n      productionReminders: formData.get(\"productionReminders\") === \"on\",\n    };\n\n    updateSettingsMutation.mutate(data);\n  };\n\n  const handleSaveSecurity = (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n\n    const data = {\n      twoFactorAuth: formData.get(\"twoFactorAuth\") === \"on\",\n      sessionTimeout: parseInt(formData.get(\"sessionTimeout\") as string),\n      passwordPolicy: formData.get(\"passwordPolicy\"),\n    };\n\n    updateSettingsMutation.mutate(data);\n  };\n\n  const handleSavePrinting = (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n\n    const data = {\n      defaultPrinter: formData.get(\"defaultPrinter\"),\n      labelSize: formData.get(\"labelSize\"),\n      labelOrientation: formData.get(\"labelOrientation\"),\n      labelMargin: formData.get(\"labelMargin\"),\n    };\n\n    updateSettingsMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"p-4 sm:p-6 space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Settings2 className=\"h-8 w-8 text-primary\" />\n        <div>\n          <p className=\"text-gray-600\">Manage your system preferences</p>\n        </div>\n      </div>\n\n      <Tabs\n        value={activeTab}\n        onValueChange={setActiveTab}\n        className=\"space-y-6\"\n      >\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"general\">General</TabsTrigger>\n          <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n          <TabsTrigger value=\"security\">Security</TabsTrigger>\n          <TabsTrigger value=\"printing\">Printing</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"general\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Building className=\"h-5 w-5\" />\n                General Settings\n              </CardTitle>\n              <CardDescription>\n                Configure your company information and system preferences\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSaveGeneral} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"companyName\">Company Name</Label>\n                    <Input\n                      id=\"companyName\"\n                      name=\"companyName\"\n                      defaultValue={\n                        settings.companyName || \"Bake Sewa\"\n                      }\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"companyPhone\">Phone Number</Label>\n                    <Input\n                      id=\"companyPhone\"\n                      name=\"companyPhone\"\n                      defaultValue={settings.companyPhone || \"\"}\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"companyAddress\">Address</Label>\n                  <Textarea\n                    id=\"companyAddress\"\n                    name=\"companyAddress\"\n                    defaultValue={settings.companyAddress || \"\"}\n                    rows={3}\n                  />\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"companyRegNo\">Registration Number</Label>\n                    <Input\n                      id=\"companyRegNo\"\n                      name=\"companyRegNo\"\n                      defaultValue={settings.companyRegNo || \"\"}\n                      placeholder=\"Company registration number\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"companyDtqocNo\">DTQOC Number</Label>\n                    <Input\n                      id=\"companyDtqocNo\"\n                      name=\"companyDtqocNo\"\n                      defaultValue={settings.companyDtqocNo || \"\"}\n                      placeholder=\"DTQOC certification number\"\n                    />\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"companyEmail\">Email</Label>\n                    <Input\n                      id=\"companyEmail\"\n                      name=\"companyEmail\"\n                      type=\"email\"\n                      defaultValue={\n                        settings.companyEmail || \"info@sweettreatsbakery.com\"\n                      }\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"timezone\">Timezone</Label>\n                    <Select\n                      name=\"timezone\"\n                      defaultValue={settings.timezone || \"UTC\"}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"UTC\">UTC</SelectItem>\n                        <SelectItem value=\"America/New_York\">\n                          Eastern Time\n                        </SelectItem>\n                        <SelectItem value=\"America/Chicago\">\n                          Central Time\n                        </SelectItem>\n                        <SelectItem value=\"America/Denver\">\n                          Mountain Time\n                        </SelectItem>\n                        <SelectItem value=\"America/Los_Angeles\">\n                          Pacific Time\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"currency\">Currency</Label>\n                    <Select\n                      name=\"currency\"\n                      defaultValue={settings.currency || \"USD\"}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"USD\">USD ($)</SelectItem>\n                        <SelectItem value=\"EUR\">EUR (‚Ç¨)</SelectItem>\n                        <SelectItem value=\"GBP\">GBP (¬£)</SelectItem>\n                        <SelectItem value=\"NPR\">NPR (‚Ç®)</SelectItem>\n                        <SelectItem value=\"INR\">INR (‚Çπ)</SelectItem>\n                        <SelectItem value=\"CAD\">CAD (C$)</SelectItem>\n                        <SelectItem value=\"AUD\">AUD (A$)</SelectItem>\n                        <SelectItem value=\"JPY\">JPY (¬•)</SelectItem>\n                        <SelectItem value=\"CNY\">CNY (¬•)</SelectItem>\n                        <SelectItem value=\"KRW\">KRW (‚Ç©)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                <Button\n                  type=\"submit\"\n                  disabled={updateSettingsMutation.isPending}\n                >\n                  Save General Settings\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"notifications\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Bell className=\"h-5 w-5\" />\n                Notification Settings\n              </CardTitle>\n              <CardDescription>\n                Configure how and when you receive notifications\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSaveNotifications} className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"emailNotifications\">\n                      Email Notifications\n                    </Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Receive notifications via email\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"emailNotifications\"\n                    name=\"emailNotifications\"\n                    defaultChecked={settings.emailNotifications !== false}\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"lowStockAlerts\">Low Stock Alerts</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Get notified when inventory is running low\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"lowStockAlerts\"\n                    name=\"lowStockAlerts\"\n                    defaultChecked={settings.lowStockAlerts !== false}\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"orderNotifications\">\n                      Order Notifications\n                    </Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Receive alerts for new orders\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"orderNotifications\"\n                    name=\"orderNotifications\"\n                    defaultChecked={settings.orderNotifications !== false}\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"productionReminders\">\n                      Production Reminders\n                    </Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Get reminders for scheduled production\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"productionReminders\"\n                    name=\"productionReminders\"\n                    defaultChecked={settings.productionReminders !== false}\n                  />\n                </div>\n                <Button\n                  type=\"submit\"\n                  disabled={updateSettingsMutation.isPending}\n                >\n                  Save Notification Settings\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"security\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"h-5 w-5\" />\n                Security Settings\n              </CardTitle>\n              <CardDescription>\n                Manage security preferences and access controls\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSaveSecurity} className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"twoFactorAuth\">\n                      Two-Factor Authentication\n                    </Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Add an extra layer of security to your account\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"twoFactorAuth\"\n                    name=\"twoFactorAuth\"\n                    defaultChecked={settings.twoFactorAuth === true}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"sessionTimeout\">\n                    Session Timeout (minutes)\n                  </Label>\n                  <Input\n                    id=\"sessionTimeout\"\n                    name=\"sessionTimeout\"\n                    type=\"number\"\n                    defaultValue={settings.sessionTimeout || 60}\n                    min=\"15\"\n                    max=\"480\"\n                  />\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    Users will be logged out after this period of inactivity\n                  </p>\n                </div>\n                <div>\n                  <Label htmlFor=\"passwordPolicy\">Password Policy</Label>\n                  <Select\n                    name=\"passwordPolicy\"\n                    defaultValue={settings.passwordPolicy || \"medium\"}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"low\">Low - 6+ characters</SelectItem>\n                      <SelectItem value=\"medium\">\n                        Medium - 8+ characters with mixed case\n                      </SelectItem>\n                      <SelectItem value=\"high\">\n                        High - 12+ characters with symbols\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <Button\n                  type=\"submit\"\n                  disabled={updateSettingsMutation.isPending}\n                >\n                  Save Security Settings\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"printing\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <i className=\"fas fa-print text-lg\"></i>\n                Printing Settings\n              </CardTitle>\n              <CardDescription>\n                Configure your label printing preferences and printer settings\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSavePrinting} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"defaultPrinter\">Default Printer</Label>\n                    <Input\n                      id=\"defaultPrinter\"\n                      name=\"defaultPrinter\"\n                      defaultValue={settings.defaultPrinter || \"\"}\n                      placeholder=\"Enter printer name\"\n                    />\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      Name of your default label printer\n                    </p>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"labelSize\">Label Size</Label>\n                    <Select\n                      name=\"labelSize\"\n                      defaultValue={settings.labelSize || \"small\"}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"small\">Small (50x30mm)</SelectItem>\n                        <SelectItem value=\"medium\">Medium (75x50mm)</SelectItem>\n                        <SelectItem value=\"large\">Large (100x75mm)</SelectItem>\n                        <SelectItem value=\"custom\">Custom Size</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"labelOrientation\">Label Orientation</Label>\n                    <Select\n                      name=\"labelOrientation\"\n                      defaultValue={settings.labelOrientation || \"portrait\"}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"portrait\">Portrait</SelectItem>\n                        <SelectItem value=\"landscape\">Landscape</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"labelMargin\">Label Margin (mm)</Label>\n                    <Input\n                      id=\"labelMargin\"\n                      name=\"labelMargin\"\n                      type=\"number\"\n                      step=\"0.5\"\n                      defaultValue={settings.labelMargin || \"2\"}\n                      placeholder=\"2\"\n                    />\n                  </div>\n                </div>\n                <Button\n                  type=\"submit\"\n                  disabled={updateSettingsMutation.isPending}\n                >\n                  Save Printing Settings\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":23566},"client/src/pages/staff.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Edit, Trash2, Users, Phone, Mail, MapPin } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport SearchBar from \"@/components/search-bar\";\nimport { useTableSort } from \"@/hooks/useTableSort\";\nimport { SortableTableHeader } from \"@/components/ui/sortable-table-header\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { DeleteConfirmationDialog } from \"@/components/ui/delete-confirmation-dialog\";\n\nexport default function StaffDirectory() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingStaff, setEditingStaff] = useState<any>(null);\n  const [formData, setFormData] = useState({\n    staffId: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    phone: \"\",\n    address: \"\",\n    dateOfBirth: \"\",\n    hireDate: \"\",\n    position: \"\",\n    department: \"\",\n    employmentType: \"full-time\",\n    salary: \"\",\n    hourlyRate: \"\",\n    bankAccount: \"\",\n    emergencyContact: \"\",\n    emergencyPhone: \"\",\n    citizenshipNumber: \"\",\n    panNumber: \"\",\n    profilePhoto: \"\",\n    identityCardUrl: \"\",\n    agreementPaperUrl: \"\",\n    notes: \"\",\n  });\n\n  const { toast } = useToast();\n\n  const {\n    data: staff = [],\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\"/api/staff\"],\n    queryFn: () => apiRequest(\"GET\", \"/api/staff\"),\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/staff\", data);\n      return response;\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Success\",\n        description: `Staff member \"${data.firstName} ${data.lastName}\" created successfully with ID: ${data.staffId}`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/staff\"] });\n      setIsDialogOpen(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create staff member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"PUT\", `/api/staff/${editingStaff?.id}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Staff member updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/staff\"] });\n      setIsDialogOpen(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update staff member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"DELETE\", `/api/staff/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Staff member deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/staff\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete staff member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const uploadDocumentMutation = useMutation({\n    mutationFn: async ({ file, documentType, staffId }: { file: File; documentType: string; staffId: string }) => {\n      const formData = new FormData();\n      formData.append(\"document\", file);\n      formData.append(\"documentType\", documentType);\n      formData.append(\"staffId\", staffId);\n\n      const response = await fetch(\"/api/staff/upload-document\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to upload document\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      toast({\n        title: \"Success\",\n        description: `${variables.documentType} uploaded successfully`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to upload document\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      staffId: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      dateOfBirth: \"\",\n      hireDate: \"\",\n      position: \"\",\n      department: \"\",\n      employmentType: \"full-time\",\n      salary: \"\",\n      hourlyRate: \"\",\n      bankAccount: \"\",\n      emergencyContact: \"\",\n      emergencyPhone: \"\",\n      citizenshipNumber: \"\",\n      panNumber: \"\",\n      profilePhoto: \"\",\n      identityCardUrl: \"\",\n      agreementPaperUrl: \"\",\n      notes: \"\",\n    });\n    setEditingStaff(null);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (\n      !formData.firstName ||\n      !formData.lastName ||\n      !formData.position ||\n      !formData.department ||\n      !formData.hireDate\n    ) {\n      const missingFields = [];\n      if (!formData.firstName) missingFields.push(\"First Name\");\n      if (!formData.lastName) missingFields.push(\"Last Name\");\n      if (!formData.position) missingFields.push(\"Position\");\n      if (!formData.department) missingFields.push(\"Department\");\n      if (!formData.hireDate) missingFields.push(\"Hire Date\");\n\n      toast({\n        title: \"Error\",\n        description: `Please fill in the following required fields: ${missingFields.join(\", \")}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Auto-generate staff ID if not provided\n    let submitData = { ...formData };\n    if (!editingStaff && !formData.staffId) {\n      const timestamp = Date.now().toString().slice(-6);\n      const initials = (\n        formData.firstName.charAt(0) + formData.lastName.charAt(0)\n      ).toUpperCase();\n      submitData.staffId = `EMP${initials}${timestamp}`;\n    }\n\n    if (editingStaff) {\n      updateMutation.mutate(submitData);\n    } else {\n      createMutation.mutate(submitData);\n    }\n  };\n\n  const handleEdit = (staffMember: any) => {\n    setEditingStaff(staffMember);\n    setFormData({\n      staffId: staffMember.staffId || \"\",\n      firstName: staffMember.firstName || \"\",\n      lastName: staffMember.lastName || \"\",\n      email: staffMember.email || \"\",\n      phone: staffMember.phone || \"\",\n      address: staffMember.address || \"\",\n      dateOfBirth: staffMember.dateOfBirth\n        ? new Date(staffMember.dateOfBirth).toISOString().split(\"T\")[0]\n        : \"\",\n      hireDate: staffMember.hireDate\n        ? new Date(staffMember.hireDate).toISOString().split(\"T\")[0]\n        : \"\",\n      position: staffMember.position || \"\",\n      department: staffMember.department || \"\",\n      employmentType: staffMember.employmentType || \"full-time\",\n      salary: staffMember.salary || \"\",\n      hourlyRate: staffMember.hourlyRate || \"\",\n      bankAccount: staffMember.bankAccount || \"\",\n      emergencyContact: staffMember.emergencyContact || \"\",\n      emergencyPhone: staffMember.emergencyPhone || \"\",\n      citizenshipNumber: staffMember.citizenshipNumber || \"\",\n      panNumber: staffMember.panNumber || \"\",\n      profilePhoto: staffMember.profilePhoto || \"\",\n      identityCardUrl: staffMember.identityCardUrl || \"\",\n      agreementPaperUrl: staffMember.agreementPaperUrl || \"\",\n      notes: staffMember.notes || \"\",\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = async (id: number) => {\n    deleteMutation.mutate(id);\n  };\n\n  const handleFileUpload = async (file: File, documentType: string) => {\n    const staffId = formData.staffId || `temp_${Date.now()}`;\n    \n    try {\n      const result = await uploadDocumentMutation.mutateAsync({\n        file,\n        documentType,\n        staffId,\n      });\n\n      // Update form data with the uploaded file URL\n      setFormData(prev => ({\n        ...prev,\n        [documentType === 'profile_photo' ? 'profilePhoto' : \n         documentType === 'identity_card' ? 'identityCardUrl' : 'agreementPaperUrl']: result.url\n      }));\n    } catch (error) {\n      console.error('File upload failed:', error);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      active: { variant: \"default\" as const, label: \"Active\" },\n      inactive: { variant: \"secondary\" as const, label: \"Inactive\" },\n      terminated: { variant: \"destructive\" as const, label: \"Terminated\" },\n    };\n\n    const config =\n      statusConfig[status as keyof typeof statusConfig] || statusConfig.active;\n    return <Badge variant={config.variant}>{config.label}</Badge>;\n  };\n\n  // Ensure staff is an array before filtering\n  const staffArray = Array.isArray(staff) ? staff : [];\n  const filteredStaff = staffArray.filter((member: any) =>\n    `${member.firstName} ${member.lastName} ${member.position} ${member.department}`\n      .toLowerCase()\n      .includes(searchQuery.toLowerCase()),\n  );\n\n  // Add sorting functionality\n  const { sortedData, sortConfig, requestSort } = useTableSort(\n    filteredStaff,\n    \"firstName\",\n  );\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n            <Users className=\"h-8 w-8\" />\n            Staff Directory\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Manage your bakery staff members\n          </p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={() => resetForm()}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Staff Member\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingStaff ? \"Edit Staff Member\" : \"Add New Staff Member\"}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"staffId\">\n                    Staff ID {!editingStaff && \"(Auto-generated if empty)\"}\n                  </Label>\n                  <Input\n                    id=\"staffId\"\n                    value={formData.staffId}\n                    onChange={(e) =>\n                      setFormData({ ...formData, staffId: e.target.value })\n                    }\n                    placeholder={\n                      editingStaff\n                        ? \"Enter staff ID\"\n                        : \"Auto-generated if empty\"\n                    }\n                    required={!!editingStaff}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"employmentType\">Employment Type *</Label>\n                  <Select\n                    value={formData.employmentType}\n                    onValueChange={(value) =>\n                      setFormData({ ...formData, employmentType: value })\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"full-time\">Full Time</SelectItem>\n                      <SelectItem value=\"part-time\">Part Time</SelectItem>\n                      <SelectItem value=\"contract\">Contract</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"firstName\">First Name *</Label>\n                  <Input\n                    id=\"firstName\"\n                    value={formData.firstName}\n                    onChange={(e) =>\n                      setFormData({ ...formData, firstName: e.target.value })\n                    }\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"lastName\">Last Name *</Label>\n                  <Input\n                    id=\"lastName\"\n                    value={formData.lastName}\n                    onChange={(e) =>\n                      setFormData({ ...formData, lastName: e.target.value })\n                    }\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={(e) =>\n                      setFormData({ ...formData, email: e.target.value })\n                    }\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"phone\">Phone</Label>\n                  <Input\n                    id=\"phone\"\n                    value={formData.phone}\n                    onChange={(e) =>\n                      setFormData({ ...formData, phone: e.target.value })\n                    }\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"address\">Address</Label>\n                <Textarea\n                  id=\"address\"\n                  value={formData.address}\n                  onChange={(e) =>\n                    setFormData({ ...formData, address: e.target.value })\n                  }\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"dateOfBirth\">Date of Birth</Label>\n                  <Input\n                    id=\"dateOfBirth\"\n                    type=\"date\"\n                    value={formData.dateOfBirth}\n                    onChange={(e) =>\n                      setFormData({ ...formData, dateOfBirth: e.target.value })\n                    }\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"hireDate\">Hire Date *</Label>\n                  <Input\n                    id=\"hireDate\"\n                    type=\"date\"\n                    value={formData.hireDate}\n                    onChange={(e) =>\n                      setFormData({ ...formData, hireDate: e.target.value })\n                    }\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"position\">Position *</Label>\n                  <Input\n                    id=\"position\"\n                    value={formData.position}\n                    onChange={(e) =>\n                      setFormData({ ...formData, position: e.target.value })\n                    }\n                    placeholder=\"Baker, Cashier, Manager\"\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"department\">Department *</Label>\n                  <Select\n                    value={formData.department}\n                    onValueChange={(value) =>\n                      setFormData({ ...formData, department: value })\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select department\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Production\">Production</SelectItem>\n                      <SelectItem value=\"Sales\">Sales</SelectItem>\n                      <SelectItem value=\"Management\">Management</SelectItem>\n                      <SelectItem value=\"Admin\">Admin</SelectItem>\n                      <SelectItem value=\"Kitchen\">Kitchen</SelectItem>\n                      <SelectItem value=\"Delivery\">Delivery</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"salary\">Monthly Salary</Label>\n                  <Input\n                    id=\"salary\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={formData.salary}\n                    onChange={(e) =>\n                      setFormData({ ...formData, salary: e.target.value })\n                    }\n                    placeholder=\"0.00\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"hourlyRate\">Hourly Rate</Label>\n                  <Input\n                    id=\"hourlyRate\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={formData.hourlyRate}\n                    onChange={(e) =>\n                      setFormData({ ...formData, hourlyRate: e.target.value })\n                    }\n                    placeholder=\"0.00\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"bankAccount\">Bank Account</Label>\n                <Input\n                  id=\"bankAccount\"\n                  value={formData.bankAccount}\n                  onChange={(e) =>\n                    setFormData({ ...formData, bankAccount: e.target.value })\n                  }\n                  placeholder=\"Account number\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"emergencyContact\">Emergency Contact</Label>\n                  <Input\n                    id=\"emergencyContact\"\n                    value={formData.emergencyContact}\n                    onChange={(e) =>\n                      setFormData({\n                        ...formData,\n                        emergencyContact: e.target.value,\n                      })\n                    }\n                    placeholder=\"Contact name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"emergencyPhone\">Emergency Phone</Label>\n                  <Input\n                    id=\"emergencyPhone\"\n                    value={formData.emergencyPhone}\n                    onChange={(e) =>\n                      setFormData({\n                        ...formData,\n                        emergencyPhone: e.target.value,\n                      })\n                    }\n                    placeholder=\"Phone number\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"citizenshipNumber\">Citizenship Number</Label>\n                  <Input\n                    id=\"citizenshipNumber\"\n                    value={formData.citizenshipNumber}\n                    onChange={(e) =>\n                      setFormData({ ...formData, citizenshipNumber: e.target.value })\n                    }\n                    placeholder=\"Citizenship number\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"panNumber\">PAN Number</Label>\n                  <Input\n                    id=\"panNumber\"\n                    value={formData.panNumber}\n                    onChange={(e) =>\n                      setFormData({ ...formData, panNumber: e.target.value })\n                    }\n                    placeholder=\"PAN number\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"profilePhoto\">Profile Photo</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <Input\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={(e) => {\n                        const file = e.target.files?.[0];\n                        if (file) handleFileUpload(file, 'profile_photo');\n                      }}\n                    />\n                    {formData.profilePhoto && (\n                      <span className=\"text-sm text-green-600\">‚úì Uploaded</span>\n                    )}\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"identityCard\">Identity Card (Image/PDF)</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <Input\n                      type=\"file\"\n                      accept=\"image/*,application/pdf\"\n                      onChange={(e) => {\n                        const file = e.target.files?.[0];\n                        if (file) handleFileUpload(file, 'identity_card');\n                      }}\n                    />\n                    {formData.identityCardUrl && (\n                      <span className=\"text-sm text-green-600\">‚úì Uploaded</span>\n                    )}\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"agreementPaper\">Agreement Paper (Image/PDF)</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <Input\n                      type=\"file\"\n                      accept=\"image/*,application/pdf\"\n                      onChange={(e) => {\n                        const file = e.target.files?.[0];\n                        if (file) handleFileUpload(file, 'agreement_paper');\n                      }}\n                    />\n                    {formData.agreementPaperUrl && (\n                      <span className=\"text-sm text-green-600\">‚úì Uploaded</span>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"notes\">Notes</Label>\n                <Textarea\n                  id=\"notes\"\n                  value={formData.notes}\n                  onChange={(e) =>\n                    setFormData({ ...formData, notes: e.target.value })\n                  }\n                  placeholder=\"Additional notes\"\n                />\n              </div>\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={\n                    createMutation.isPending || updateMutation.isPending\n                  }\n                >\n                  {createMutation.isPending || updateMutation.isPending\n                    ? \"Saving...\"\n                    : editingStaff\n                      ? \"Update\"\n                      : \"Create\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Search */}\n      <div className=\"flex items-center space-x-2\">\n        <div className=\"flex-1\">\n          <SearchBar\n            placeholder=\"Search staff members...\"\n            value={searchQuery}\n            onChange={setSearchQuery}\n            className=\"w-full\"\n          />\n        </div>\n      </div>\n\n      {/* Staff Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Staff Members ({sortedData.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n              <p className=\"text-muted-foreground mt-2\">Loading staff...</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <SortableTableHeader\n                      sortKey=\"staffId\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Staff ID\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"firstName\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Name\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"position\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Position\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"department\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Department\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"email\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Contact\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"employmentType\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Employment\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"status\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Status\n                    </SortableTableHeader>\n                    <TableHead>Documents</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sortedData.map((member: any) => (\n                    <TableRow key={member.id}>\n                      <TableCell className=\"font-medium\">\n                        {member.staffId}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-3\">\n                          {member.profilePhoto && (\n                            <img \n                              src={member.profilePhoto} \n                              alt=\"Profile\"\n                              className=\"w-8 h-8 rounded-full object-cover\"\n                            />\n                          )}\n                          <div>\n                            <div className=\"font-medium\">\n                              {member.firstName} {member.lastName}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              Hired:{\" \"}\n                              {new Date(member.hireDate).toLocaleDateString()}\n                            </div>\n                            {member.citizenshipNumber && (\n                              <div className=\"text-xs text-muted-foreground\">\n                                Citizenship: {member.citizenshipNumber}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>{member.position}</TableCell>\n                      <TableCell>{member.department}</TableCell>\n                      <TableCell>\n                        <div className=\"space-y-1\">\n                          {member.email && (\n                            <div className=\"flex items-center text-sm\">\n                              <Mail className=\"h-3 w-3 mr-1\" />\n                              {member.email}\n                            </div>\n                          )}\n                          {member.phone && (\n                            <div className=\"flex items-center text-sm\">\n                              <Phone className=\"h-3 w-3 mr-1\" />\n                              {member.phone}\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">\n                          {member.employmentType?.replace(\"-\", \" \") ||\n                            \"Full Time\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        {getStatusBadge(member.status || \"active\")}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-1\">\n                          {member.identityCardUrl && (\n                            <Badge variant=\"outline\" className=\"text-xs\">ID</Badge>\n                          )}\n                          {member.agreementPaperUrl && (\n                            <Badge variant=\"outline\" className=\"text-xs\">Agreement</Badge>\n                          )}\n                          {member.profilePhoto && (\n                            <Badge variant=\"outline\" className=\"text-xs\">Photo</Badge>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(member)}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <DeleteConfirmationDialog\n                            trigger={\n                              <Button variant=\"ghost\" size=\"sm\">\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            }\n                            title=\"Delete Staff Member\"\n                            itemName={`${member.firstName} ${member.lastName}`}\n                            onConfirm={() => handleDelete(member.id)}\n                            isLoading={deleteMutation.isPending}\n                          />\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":31475},"client/src/pages/stock.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport SearchBar from \"@/components/search-bar\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Plus,\n  Search,\n  Edit,\n  Trash2,\n  Package,\n  AlertTriangle,\n  ChevronDown,\n  ChevronLeft,\n  ChevronRight,\n  RefreshCw,\n  TrendingUp,\n  TrendingDown,\n  Minus,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\nimport { DeleteConfirmationDialog } from \"@/components/ui/delete-confirmation-dialog\";\nimport { useTableSort } from \"@/hooks/useTableSort\";\nimport { SortableTableHeader } from \"@/components/ui/sortable-table-header\";\nimport { EnhancedStockItemForm } from \"@/components/enhanced-stock-item-form\";\n\nexport default function Stock() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingItem, setEditingItem] = useState<any>(null);\n  const [selectedGroup, setSelectedGroup] = useState<string>(\"all\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(10);\n  const { toast } = useToast();\n  const { symbol, formatCurrency } = useCurrency();\n\n  const {\n    data: inventoryData,\n    isLoading,\n    error,\n    refetch,\n  } = useQuery({\n    queryKey: [\n      \"/api/inventory\",\n      currentPage,\n      itemsPerPage,\n      searchQuery,\n      selectedGroup,\n    ],\n    queryFn: () =>\n      apiRequest(\n        \"GET\",\n        `/api/inventory?page=${currentPage}&limit=${itemsPerPage}&search=${encodeURIComponent(searchQuery)}&group=${selectedGroup}`,\n      ),\n    retry: (failureCount, error) => {\n      if (isUnauthorizedError(error)) return false;\n      return failureCount < 3;\n    },\n  });\n\n  const items = inventoryData?.items || [];\n  const totalCount = inventoryData?.totalCount || 0;\n  const totalPages = inventoryData?.totalPages || 0;\n\n  // Fetch ingredients specifically\n  const { data: ingredients = [] } = useQuery({\n    queryKey: [\"/api/ingredients\"],\n    queryFn: () => apiRequest(\"GET\", \"/api/ingredients\"),\n  });\n\n  // Fetch categories for group filter\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/inventory-categories\"],\n    queryFn: () => apiRequest(\"GET\", \"/api/inventory-categories\"),\n  });\n\n  // Add sorting functionality\n  const { sortedData, sortConfig, requestSort } = useTableSort(items, \"name\");\n\n  // Debounced search\n  const [debouncedSearchQuery, setDebouncedSearchQuery] = useState(searchQuery);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedSearchQuery(searchQuery);\n      setCurrentPage(1);\n    }, 300);\n\n    return () => clearTimeout(timer);\n  }, [searchQuery]);\n\n  useEffect(() => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/inventory\"] });\n  }, [debouncedSearchQuery]);\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => apiRequest(\"DELETE\", `/api/inventory/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory/all\"] });\n      toast({\n        title: \"Success\",\n        description: \"Stock item deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete stock item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Sync stock from purchases\n  const syncStockMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/inventory/sync-from-purchases\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory\"] });\n      toast({\n        title: \"Success\",\n        description: \"Stock levels synced with purchases successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to sync stock levels\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  const handleItemsPerPageChange = (value: string) => {\n    setItemsPerPage(parseInt(value));\n    setCurrentPage(1);\n  };\n\n  const getStockBadge = (item: any) => {\n    const closingStock = parseFloat(\n      item.closingStock || item.currentStock || 0,\n    );\n    const minLevel = parseFloat(item.minLevel || 0);\n\n    if (closingStock <= 0) {\n      return {\n        variant: \"destructive\" as const,\n        text: \"Out of Stock\",\n        icon: <AlertTriangle className=\"h-3 w-3\" />,\n      };\n    } else if (closingStock <= minLevel) {\n      return {\n        variant: \"destructive\" as const,\n        text: \"Low Stock\",\n        icon: <TrendingDown className=\"h-3 w-3\" />,\n      };\n    } else if (closingStock <= minLevel * 1.5) {\n      return {\n        variant: \"secondary\" as const,\n        text: \"Warning\",\n        icon: <Minus className=\"h-3 w-3\" />,\n      };\n    }\n    return {\n      variant: \"default\" as const,\n      text: \"In Stock\",\n      icon: <TrendingUp className=\"h-3 w-3\" />,\n    };\n  };\n\n  const getUnitName = (unitId: number, units: any[] = []) => {\n    if (!unitId || !Array.isArray(units)) return \"Unknown Unit\";\n    const unit = units.find((u: any) => u.id === unitId);\n    return unit ? unit.abbreviation || unit.name : \"Unknown Unit\";\n  };\n\n  const getGroupBadge = (group: string) => {\n    const colors = {\n      ingredients: \"bg-green-100 text-green-800\",\n      \"raw-materials\": \"bg-blue-100 text-blue-800\",\n      packaging: \"bg-purple-100 text-purple-800\",\n      spices: \"bg-orange-100 text-orange-800\",\n      dairy: \"bg-yellow-100 text-yellow-800\",\n      flour: \"bg-amber-100 text-amber-800\",\n      sweeteners: \"bg-pink-100 text-pink-800\",\n      supplies: \"bg-gray-100 text-gray-800\",\n    };\n\n    const colorClass =\n      colors[group as keyof typeof colors] || \"bg-gray-100 text-gray-800\";\n\n    return (\n      <Badge variant=\"outline\" className={`capitalize ${colorClass} border-0`}>\n        {group?.replace(\"-\", \" \") || \"Uncategorized\"}\n      </Badge>\n    );\n  };\n\n  if (error && isUnauthorizedError(error)) {\n    toast({\n      title: \"Unauthorized\",\n      description: \"You are logged out. Logging in again...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n    return null;\n  }\n\n  return (\n    <div className=\"p-4 sm:p-6 space-y-6\">\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <p className=\"text-gray-600\">\n            Track opening, purchased, consumed, and closing stock with purchase\n            integration\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={() => syncStockMutation.mutate()}\n            disabled={syncStockMutation.isPending}\n            className=\"w-full sm:w-auto\"\n          >\n            <RefreshCw\n              className={`h-4 w-4 mr-2 ${syncStockMutation.isPending ? \"animate-spin\" : \"\"}`}\n            />\n            Sync from Purchases\n          </Button>\n          <Button\n            onClick={() => {\n              setEditingItem(null);\n              setIsDialogOpen(true);\n            }}\n            className=\"w-full sm:w-auto\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Item\n          </Button>\n        </div>\n\n        <EnhancedStockItemForm\n          isOpen={isDialogOpen}\n          onClose={() => {\n            setIsDialogOpen(false);\n            setEditingItem(null);\n          }}\n          editingItem={editingItem}\n        />\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        <div className=\"flex-1\">\n          <SearchBar\n            placeholder=\"Search items, suppliers, or inventory codes...\"\n            value={searchQuery}\n            onChange={setSearchQuery}\n            className=\"w-full\"\n          />\n        </div>\n        <div className=\"w-full sm:w-48\">\n          <Select value={selectedGroup} onValueChange={setSelectedGroup}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Filter by Group\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Groups</SelectItem>\n              <SelectItem value=\"ingredients\">Ingredients</SelectItem>\n              <SelectItem value=\"raw-materials\">Raw Materials</SelectItem>\n              <SelectItem value=\"packaging\">Packaging</SelectItem>\n              <SelectItem value=\"spices\">Spices</SelectItem>\n              <SelectItem value=\"dairy\">Dairy</SelectItem>\n              <SelectItem value=\"flour\">Flour</SelectItem>\n              <SelectItem value=\"sweeteners\">Sweeteners</SelectItem>\n              <SelectItem value=\"supplies\">Supplies</SelectItem>\n              {categories.map((category: any) => (\n                <SelectItem key={category.id} value={category.id.toString()}>\n                  {category.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Package className=\"h-5 w-5\" />\n              Stock Items ({totalCount} total)\n            </CardTitle>\n            <CardDescription>\n              Opening + Purchased - Consumed = Closing Stock\n            </CardDescription>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <SortableTableHeader\n                      sortKey=\"invCode\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Inv Code\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"name\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Name\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"unit\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Unit\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"openingStock\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Opening Stock\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"purchasedQuantity\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Purchased\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"consumedQuantity\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Consumed\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"closingStock\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Closing Stock\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"group\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                      className=\"hidden md:table-cell\"\n                    >\n                      Group\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"lastRestocked\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                      className=\"hidden lg:table-cell\"\n                    >\n                      Last Updated\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"status\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Status\n                    </SortableTableHeader>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sortedData.map((item: any) => {\n                    const stockInfo = getStockBadge(item);\n                    const openingStock = parseFloat(\n                      item.openingStock || item.currentStock || 0,\n                    );\n                    const purchasedQuantity = parseFloat(\n                      item.purchasedQuantity || 0,\n                    );\n                    const consumedQuantity = parseFloat(\n                      item.consumedQuantity || 0,\n                    );\n                    const closingStock = parseFloat(\n                      item.closingStock || item.currentStock || 0,\n                    );\n\n                    return (\n                      <TableRow key={item.id}>\n                        <TableCell>\n                          <div className=\"font-mono text-sm\">\n                            {item.invCode || item.id}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <div>\n                              <div className=\"font-medium\">{item.name}</div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                {item.supplier || \"No supplier\"}\n                              </div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm\">\n                            <div className=\"font-medium\">\n                              {item.unit || \"pcs\"}\n                            </div>\n                            {item.secondaryUnitId && (\n                              <div className=\"text-xs text-muted-foreground\">\n                                Secondary unit available\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"font-medium text-blue-600\">\n                            {openingStock.toFixed(2)}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"font-medium text-green-600\">\n                            +{purchasedQuantity.toFixed(2)}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"font-medium text-red-600\">\n                            -{consumedQuantity.toFixed(2)}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"font-bold\">\n                            {closingStock.toFixed(2)}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            Min: {parseFloat(item.minLevel || 0).toFixed(2)}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          {getGroupBadge(\n                            item.group || item.categoryName || \"uncategorized\",\n                          )}\n                        </TableCell>\n                        <TableCell className=\"hidden lg:table-cell\">\n                          <div className=\"text-sm\">\n                            {item.lastRestocked\n                              ? new Date(\n                                  item.lastRestocked,\n                                ).toLocaleDateString()\n                              : new Date(item.createdAt).toLocaleDateString()}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {formatCurrency(parseFloat(item.costPerUnit || 0))}{\" \"}\n                            per unit\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge\n                            variant={stockInfo.variant}\n                            className=\"flex items-center gap-1\"\n                          >\n                            {stockInfo.icon}\n                            {stockInfo.text}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-1\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => {\n                                setEditingItem(item);\n                                setIsDialogOpen(true);\n                              }}\n                              className=\"text-blue-600 hover:text-blue-800 focus:outline-none\"\n                              title=\"Edit\"\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <DeleteConfirmationDialog\n                              trigger={\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"text-red-600 hover:text-red-800 focus:outline-none\"\n                                  title=\"Delete\"\n                                >\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              }\n                              title=\"Delete Stock Item\"\n                              itemName={item.name}\n                              onConfirm={() => deleteMutation.mutate(item.id)}\n                              isLoading={deleteMutation.isPending}\n                            />\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n              {sortedData.length === 0 && (\n                <div className=\"text-center py-8\">\n                  <Package className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-muted-foreground mb-2\">\n                    No stock items found\n                  </h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    {searchQuery\n                      ? \"Try adjusting your search criteria\"\n                      : \"Start by adding your first stock item\"}\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Pagination Controls */}\n          {totalPages > 1 && (\n            <div className=\"flex items-center justify-between px-2 py-4\">\n              <div className=\"flex items-center space-x-2\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Showing{\" \"}\n                  {Math.min((currentPage - 1) * itemsPerPage + 1, totalCount)}{\" \"}\n                  to {Math.min(currentPage * itemsPerPage, totalCount)} of{\" \"}\n                  {totalCount} entries\n                </p>\n                <select\n                  value={itemsPerPage}\n                  onChange={(e) => handleItemsPerPageChange(e.target.value)}\n                  className=\"ml-2 h-8 w-16 rounded border border-input bg-background px-2 py-1 text-sm\"\n                >\n                  <option value=\"10\">10</option>\n                  <option value=\"25\">25</option>\n                  <option value=\"50\">50</option>\n                  <option value=\"100\">100</option>\n                </select>\n                <span className=\"text-sm text-muted-foreground\">per page</span>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handlePageChange(currentPage - 1)}\n                  disabled={currentPage <= 1}\n                >\n                  <ChevronLeft className=\"h-4 w-4\" />\n                  Previous\n                </Button>\n\n                <div className=\"flex items-center space-x-1\">\n                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                    const pageNumber = i + 1;\n                    return (\n                      <Button\n                        key={pageNumber}\n                        variant={\n                          currentPage === pageNumber ? \"default\" : \"outline\"\n                        }\n                        size=\"sm\"\n                        onClick={() => handlePageChange(pageNumber)}\n                        className=\"w-8 h-8 p-0\"\n                      >\n                        {pageNumber}\n                      </Button>\n                    );\n                  })}\n                  {totalPages > 5 && (\n                    <>\n                      {currentPage < totalPages - 2 && (\n                        <span className=\"px-2\">...</span>\n                      )}\n                      <Button\n                        variant={\n                          currentPage === totalPages ? \"default\" : \"outline\"\n                        }\n                        size=\"sm\"\n                        onClick={() => handlePageChange(totalPages)}\n                        className=\"w-8 h-8 p-0\"\n                      >\n                        {totalPages}\n                      </Button>\n                    </>\n                  )}\n                </div>\n\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handlePageChange(currentPage + 1)}\n                  disabled={currentPage >= totalPages}\n                >\n                  Next\n                  <ChevronRight className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":23898},"client/src/pages/transactions.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport SearchBar from \"@/components/search-bar\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Search, Filter, Download, Eye, Calendar } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\nimport { format } from \"date-fns\";\n\n// Assume useTableSort and usePagination are custom hooks providing sorting and pagination logic\n// Example stubs:\nconst useTableSort = (data: any[], defaultSortColumn: string) => {\n  const [sortConfig, setSortConfig] = useState({\n    key: defaultSortColumn,\n    direction: \"ascending\",\n  });\n\n  const sortedData = useMemo(() => {\n    let sortableItems = [...data];\n    if (sortConfig.key !== null) {\n      sortableItems.sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === \"ascending\" ? -1 : 1;\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === \"ascending\" ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n    return sortableItems;\n  }, [data, sortConfig]);\n\n  const requestSort = (key: string) => {\n    let direction = \"ascending\";\n    if (sortConfig.key === key && sortConfig.direction === \"ascending\") {\n      direction = \"descending\";\n    }\n    setSortConfig({ key, direction });\n  };\n\n  return { sortedData, sortConfig, requestSort };\n};\n\nconst usePagination = (data: any[], initialPageSize: number) => {\n  const [pageSize, setPageSize] = useState(initialPageSize);\n  const [currentPage, setCurrentPage] = useState(1);\n  const totalItems = data.length;\n  const totalPages = Math.ceil(totalItems / pageSize);\n\n  const currentItems = useMemo(() => {\n    const startIndex = (currentPage - 1) * pageSize;\n    const endIndex = startIndex + pageSize;\n    return data.slice(startIndex, endIndex);\n  }, [data, currentPage, pageSize]);\n\n  const goToPage = (page: number) => {\n    if (page >= 1 && page <= totalPages) {\n      setCurrentPage(page);\n    }\n  };\n\n  return {\n    currentItems,\n    currentPage,\n    totalPages,\n    pageSize,\n    setPageSize,\n    goToPage,\n    totalItems,\n  };\n};\n\n// Assume SortableTableHeader, PaginationInfo, PageSizeSelector, Pagination are UI components\nconst SortableTableHeader = ({\n  children,\n  sortKey,\n  sortConfig,\n  onSort,\n  className,\n}: any) => {\n  const isSorted = sortConfig.key === sortKey;\n  const icon =\n    sortConfig.key === sortKey\n      ? sortConfig.direction === \"ascending\"\n        ? \" ‚ñ≤\"\n        : \" ‚ñº\"\n      : \"\";\n  return (\n    <TableHead className={className}>\n      <Button\n        variant=\"ghost\"\n        className=\"p-0 h-auto\"\n        onClick={() => onSort(sortKey)}\n      >\n        {children}\n        {isSorted && <span className=\"ml-1\">{icon}</span>}\n      </Button>\n    </TableHead>\n  );\n};\n\nconst PaginationInfo = ({ currentPage, totalPages, totalItems }: any) => (\n  <div className=\"text-sm text-muted-foreground\">\n    Page {currentPage} of {totalPages} ({totalItems} items)\n  </div>\n);\n\nconst PageSizeSelector = ({ pageSize, onPageSizeChange, options }: any) => (\n  <Select value={pageSize.toString()} onValueChange={(val) => onPageSizeChange(parseInt(val))}>\n    <SelectTrigger className=\"w-[100px]\">\n      <SelectValue placeholder=\"Page Size\" />\n    </SelectTrigger>\n    <SelectContent>\n      {options.map((size: number) => (\n        <SelectItem key={size} value={size.toString()}>\n          Show {size}\n        </SelectItem>\n      ))}\n    </SelectContent>\n  </Select>\n);\n\nconst Pagination = ({ currentPage, totalPages, onPageChange }: any) => (\n  <div className=\"flex items-center gap-2\">\n    <Button\n      variant=\"outline\"\n      size=\"sm\"\n      onClick={() => onPageChange(currentPage - 1)}\n      disabled={currentPage === 1}\n    >\n      Previous\n    </Button>\n    <Button\n      variant=\"outline\"\n      size=\"sm\"\n      onClick={() => onPageChange(currentPage + 1)}\n      disabled={currentPage === totalPages}\n    >\n      Next\n    </Button>\n  </div>\n);\n\ninterface Transaction {\n  id: string;\n  entryDate: string;\n  txnDate: string;\n  txnNo: string;\n  particular: string;\n  txnType: string;\n  parties: string;\n  pmtMode: string;\n  amount: number;\n  status: string;\n  entryBy: string;\n  category: string;\n}\n\nexport default function Transactions() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [dateRange, setDateRange] = useState(\"30\");\n  const { toast } = useToast();\n  const { formatCurrency } = useCurrency();\n\n  // Fetch all data sources\n  const { data: orders = [] } = useQuery({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const { data: sales = [] } = useQuery({\n    queryKey: [\"/api/sales\"],\n  });\n\n  const { data: purchases = [] } = useQuery({\n    queryKey: [\"/api/purchases\"],\n  });\n\n  const { data: expenses = [] } = useQuery({\n    queryKey: [\"/api/expenses\"],\n  });\n\n  // Combine all transactions\n  const allTransactions = useMemo(() => {\n    const transactions: Transaction[] = [];\n    let counter = 1;\n\n    // Add sales transactions\n    sales.forEach((sale: any) => {\n      transactions.push({\n        id: `S-${sale.id}`,\n        entryDate: format(new Date(sale.createdAt), \"yyyy-MM-dd\"),\n        txnDate: format(\n          new Date(sale.saleDate || sale.createdAt),\n          \"yyyy-MM-dd\",\n        ),\n        txnNo: `INV-${sale.id}`,\n        particular: sale.customerName || \"Walk-in Customer\",\n        txnType: \"Sales\",\n        parties: sale.customerName || \"-\",\n        pmtMode: sale.paymentMethod || \"Cash\",\n        amount: parseFloat(sale.totalAmount),\n        status: \"Paid\",\n        entryBy: sale.createdBy || \"System\",\n        category: \"Income\",\n      });\n    });\n\n    // Add purchase transactions\n    purchases.forEach((purchase: any) => {\n      transactions.push({\n        id: `P-${purchase.id}`,\n        entryDate: format(new Date(purchase.createdAt), \"yyyy-MM-dd\"),\n        txnDate: format(\n          new Date(purchase.purchaseDate || purchase.createdAt),\n          \"yyyy-MM-dd\",\n        ),\n        txnNo: `PUR-${purchase.id}`,\n        particular: purchase.supplierName || \"Supplier\",\n        txnType: \"Purchase\",\n        parties: purchase.supplierName || \"-\",\n        pmtMode: purchase.paymentMethod || \"Cash\",\n        amount: parseFloat(purchase.totalAmount),\n        status: purchase.status === \"completed\" ? \"Paid\" : \"Pending\",\n        entryBy: purchase.createdBy || \"System\",\n        category: \"Expense\",\n      });\n    });\n\n    // Add order transactions (as income when completed)\n    orders.forEach((order: any) => {\n      if (order.status === \"completed\") {\n        transactions.push({\n          id: `O-${order.id}`,\n          entryDate: format(new Date(order.createdAt), \"yyyy-MM-dd\"),\n          txnDate: format(\n            new Date(order.orderDate || order.createdAt),\n            \"yyyy-MM-dd\",\n          ),\n          txnNo: `ORD-${order.id}`,\n          particular: order.customerName,\n          txnType: \"Sales\",\n          parties: order.customerName || \"-\",\n          pmtMode: \"Cash\",\n          amount: parseFloat(order.totalAmount),\n          status: \"Paid\",\n          entryBy: order.createdBy || \"System\",\n          category: \"Income\",\n        });\n      }\n    });\n\n    // Add expense transactions\n    expenses.forEach((expense: any) => {\n      transactions.push({\n        id: `E-${expense.id}`,\n        entryDate: format(new Date(expense.createdAt), \"yyyy-MM-dd\"),\n        txnDate: format(\n          new Date(expense.date || expense.createdAt),\n          \"yyyy-MM-dd\",\n        ),\n        txnNo: `EXP-${expense.id}`,\n        particular: expense.description || expense.category,\n        txnType: \"Expense\",\n        parties: expense.vendor || \"-\",\n        pmtMode: expense.paymentMethod || \"Cash\",\n        amount: parseFloat(expense.amount),\n        status: \"Paid\",\n        entryBy: expense.createdBy || \"System\",\n        category: \"Expense\",\n      });\n    });\n\n    // Sort by date (newest first)\n    return transactions.sort(\n      (a, b) => new Date(b.txnDate).getTime() - new Date(a.txnDate).getTime(),\n    );\n  }, [orders, sales, purchases, expenses]);\n\n  // Filter transactions\n  const filteredTransactions = useMemo(() => {\n    let filtered = allTransactions;\n\n    // Date range filter\n    if (dateRange !== \"all\") {\n      const days = parseInt(dateRange);\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - days);\n      filtered = filtered.filter((txn) => new Date(txn.txnDate) >= cutoffDate);\n    }\n\n    // Search filter\n    if (searchTerm) {\n      filtered = filtered.filter(\n        (txn) =>\n          txn.particular.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          txn.txnNo.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          txn.parties.toLowerCase().includes(searchTerm.toLowerCase()),\n      );\n    }\n\n    // Type filter\n    if (typeFilter !== \"all\") {\n      filtered = filtered.filter(\n        (txn) => txn.txnType.toLowerCase() === typeFilter.toLowerCase(),\n      );\n    }\n\n    // Status filter\n    if (statusFilter !== \"all\") {\n      filtered = filtered.filter(\n        (txn) => txn.status.toLowerCase() === statusFilter.toLowerCase(),\n      );\n    }\n\n    return filtered;\n  }, [allTransactions, searchTerm, typeFilter, statusFilter, dateRange]);\n\n  // Add sorting functionality\n  const { sortedData, sortConfig, requestSort } = useTableSort(\n    allTransactions,\n    \"txnDate\",\n  );\n\n  // Add pagination functionality\n  const {\n    currentItems,\n    currentPage,\n    totalPages,\n    pageSize,\n    setPageSize,\n    goToPage,\n    totalItems,\n  } = usePagination(sortedData, 15);\n\n  // Calculate summary stats\n  const stats = useMemo(() => {\n    const sales = filteredTransactions\n      .filter((t) => t.category === \"Income\")\n      .reduce((sum, t) => sum + t.amount, 0);\n    const purchases = filteredTransactions\n      .filter((t) => t.txnType === \"Purchase\")\n      .reduce((sum, t) => sum + t.amount, 0);\n    const income = filteredTransactions\n      .filter((t) => t.category === \"Income\")\n      .reduce((sum, t) => sum + t.amount, 0);\n    const expenses = filteredTransactions\n      .filter((t) => t.category === \"Expense\")\n      .reduce((sum, t) => sum + t.amount, 0);\n    const paymentIn = filteredTransactions\n      .filter((t) => t.category === \"Income\")\n      .reduce((sum, t) => sum + t.amount, 0);\n    const paymentOut = filteredTransactions\n      .filter((t) => t.category === \"Expense\")\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    return { sales, purchases, income, expenses, paymentIn, paymentOut };\n  }, [filteredTransactions]);\n\n  const exportTransactions = () => {\n    const csvContent = [\n      [\n        \"SN\",\n        \"Entry Date\",\n        \"TXN Date\",\n        \"TXN No\",\n        \"Particular\",\n        \"TXN Type\",\n        \"Parties\",\n        \"PMT Mode\",\n        \"Amount\",\n        \"Status\",\n        \"Entry By\",\n      ].join(\",\"),\n      ...filteredTransactions.map((txn, index) =>\n        [\n          index + 1,\n          txn.entryDate,\n          txn.txnDate,\n          txn.txnNo,\n          txn.particular,\n          txn.txnType,\n          txn.parties,\n          txn.pmtMode,\n          txn.amount,\n          txn.status,\n          txn.entryBy,\n        ].join(\",\"),\n      ),\n    ].join(\"\\n\");\n\n    const blob = new Blob([csvContent], { type: \"text/csv\" });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `transactions-${format(new Date(), \"yyyy-MM-dd\")}.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n\n    toast({\n      title: \"Export Successful\",\n      description: \"Transactions exported to CSV file\",\n    });\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <p className=\"text-gray-600\">\n            All financial transactions in one place\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button onClick={exportTransactions} variant=\"outline\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </Button>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-2 md:grid-cols-6 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-sm font-medium text-muted-foreground\">\n              Sales\n            </div>\n            <div className=\"text-lg font-bold text-green-600\">\n              {formatCurrency(stats.sales)}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-sm font-medium text-muted-foreground\">\n              Purchase\n            </div>\n            <div className=\"text-lg font-bold text-red-600\">\n              {formatCurrency(stats.purchases)}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-sm font-medium text-muted-foreground\">\n              Income\n            </div>\n            <div className=\"text-lg font-bold text-green-600\">\n              {formatCurrency(stats.income)}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-sm font-medium text-muted-foreground\">\n              Expense\n            </div>\n            <div className=\"text-lg font-bold text-red-600\">\n              {formatCurrency(stats.expenses)}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-sm font-medium text-muted-foreground\">\n              Payment In\n            </div>\n            <div className=\"text-lg font-bold text-green-600\">\n              {formatCurrency(stats.paymentIn)}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-sm font-medium text-muted-foreground\">\n              Payment Out\n            </div>\n            <div className=\"text-lg font-bold text-red-600\">\n              {formatCurrency(stats.paymentOut)}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <SearchBar\n                placeholder=\"Search transactions...\"\n                value={searchTerm}\n                onChange={setSearchTerm}\n                className=\"w-full\"\n              />\n            </div>\n            <Select value={typeFilter} onValueChange={setTypeFilter}>\n              <SelectTrigger className=\"w-[150px]\">\n                <SelectValue placeholder=\"Transaction Type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"sales\">Sales</SelectItem>\n                <SelectItem value=\"purchase\">Purchase</SelectItem>\n                <SelectItem value=\"expense\">Expense</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-[130px]\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"paid\">Paid</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={dateRange} onValueChange={setDateRange}>\n              <SelectTrigger className=\"w-[130px]\">\n                <SelectValue placeholder=\"Date Range\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"7\">Last 7 days</SelectItem>\n                <SelectItem value=\"30\">Last 30 days</SelectItem>\n                <SelectItem value=\"90\">Last 90 days</SelectItem>\n                <SelectItem value=\"all\">All time</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Transactions Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>Transaction History</span>\n            <Badge variant=\"secondary\">\n              {filteredTransactions.length} transactions\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"w-12\">SN</TableHead>\n                  <SortableTableHeader\n                    sortKey=\"txnDate\"\n                    sortConfig={sortConfig}\n                    onSort={requestSort}\n                  >\n                    TXN Date\n                  </SortableTableHeader>\n                  <SortableTableHeader\n                    sortKey=\"txnNo\"\n                    sortConfig={sortConfig}\n                    onSort={requestSort}\n                  >\n                    TXN No\n                  </SortableTableHeader>\n                  <SortableTableHeader\n                    sortKey=\"particular\"\n                    sortConfig={sortConfig}\n                    onSort={requestSort}\n                  >\n                    Particular\n                  </SortableTableHeader>\n                  <SortableTableHeader\n                    sortKey=\"txnType\"\n                    sortConfig={sortConfig}\n                    onSort={requestSort}\n                  >\n                    TXN Type\n                  </SortableTableHeader>\n                  <SortableTableHeader\n                    sortKey=\"parties\"\n                    sortConfig={sortConfig}\n                    onSort={requestSort}\n                  >\n                    Parties\n                  </SortableTableHeader>\n                  <SortableTableHeader\n                    sortKey=\"pmtMode\"\n                    sortConfig={sortConfig}\n                    onSort={requestSort}\n                  >\n                    PMT Mode\n                  </SortableTableHeader>\n                  <SortableTableHeader\n                    sortKey=\"amount\"\n                    sortConfig={sortConfig}\n                    onSort={requestSort}\n                    className=\"text-right\"\n                  >\n                    Amount\n                  </SortableTableHeader>\n                  <SortableTableHeader\n                    sortKey=\"status\"\n                    sortConfig={sortConfig}\n                    onSort={requestSort}\n                  >\n                    Status\n                  </SortableTableHeader>\n                  <TableHead>Entry By</TableHead>\n                  <TableHead className=\"w-12\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {currentItems.length > 0 ? (\n                  currentItems.map((transaction, index) => (\n                    <TableRow key={transaction.id}>\n                      <TableCell className=\"font-medium\">\n                        {index + 1}\n                      </TableCell>\n\n                      <TableCell>{transaction.txnDate}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\" className=\"font-mono text-xs\">\n                          {transaction.txnNo}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"font-medium\">\n                        {transaction.particular}\n                      </TableCell>\n                      <TableCell>\n                        <Badge\n                          variant={\n                            transaction.txnType === \"Sales\"\n                              ? \"default\"\n                              : transaction.txnType === \"Purchase\"\n                                ? \"secondary\"\n                                : \"destructive\"\n                          }\n                        >\n                          {transaction.txnType}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>{transaction.parties}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">{transaction.pmtMode}</Badge>\n                      </TableCell>\n                      <TableCell className=\"text-right font-medium\">\n                        <span\n                          className={\n                            transaction.category === \"Income\"\n                              ? \"text-green-600\"\n                              : \"text-red-600\"\n                          }\n                        >\n                          {formatCurrency(transaction.amount)}\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        <Badge\n                          variant={\n                            transaction.status === \"Paid\" ? \"default\" : \"secondary\"\n                          }\n                          className={\n                            transaction.status === \"Paid\"\n                              ? \"bg-green-100 text-green-800\"\n                              : \"bg-yellow-100 text-yellow-800\"\n                          }\n                        >\n                          {transaction.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-1\">\n                          <div className=\"w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center\">\n                            <span className=\"text-xs text-blue-600 font-medium\">\n                              {transaction.entryBy.charAt(0).toUpperCase()}\n                            </span>\n                          </div>\n                          <span className=\"text-sm\">{transaction.entryBy}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={11} className=\"text-center py-8\">\n                      <Calendar className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                      <p>No transactions found matching your criteria</p>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n\n          {/* Pagination Controls */}\n          {allTransactions.length > 0 && (\n            <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 mt-4\">\n              <PaginationInfo\n                currentPage={currentPage}\n                totalPages={totalPages}\n                totalItems={totalItems}\n              />\n              <div className=\"flex items-center gap-4\">\n                <PageSizeSelector\n                  pageSize={pageSize}\n                  onPageSizeChange={setPageSize}\n                  options={[10, 15, 25, 50]}\n                />\n                <Pagination\n                  currentPage={currentPage}\n                  totalPages={totalPages}\n                  onPageChange={goToPage}\n                />\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":24364},"client/src/pages/units.tsx":{"content":"import React, { useState, useMemo } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useUnits } from \"@/hooks/useUnits\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport SearchBar from \"@/components/search-bar\";\nimport { useTableSort } from \"@/hooks/useTableSort\";\nimport { SortableTableHeader } from \"@/components/ui/sortable-table-header\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Search, Edit, Trash2, Ruler } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { DeleteConfirmationDialog } from \"@/components/ui/delete-confirmation-dialog\";\n\nexport default function Units() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingUnit, setEditingUnit] = useState<any>(null);\n  const { toast } = useToast();\n\n  // Fetch units using the custom hook\n  const {\n    data: units = [],\n    isLoading,\n    error,\n    refetch: refetchUnits,\n  } = useUnits();\n\n  // Debug: Log actual data\n  console.log(\"Units data in component:\", units);\n  console.log(\"Is units array?\", Array.isArray(units));\n  console.log(\"Loading:\", isLoading, \"Error:\", error);\n\n  // units is now guaranteed to be an array from useUnits hook\n  const unitsArray = units;\n\n  // Filter units by search query\n  const filteredUnits = useMemo(() => {\n    if (!searchQuery.trim()) return unitsArray;\n\n    return unitsArray.filter(\n      (unit: any) =>\n        unit.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        unit.abbreviation?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        unit.type?.toLowerCase().includes(searchQuery.toLowerCase()),\n    );\n  }, [unitsArray, searchQuery]);\n\n  // Sort the filtered units\n  const { sortedData, sortConfig, requestSort } = useTableSort(\n    filteredUnits,\n    \"name\",\n  );\n\n  // Debug sorting\n  console.log(\"Filtered units count:\", filteredUnits.length);\n  console.log(\"Sorted data count:\", sortedData.length);\n  console.log(\"Current sort config:\", sortConfig);\n\n  // Mutation hooks\n  const createMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/units\", data),\n    onSuccess: (data) => {\n      setIsDialogOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"units\"] });\n      toast({\n        title: \"Success\",\n        description: `Unit \"${data.name}\" created successfully`,\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Session expired. Redirecting to login...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => (window.location.href = \"/api/login\"), 500);\n        return;\n      }\n      const message =\n        error?.response?.data?.message ||\n        error?.message ||\n        \"Failed to create unit\";\n      toast({\n        title: \"Error\",\n        description: message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: { id: number; values: any }) =>\n      apiRequest(\"PUT\", `/api/units/${data.id}`, data.values),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"units\"] });\n      setIsDialogOpen(false);\n      setEditingUnit(null);\n      toast({\n        title: \"Success\",\n        description: \"Unit updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Session expired. Redirecting to login...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => (window.location.href = \"/api/login\"), 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update unit\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => apiRequest(\"DELETE\", `/api/units/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"units\"] });\n      toast({\n        title: \"Success\",\n        description: \"Unit deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Session expired. Redirecting to login...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => (window.location.href = \"/api/login\"), 500);\n        return;\n      }\n      \n      const errorMessage = error?.response?.data?.message || error?.message || \"Failed to delete unit\";\n      const isConstraintError = error?.response?.data?.type === \"FOREIGN_KEY_CONSTRAINT\";\n      \n      toast({\n        title: isConstraintError ? \"Cannot Delete Unit\" : \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleActiveMutation = useMutation({\n    mutationFn: (data: { id: number; isActive: boolean }) =>\n      apiRequest(\"PUT\", `/api/units/${data.id}`, { isActive: data.isActive }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"units\"] });\n      toast({\n        title: \"Success\",\n        description: \"Unit status updated\",\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Session expired. Redirecting to login...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => (window.location.href = \"/api/login\"), 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle form submission\n  const handleSave = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const name = formData.get(\"name\") as string;\n    const abbreviation = formData.get(\"abbreviation\") as string;\n    const type = formData.get(\"type\") as string;\n\n    if (!name?.trim() || !abbreviation?.trim() || !type?.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Name, abbreviation, and type are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const unitData = {\n      name: name.trim(),\n      abbreviation: abbreviation.trim(),\n      type: type.trim(),\n      baseUnit: (formData.get(\"baseUnit\") as string)?.trim() || null,\n      conversionFactor:\n        parseFloat(formData.get(\"conversionFactor\") as string) || 1,\n      isActive: true,\n    };\n\n    if (editingUnit) {\n      updateMutation.mutate({ id: editingUnit.id, values: unitData });\n    } else {\n      createMutation.mutate(unitData);\n    }\n  };\n\n  // Badge type helper\n  const getTypeBadge = (type: string) => {\n    switch (type?.toLowerCase()) {\n      case \"weight\":\n        return {\n          variant: \"default\",\n          text: \"Weight\",\n          color: \"bg-blue-100 text-blue-800\",\n        };\n      case \"volume\":\n        return {\n          variant: \"secondary\",\n          text: \"Volume\",\n          color: \"bg-green-100 text-green-800\",\n        };\n      case \"count\":\n        return {\n          variant: \"outline\",\n          text: \"Count\",\n          color: \"bg-gray-100 text-gray-800\",\n        };\n      case \"length\":\n        return {\n          variant: \"outline\",\n          text: \"Length\",\n          color: \"bg-purple-100 text-purple-800\",\n        };\n      case \"area\":\n        return {\n          variant: \"outline\",\n          text: \"Area\",\n          color: \"bg-yellow-100 text-yellow-800\",\n        };\n      case \"temperature\":\n        return {\n          variant: \"outline\",\n          text: \"Temperature\",\n          color: \"bg-red-100 text-red-800\",\n        };\n      default:\n        return {\n          variant: \"outline\",\n          text: type || \"Unknown\",\n          color: \"bg-gray-100 text-gray-800\",\n        };\n    }\n  };\n\n  // Unauthorized redirect\n  if (error && isUnauthorizedError(error)) {\n    toast({\n      title: \"Session Expired\",\n      description: \"Redirecting to login...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => (window.location.href = \"/api/login\"), 500);\n    return null;\n  }\n\n  return (\n    <div className=\"p-4 sm:p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <h2 className=\"text-xl font-semibold\">Units of Measurement</h2>\n          <p className=\"text-gray-600\">\n            Manage units for inventory and products\n          </p>\n        </div>\n        <Dialog\n          open={isDialogOpen}\n          onOpenChange={(open) => {\n            setIsDialogOpen(open);\n            if (!open) {\n              setEditingUnit(null);\n            }\n          }}\n        >\n          <DialogTrigger asChild>\n            <Button\n              onClick={() => setEditingUnit(null)}\n              className=\"w-full sm:w-auto\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Unit\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md mx-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingUnit ? \"Edit Unit\" : \"Add New Unit\"}\n              </DialogTitle>\n              <DialogDescription>Enter unit details below</DialogDescription>\n            </DialogHeader>\n            <form\n              onSubmit={handleSave}\n              key={editingUnit?.id || \"new\"}\n              className=\"space-y-4\"\n            >\n              <div>\n                <Label htmlFor=\"name\">Unit Name</Label>\n                <Input\n                  id=\"name\"\n                  name=\"name\"\n                  placeholder=\"e.g., Kilogram, Liter\"\n                  defaultValue={editingUnit?.name || \"\"}\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"abbreviation\">Abbreviation</Label>\n                <Input\n                  id=\"abbreviation\"\n                  name=\"abbreviation\"\n                  placeholder=\"e.g., kg, ltr\"\n                  defaultValue={editingUnit?.abbreviation || \"\"}\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"type\">Unit Type</Label>\n                <Select\n                  name=\"type\"\n                  defaultValue={editingUnit?.type || \"\"}\n                  required\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"weight\">Weight</SelectItem>\n                    <SelectItem value=\"volume\">Volume</SelectItem>\n                    <SelectItem value=\"count\">Count</SelectItem>\n                    <SelectItem value=\"length\">Length</SelectItem>\n                    <SelectItem value=\"area\">Area</SelectItem>\n                    <SelectItem value=\"temperature\">Temperature</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={createMutation.isPending || updateMutation.isPending}\n              >\n                {createMutation.isPending || updateMutation.isPending\n                  ? \"Saving...\"\n                  : editingUnit\n                    ? \"Update Unit\"\n                    : \"Add Unit\"}\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Search */}\n      <div className=\"flex items-center space-x-2\">\n        <div className=\"flex-1\">\n          <SearchBar\n            placeholder=\"Search units by name, abbr, or type...\"\n            value={searchQuery}\n            onChange={setSearchQuery}\n            className=\"w-full\"\n          />\n        </div>\n      </div>\n\n      {/* Table */}\n      <Card>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n              <p className=\"text-muted-foreground mt-2\">Loading units...</p>\n            </div>\n          ) : error ? (\n            <div className=\"text-center py-8\">\n              <h3 className=\"text-lg font-semibold text-red-600 mb-2\">\n                Error Loading Units\n              </h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {error instanceof Error ? error.message : \"Unknown error\"}\n              </p>\n              <Button onClick={refetchUnits}>Retry</Button>\n            </div>\n          ) : (\n            <>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <SortableTableHeader\n                      sortKey=\"name\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Name\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"abbreviation\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Abbreviation\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"type\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Type\n                    </SortableTableHeader>\n                    <SortableTableHeader\n                      sortKey=\"isActive\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    >\n                      Status\n                    </SortableTableHeader>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sortedData.length > 0 ? (\n                    sortedData.map((unit: any) => {\n                      const typeBadge = getTypeBadge(unit.type);\n                      return (\n                        <TableRow key={unit.id}>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                                <Ruler className=\"h-4 w-4 text-primary\" />\n                              </div>\n                              <div className=\"font-medium\">{unit.name}</div>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <code className=\"px-2 py-1 bg-gray-100 rounded text-sm\">\n                              {unit.abbreviation}\n                            </code>\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={typeBadge.variant}>\n                              {typeBadge.text}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <Badge\n                              variant={unit.isActive ? \"default\" : \"secondary\"}\n                            >\n                              {unit.isActive ? \"Active\" : \"Inactive\"}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setEditingUnit(unit);\n                                  setIsDialogOpen(true);\n                                }}\n                                title=\"Edit\"\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                variant={\n                                  unit.isActive ? \"destructive\" : \"default\"\n                                }\n                                size=\"sm\"\n                                onClick={() =>\n                                  toggleActiveMutation.mutate({\n                                    id: unit.id,\n                                    isActive: !unit.isActive,\n                                  })\n                                }\n                              >\n                                {unit.isActive ? \"Deactivate\" : \"Activate\"}\n                              </Button>\n                              <DeleteConfirmationDialog\n                                trigger={\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    title=\"Delete\"\n                                  >\n                                    <Trash2 className=\"h-4 w-4\" />\n                                  </Button>\n                                }\n                                title=\"Delete Unit\"\n                                itemName={unit.name}\n                                onConfirm={() => deleteMutation.mutate(unit.id)}\n                                isLoading={deleteMutation.isPending}\n                              />\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })\n                  ) : (\n                    <TableRow>\n                      <TableCell colSpan={5} className=\"h-24 text-center\">\n                        <Ruler className=\"h-12 w-12 text-muted-foreground mx-auto mb-2 opacity-50\" />\n                        <p className=\"text-muted-foreground\">\n                          {searchQuery\n                            ? \"No matching units found. Try a different search.\"\n                            : \"No units available. Add your first unit.\"}\n                        </p>\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":19215},"client/src/public/sw.js":{"content":"// Service Worker for Push Notifications\nconst CACHE_NAME = 'bakery-notifications-v1';\n\n// Install event\nself.addEventListener('install', (event) => {\n  console.log('Service Worker installed');\n  self.skipWaiting();\n});\n\n// Activate event\nself.addEventListener('activate', (event) => {\n  console.log('Service Worker activated');\n  event.waitUntil(self.clients.claim());\n});\n\n// Push event\nself.addEventListener('push', (event) => {\n  console.log('Push received:', event);\n  \n  if (!event.data) {\n    console.log('No push data');\n    return;\n  }\n\n  const data = event.data.json();\n  const options = {\n    body: data.body,\n    icon: '/favicon.ico',\n    badge: '/favicon.ico',\n    vibrate: [100, 50, 100],\n    data: {\n      dateOfArrival: Date.now(),\n      primaryKey: data.id || 1,\n      url: data.url || '/'\n    },\n    actions: [\n      {\n        action: 'view',\n        title: 'View',\n        icon: '/favicon.ico'\n      },\n      {\n        action: 'close',\n        title: 'Close',\n        icon: '/favicon.ico'\n      }\n    ]\n  };\n\n  event.waitUntil(\n    self.registration.showNotification(data.title, options)\n  );\n});\n\n// Notification click event\nself.addEventListener('notificationclick', (event) => {\n  console.log('Notification clicked:', event);\n  event.notification.close();\n\n  if (event.action === 'close') {\n    return;\n  }\n\n  const url = event.notification.data.url || '/';\n  \n  event.waitUntil(\n    self.clients.matchAll({\n      type: 'window',\n      includeUncontrolled: true\n    }).then((clients) => {\n      // Check if there's already a window/tab open with the target URL\n      for (const client of clients) {\n        if (client.url === url && 'focus' in client) {\n          return client.focus();\n        }\n      }\n      \n      // If not, open a new window/tab\n      if (self.clients.openWindow) {\n        return self.clients.openWindow(url);\n      }\n    })\n  );\n});","size_bytes":1878},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\";\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nconst AlertDialog = AlertDialogPrimitive.Root;\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger;\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal;\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className,\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"bg-white  fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border  p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className,\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n));\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className,\n    )}\n    {...props}\n  />\n);\nAlertDialogHeader.displayName = \"AlertDialogHeader\";\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className,\n    )}\n    {...props}\n  />\n);\nAlertDialogFooter.displayName = \"AlertDialogFooter\";\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n));\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName;\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n));\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className,\n    )}\n    {...props}\n  />\n));\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n};\n","size_bytes":4446},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-white text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n));\nAlert.displayName = \"Alert\";\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nAlertTitle.displayName = \"AlertTitle\";\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n));\nAlertDescription.displayName = \"AlertDescription\";\n\nexport { Alert, AlertTitle, AlertDescription };\n","size_bytes":1591},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"\"use client\";\n\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\n\n// Define button variants using `cva`\nexport const buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-gradient-to-r from-orange-400 via-orange-500 to-orange-600 text-white shadow-sm hover:shadow focus:ring-orange-300/50 hover:from-orange-500 hover:to-orange-600\",\n        outline:\n          \"border border-gray-300 bg-white text-gray-700 shadow-sm hover:bg-gray-50 hover:border-gray-400 focus:ring-blue-500/30 disabled:bg-white disabled:text-gray-400\",\n        secondary:\n          \"bg-gray-100 text-gray-800 hover:bg-gray-200 focus:ring-gray-300/50 disabled:bg-gray-100\",\n        ghost:\n          \"hover:bg-gray-100 hover:text-gray-900 focus:ring-gray-300/50 disabled:text-gray-400\",\n        link: \"text-blue-600 underline-offset-4 hover:underline focus:ring-0 focus:underline disabled:text-blue-400\",\n      },\n      size: {\n        default: \"h-10 px-6 py-2 rounded-lg\",\n        sm: \"h-8 px-3 rounded-md text-xs\",\n        lg: \"h-12 px-8 rounded-xl text-base font-semibold\",\n        icon: \"h-10 w-10 rounded-lg p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\n// Button component props\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\n// Main Button component\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button };\n","size_bytes":2213},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className,\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className,\n    )}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n};\n","size_bytes":1888},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\";\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\";\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nconst Collapsible = CollapsiblePrimitive.Root;\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;\n\nconst CollapsibleContent = React.forwardRef<\n  React.ElementRef<typeof CollapsiblePrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <CollapsiblePrimitive.Content\n    ref={ref}\n    className={cn(\n      \"overflow-hidden\",\n      \"data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\",\n      \"transition-all duration-300 ease-out\",\n      className,\n    )}\n    {...props}\n  >\n    <div className=\"pb-2 pt-1 space-y-1\">{children}</div>\n  </CollapsiblePrimitive.Content>\n));\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent };\n","size_bytes":914},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/delete-confirmation-dialog.tsx":{"content":"import { AlertTriangle } from \"lucide-react\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\n\ninterface DeleteConfirmationDialogProps {\n  trigger: React.ReactNode;\n  title?: string;\n  description?: string;\n  itemName?: string;\n  onConfirm: () => void;\n  isLoading?: boolean;\n}\n\nexport function DeleteConfirmationDialog({\n  trigger,\n  title = \"Are you absolutely sure?\",\n  description,\n  itemName,\n  onConfirm,\n  isLoading = false,\n}: DeleteConfirmationDialogProps) {\n  const defaultDescription = itemName\n    ? `This action cannot be undone. This will permanently delete \"${itemName}\" and remove all associated data from our servers.`\n    : \"This action cannot be undone. This will permanently delete this item and remove all associated data from our servers.\";\n\n  return (\n    <AlertDialog>\n      <AlertDialogTrigger asChild>{trigger}</AlertDialogTrigger>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <div className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"h-5 w-5 text-destructive\" />\n            <AlertDialogTitle>{title}</AlertDialogTitle>\n          </div>\n          <AlertDialogDescription>\n            {description || defaultDescription}\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={isLoading}>Cancel</AlertDialogCancel>\n          <AlertDialogAction\n            onClick={onConfirm}\n            disabled={isLoading}\n            className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n          >\n            {isLoading ? \"Deleting...\" : \"Delete\"}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n","size_bytes":1910},"client/src/components/ui/dialog.tsx":{"content":"\"use client\";\n\nimport * as React from \"react\";\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { X } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Dialog = DialogPrimitive.Root;\n\nconst DialogTrigger = DialogPrimitive.Trigger;\n\nconst DialogPortal = DialogPrimitive.Portal;\n\nconst DialogClose = DialogPrimitive.Close;\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className,\n    )}\n    {...props}\n  />\n));\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-white p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n));\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className,\n    )}\n    {...props}\n  />\n);\nDialogHeader.displayName = \"DialogHeader\";\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className,\n    )}\n    {...props}\n  />\n);\nDialogFooter.displayName = \"DialogFooter\";\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className,\n    )}\n    {...props}\n  />\n));\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n};\n","size_bytes":3870},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7610},"client/src/components/ui/empty-state.tsx":{"content":"import { Button } from \"@/components/ui/button\"\n\ninterface EmptyStateProps {\n  icon: string\n  title: string\n  description: string\n  actionLabel?: string\n  onAction?: () => void\n}\n\nexport function EmptyState({ \n  icon, \n  title, \n  description, \n  actionLabel, \n  onAction \n}: EmptyStateProps) {\n  return (\n    <div className=\"flex flex-col items-center justify-center p-12 text-center\">\n      <div className=\"w-20 h-20 bg-gradient-to-r from-gray-100 to-gray-200 rounded-full flex items-center justify-center mb-6\">\n        <i className={`${icon} text-3xl text-gray-400`} />\n      </div>\n      <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\n        {title}\n      </h3>\n      <p className=\"text-gray-500 dark:text-gray-400 mb-6 max-w-sm\">\n        {description}\n      </p>\n      {actionLabel && onAction && (\n        <Button \n          onClick={onAction}\n          className=\"bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700\"\n        >\n          <i className=\"fas fa-plus mr-2\" />\n          {actionLabel}\n        </Button>\n      )}\n    </div>\n  )\n}","size_bytes":1108},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-11 w-full rounded-lg border border-gray-300 bg-white px-4 py-3 text-sm text-gray-900 placeholder:text-gray-500 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500/20 disabled:cursor-not-allowed disabled:opacity-50 transition-all duration-200\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }","size_bytes":678},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/loading-spinner.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\ninterface LoadingSpinnerProps {\n  className?: string\n  size?: \"sm\" | \"md\" | \"lg\"\n}\n\nexport function LoadingSpinner({ className, size = \"md\" }: LoadingSpinnerProps) {\n  const sizeClasses = {\n    sm: \"h-4 w-4\",\n    md: \"h-8 w-8\", \n    lg: \"h-12 w-12\"\n  }\n\n  return (\n    <div className=\"flex flex-col items-center justify-center p-8\">\n      <div className={cn(\n        \"animate-spin rounded-full border-4 border-gray-200 border-t-blue-600\",\n        sizeClasses[size],\n        className\n      )} />\n      <p className=\"text-gray-500 mt-2 text-sm\">Loading...</p>\n    </div>\n  )\n}\n\nexport function FullPageLoader() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100\">\n      <div className=\"text-center\">\n        <div className=\"w-16 h-16 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin mx-auto mb-4\" />\n        <h2 className=\"text-xl font-semibold text-gray-700 mb-2\">Loading Bake Sewa</h2>\n        <p className=\"text-gray-500\">Please wait while we prepare your bakery management system...</p>\n      </div>\n    </div>\n  )\n}","size_bytes":1146},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface PaginationProps {\n  currentPage: number;\n  totalPages: number;\n  onPageChange: (page: number) => void;\n  showFirstLast?: boolean;\n  showPreviousNext?: boolean;\n  className?: string;\n}\n\nexport function Pagination({\n  currentPage,\n  totalPages,\n  onPageChange,\n  showFirstLast = true,\n  showPreviousNext = true,\n  className,\n}: PaginationProps) {\n  const getVisiblePages = () => {\n    const delta = 2;\n    const range = [];\n    const rangeWithDots = [];\n\n    for (\n      let i = Math.max(2, currentPage - delta);\n      i <= Math.min(totalPages - 1, currentPage + delta);\n      i++\n    ) {\n      range.push(i);\n    }\n\n    if (currentPage - delta > 2) {\n      rangeWithDots.push(1, \"...\");\n    } else {\n      rangeWithDots.push(1);\n    }\n\n    rangeWithDots.push(...range);\n\n    if (currentPage + delta < totalPages - 1) {\n      rangeWithDots.push(\"...\", totalPages);\n    } else {\n      rangeWithDots.push(totalPages);\n    }\n\n    return rangeWithDots;\n  };\n\n  const visiblePages = totalPages > 1 ? getVisiblePages() : [];\n\n  if (totalPages <= 1) {\n    return null;\n  }\n\n  return (\n    <nav\n      className={cn(\"flex items-center justify-center space-x-2\", className)}\n      aria-label=\"Pagination\"\n    >\n      {showFirstLast && (\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => onPageChange(1)}\n          disabled={currentPage === 1}\n          className=\"px-3\"\n        >\n          &laquo;\n        </Button>\n      )}\n\n      {showPreviousNext && (\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => onPageChange(currentPage - 1)}\n          disabled={currentPage === 1}\n          className=\"px-3\"\n        >\n          &lsaquo;\n        </Button>\n      )}\n\n      {visiblePages.map((page, index) => (\n        <React.Fragment key={index}>\n          {page === \"...\" ? (\n            <span className=\"px-3 py-2 text-sm text-muted-foreground\">\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </span>\n          ) : (\n            <Button\n              variant={page === currentPage ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => onPageChange(page as number)}\n              className=\"px-3\"\n            >\n              {page}\n            </Button>\n          )}\n        </React.Fragment>\n      ))}\n\n      {showPreviousNext && (\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => onPageChange(currentPage + 1)}\n          disabled={currentPage === totalPages}\n          className=\"px-3\"\n        >\n          &rsaquo;\n        </Button>\n      )}\n\n      {showFirstLast && (\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => onPageChange(totalPages)}\n          disabled={currentPage === totalPages}\n          className=\"px-3\"\n        >\n          &raquo;\n        </Button>\n      )}\n    </nav>\n  );\n}\n\ninterface PaginationInfoProps {\n  currentPage: number;\n  totalPages: number;\n  totalItems: number;\n  className?: string;\n}\n\nexport function PaginationInfo({\n  currentPage,\n  totalPages,\n  totalItems,\n  className,\n}: PaginationInfoProps) {\n  return (\n    <div className={cn(\"text-sm text-muted-foreground\", className)}>\n      Page {currentPage} of {totalPages} ({totalItems} total items)\n    </div>\n  );\n}\n\ninterface PageSizeSelectorProps {\n  pageSize: number;\n  onPageSizeChange: (size: number) => void;\n  options?: number[];\n  className?: string;\n}\n\nexport function PageSizeSelector({\n  pageSize,\n  onPageSizeChange,\n  options = [10, 20, 50, 100],\n  className,\n}: PageSizeSelectorProps) {\n  return (\n    <div className={cn(\"flex items-center space-x-2\", className)}>\n      <span className=\"text-sm text-muted-foreground\">Show</span>\n      <Select value={pageSize.toString()} onValueChange={(value) => onPageSizeChange(Number(value))}>\n        <SelectTrigger className=\"w-20\">\n          <SelectValue />\n        </SelectTrigger>\n        <SelectContent>\n          {options.map((option) => (\n            <SelectItem key={option} value={option.toString()}>\n              {option}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n      <span className=\"text-sm text-muted-foreground\">items</span>\n    </div>\n  );\n}\n\nexport function usePagination<T>(\n  data: T[],\n  initialPageSize = 10\n) {\n  const [currentPage, setCurrentPage] = React.useState(1);\n  const [pageSize, setPageSize] = React.useState(initialPageSize);\n\n  const totalItems = data.length;\n  const totalPages = Math.ceil(totalItems / pageSize);\n\n  // Reset to first page when data changes\n  React.useEffect(() => {\n    setCurrentPage(1);\n  }, [data.length]);\n\n  // Reset to last page if current page exceeds total pages\n  React.useEffect(() => {\n    if (currentPage > totalPages && totalPages > 0) {\n      setCurrentPage(totalPages);\n    }\n  }, [currentPage, totalPages]);\n\n  const startIndex = (currentPage - 1) * pageSize;\n  const endIndex = startIndex + pageSize;\n  const currentItems = data.slice(startIndex, endIndex);\n\n  const goToPage = (page: number) => {\n    setCurrentPage(Math.max(1, Math.min(page, totalPages)));\n  };\n\n  const nextPage = () => {\n    goToPage(currentPage + 1);\n  };\n\n  const previousPage = () => {\n    goToPage(currentPage - 1);\n  };\n\n  const onPageSizeChange = (newSize: number) => {\n    const currentStartIndex = (currentPage - 1) * pageSize;\n    const newPage = Math.floor(currentStartIndex / newSize) + 1;\n    setPageSize(newSize);\n    setCurrentPage(newPage);\n  };\n\n  return {\n    currentItems,\n    currentPage,\n    totalPages,\n    pageSize,\n    totalItems,\n    setPageSize: onPageSizeChange,\n    goToPage,\n    nextPage,\n    previousPage,\n  };\n}","size_bytes":5946},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\";\n\nimport * as React from \"react\";\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Select = SelectPrimitive.Root;\n\nconst SelectGroup = SelectPrimitive.Group;\n\nconst SelectValue = SelectPrimitive.Value;\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n));\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className,\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n));\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className,\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n));\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName;\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className,\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\"\n            ? \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n            : \"\",\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n));\nSelectContent.displayName = SelectPrimitive.Content.displayName;\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n));\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n\n      // üîπ Highlight selected item\n      \"data-[state=checked]:bg-orange-100 data-[state=checked]:text-orange-800 data-[state=checked]:font-semibold\",\n\n      // Optional: Hover effect (not conflicting with selected)\n      \"hover:bg-orange-50 hover:text-orange-900\",\n\n      // Focus style (keyboard navigation)\n      \"data-[state=highlighted]:bg-orange-50 data-[state=highlighted]:text-orange-900\",\n\n      className,\n    )}\n    {...props}\n  >\n    {/* Checkmark indicator (only visible when selected) */}\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n));\nSelectItem.displayName = SelectPrimitive.Item.displayName;\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n));\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName;\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n};\n","size_bytes":6128},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/sortable-table-header.tsx":{"content":"import { ChevronUp, ChevronDown, ChevronsUpDown } from \"lucide-react\";\nimport { TableHead } from \"@/components/ui/table\";\nimport { cn } from \"@/lib/utils\";\nimport type { SortConfig } from \"@/hooks/useTableSort\";\n\ninterface SortableTableHeaderProps {\n  children: React.ReactNode;\n  sortKey: string;\n  sortConfig: SortConfig | null;\n  onSort: (key: string) => void;\n  className?: string;\n  align?: \"left\" | \"center\" | \"right\";\n}\n\nexport function SortableTableHeader({\n  children,\n  sortKey,\n  sortConfig,\n  onSort,\n  className,\n  align = \"left\"\n}: SortableTableHeaderProps) {\n  const isActive = sortConfig?.key === sortKey;\n  const direction = isActive ? sortConfig?.direction : null;\n\n  const getSortIcon = () => {\n    if (!isActive) {\n      return <ChevronsUpDown className=\"ml-2 h-4 w-4 text-muted-foreground\" />;\n    }\n    return direction === 'asc' \n      ? <ChevronUp className=\"ml-2 h-4 w-4 text-primary\" />\n      : <ChevronDown className=\"ml-2 h-4 w-4 text-primary\" />;\n  };\n\n  return (\n    <TableHead \n      className={cn(\n        \"cursor-pointer hover:bg-muted/50 transition-colors user-select-none\",\n        align === \"center\" && \"text-center\",\n        align === \"right\" && \"text-right\",\n        className\n      )}\n      onClick={() => onSort(sortKey)}\n    >\n      <div className={cn(\n        \"flex items-center\",\n        align === \"center\" && \"justify-center\",\n        align === \"right\" && \"justify-end\"\n      )}>\n        <span className={cn(isActive && \"text-primary font-medium\")}>\n          {children}\n        </span>\n        {getSortIcon()}\n      </div>\n    </TableHead>\n  );\n}","size_bytes":1591},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus:border-blue-500 focus:ring-blue-500/20 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nTextarea.displayName = \"Textarea\";\n\nexport { Textarea };\n","size_bytes":728},"client/src/components/ui/theme-badge.tsx":{"content":"\nimport { Badge } from \"./badge\";\nimport { cn } from \"@/lib/utils\";\n\ninterface StatusBadgeProps {\n  status: string;\n  className?: string;\n}\n\nexport function StatusBadge({ status, className }: StatusBadgeProps) {\n  const getStatusVariant = (status: string) => {\n    const variants: Record<\n      string,\n      \"default\" | \"secondary\" | \"destructive\" | \"outline\"\n    > = {\n      completed: \"default\",\n      in_progress: \"secondary\",\n      pending: \"outline\",\n      cancelled: \"destructive\",\n      paid: \"default\",\n      overdue: \"destructive\",\n      active: \"default\",\n      inactive: \"outline\",\n    };\n    return variants[status.toLowerCase()] || \"outline\";\n  };\n\n  const getStatusLabel = (status: string) => {\n    const labels: Record<string, string> = {\n      completed: \"Completed\",\n      in_progress: \"In Progress\",\n      pending: \"Pending\",\n      cancelled: \"Cancelled\",\n      paid: \"Paid\",\n      overdue: \"Overdue\",\n      active: \"Active\",\n      inactive: \"Inactive\",\n    };\n    return labels[status.toLowerCase()] || status;\n  };\n\n  return (\n    <Badge \n      variant={getStatusVariant(status)} \n      className={cn(className)}\n    >\n      {getStatusLabel(status)}\n    </Badge>\n  );\n}\n","size_bytes":1191},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\";\nimport * as ToastPrimitives from \"@radix-ui/react-toast\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { X } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst ToastProvider = ToastPrimitives.Provider;\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className,\n    )}\n    {...props}\n  />\n));\nToastViewport.displayName = ToastPrimitives.Viewport.displayName;\n\nconst toastVariants = cva(\n  \"bg-white group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  );\n});\nToast.displayName = ToastPrimitives.Root.displayName;\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className,\n    )}\n    {...props}\n  />\n));\nToastAction.displayName = ToastPrimitives.Action.displayName;\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className,\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n));\nToastClose.displayName = ToastPrimitives.Close.displayName;\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n));\nToastTitle.displayName = ToastPrimitives.Title.displayName;\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n));\nToastDescription.displayName = ToastPrimitives.Description.displayName;\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>;\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n};\n","size_bytes":4881},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool  \n[x] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":300},"client/src/pages/purchase-history.tsx":{"content":"\nimport { useState, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport SearchBar from \"@/components/search-bar\";\nimport { useTableSort } from \"@/hooks/useTableSort\";\nimport { SortableTableHeader } from \"@/components/ui/sortable-table-header\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Pagination,\n  PaginationInfo,\n  PageSizeSelector,\n  usePagination,\n} from \"@/components/ui/pagination\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Edit, Trash2, Package, Calendar, Receipt, Filter, Search, Eye, FileText, ExternalLink } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\n\ninterface Purchase {\n  id: number;\n  supplierName: string;\n  partyId?: number;\n  totalAmount: string;\n  paymentMethod: string;\n  status: string;\n  purchaseDate: string;\n  invoiceNumber?: string;\n  notes?: string;\n  createdAt: string;\n  items?: PurchaseItem[];\n}\n\ninterface PurchaseItem {\n  id: number;\n  inventoryItemId: number;\n  inventoryItemName: string;\n  quantity: string;\n  unitPrice: string;\n  totalPrice: string;\n}\n\ninterface Party {\n  id: number;\n  name: string;\n  type: string;\n  currentBalance: string;\n}\n\nexport default function PurchaseHistory() {\n  const { toast } = useToast();\n  const { formatCurrency, formatCurrencyWithCommas } = useCurrency();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [supplierFilter, setSupplierFilter] = useState(\"all\");\n  const [dateFrom, setDateFrom] = useState(\"\");\n  const [dateTo, setDateTo] = useState(\"\");\n  const [selectedPurchase, setSelectedPurchase] = useState<Purchase | null>(null);\n  const [isDetailDialogOpen, setIsDetailDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n\n  // Fetch data\n  const { data: purchases = [], isLoading: isPurchasesLoading } = useQuery({\n    queryKey: [\"/api/purchases\"],\n  });\n\n  const { data: parties = [] } = useQuery({\n    queryKey: [\"/api/parties\"],\n  });\n\n  const { data: inventoryItems = [] } = useQuery({\n    queryKey: [\"/api/inventory\"],\n  });\n\n  // Delete mutation\n  const deletePurchaseMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/purchases/${id}`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to delete purchase\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchases\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/parties\"] });\n      toast({\n        title: \"Success\",\n        description: \"Purchase deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete purchase\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filter and search logic\n  const filteredPurchases = useMemo(() => {\n    return purchases.filter((purchase: Purchase) => {\n      const supplierName = purchase.supplierName?.toLowerCase() || \"\";\n      const invoiceNumber = purchase.invoiceNumber?.toLowerCase() || \"\";\n      const searchLower = searchTerm.toLowerCase();\n      \n      const matchesSearch = \n        supplierName.includes(searchLower) ||\n        invoiceNumber.includes(searchLower) ||\n        purchase.totalAmount.includes(searchLower);\n\n      const matchesStatus = \n        statusFilter === \"all\" || purchase.status === statusFilter;\n\n      const matchesSupplier = \n        supplierFilter === \"all\" || purchase.supplierName === supplierFilter;\n\n      const purchaseDate = new Date(purchase.purchaseDate || purchase.createdAt);\n      const matchesDateFrom = \n        !dateFrom || purchaseDate >= new Date(dateFrom);\n      const matchesDateTo = \n        !dateTo || purchaseDate <= new Date(dateTo + \"T23:59:59\");\n\n      return matchesSearch && matchesStatus && matchesSupplier && matchesDateFrom && matchesDateTo;\n    });\n  }, [purchases, searchTerm, statusFilter, supplierFilter, dateFrom, dateTo]);\n\n  // Sorting\n  const { sortedData, sortConfig, requestSort } = useTableSort(filteredPurchases, 'purchaseDate');\n\n  // Pagination\n  const {\n    currentItems,\n    currentPage,\n    totalPages,\n    pageSize,\n    setPageSize,\n    goToPage,\n    totalItems,\n  } = usePagination(sortedData, 10);\n\n  // Get unique suppliers for filter\n  const uniqueSuppliers = useMemo(() => {\n    const suppliers = [...new Set(purchases.map((p: Purchase) => p.supplierName))];\n    return suppliers.filter(Boolean);\n  }, [purchases]);\n\n  // Summary calculations\n  const totalPurchases = filteredPurchases.reduce(\n    (sum: number, purchase: Purchase) => sum + parseFloat(purchase.totalAmount),\n    0\n  );\n\n  const statusCounts = useMemo(() => {\n    return filteredPurchases.reduce((acc: any, purchase: Purchase) => {\n      acc[purchase.status] = (acc[purchase.status] || 0) + 1;\n      return acc;\n    }, {});\n  }, [filteredPurchases]);\n\n  const handleViewDetails = (purchase: Purchase) => {\n    setSelectedPurchase(purchase);\n    setIsDetailDialogOpen(true);\n  };\n\n  const handleEdit = (purchase: Purchase) => {\n    setSelectedPurchase(purchase);\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDelete = (id: number) => {\n    if (confirm(\"Are you sure you want to delete this purchase? This action cannot be undone.\")) {\n      deletePurchaseMutation.mutate(id);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants: { [key: string]: \"default\" | \"secondary\" | \"destructive\" | \"outline\" } = {\n      completed: \"default\",\n      pending: \"secondary\",\n      cancelled: \"destructive\",\n      partial: \"outline\",\n    };\n    return (\n      <Badge variant={variants[status] || \"outline\"}>\n        {status?.charAt(0).toUpperCase() + status?.slice(1)}\n      </Badge>\n    );\n  };\n\n  const viewSupplierLedger = (partyId: number) => {\n    if (partyId) {\n      window.open(`/parties?viewLedger=${partyId}`, '_blank');\n    }\n  };\n\n  if (isPurchasesLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"text-center\">Loading purchase history...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Purchase History</h1>\n          <p className=\"text-gray-600\">\n            Complete record of all purchase transactions with supplier ledger integration\n          </p>\n        </div>\n        <Button asChild>\n          <a href=\"/purchases\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Record New Purchase\n          </a>\n        </Button>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Purchases</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{formatCurrencyWithCommas(totalPurchases)}</div>\n            <p className=\"text-xs text-muted-foreground\">{filteredPurchases.length} transactions</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Completed</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{statusCounts.completed || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">Successfully processed</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">{statusCounts.pending || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">Awaiting completion</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Unique Suppliers</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{uniqueSuppliers.length}</div>\n            <p className=\"text-xs text-muted-foreground\">Active vendors</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters and Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-4 w-4\" />\n            Filters & Search\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col lg:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <SearchBar\n                value={searchTerm}\n                onChange={setSearchTerm}\n                placeholder=\"Search by supplier, invoice number, or amount...\"\n                className=\"w-full\"\n              />\n            </div>\n            <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div>\n                <Label htmlFor=\"status-filter\">Status</Label>\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All statuses\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All statuses</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                    <SelectItem value=\"partial\">Partial</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"supplier-filter\">Supplier</Label>\n                <Select value={supplierFilter} onValueChange={setSupplierFilter}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All suppliers\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All suppliers</SelectItem>\n                    {uniqueSuppliers.map((supplier) => (\n                      <SelectItem key={supplier} value={supplier}>\n                        {supplier}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"date-from\">From Date</Label>\n                <Input\n                  id=\"date-from\"\n                  type=\"date\"\n                  value={dateFrom}\n                  onChange={(e) => setDateFrom(e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"date-to\">To Date</Label>\n                <Input\n                  id=\"date-to\"\n                  type=\"date\"\n                  value={dateTo}\n                  onChange={(e) => setDateTo(e.target.value)}\n                />\n              </div>\n            </div>\n          </div>\n          {(searchTerm || statusFilter !== \"all\" || supplierFilter !== \"all\" || dateFrom || dateTo) && (\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  setSearchTerm(\"\");\n                  setStatusFilter(\"all\");\n                  setSupplierFilter(\"all\");\n                  setDateFrom(\"\");\n                  setDateTo(\"\");\n                }}\n              >\n                Clear Filters\n              </Button>\n              <span className=\"text-sm text-muted-foreground self-center\">\n                Showing {filteredPurchases.length} of {purchases.length} purchases\n              </span>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Purchase History Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Purchase Records</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>\n                    <SortableTableHeader\n                      label=\"Date\"\n                      sortKey=\"purchaseDate\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    />\n                  </TableHead>\n                  <TableHead>\n                    <SortableTableHeader\n                      label=\"Supplier Name\"\n                      sortKey=\"supplierName\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    />\n                  </TableHead>\n                  <TableHead>\n                    <SortableTableHeader\n                      label=\"Invoice Number\"\n                      sortKey=\"invoiceNumber\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    />\n                  </TableHead>\n                  <TableHead>Items Purchased</TableHead>\n                  <TableHead>\n                    <SortableTableHeader\n                      label=\"Total Amount\"\n                      sortKey=\"totalAmount\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    />\n                  </TableHead>\n                  <TableHead>\n                    <SortableTableHeader\n                      label=\"Payment Status\"\n                      sortKey=\"status\"\n                      sortConfig={sortConfig}\n                      onSort={requestSort}\n                    />\n                  </TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {currentItems.map((purchase: Purchase) => (\n                  <TableRow key={purchase.id}>\n                    <TableCell>\n                      {format(new Date(purchase.purchaseDate || purchase.createdAt), 'MMM dd, yyyy')}\n                    </TableCell>\n                    <TableCell className=\"font-medium\">\n                      {purchase.supplierName}\n                      {purchase.partyId && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"ml-2 h-6 px-2\"\n                          onClick={() => viewSupplierLedger(purchase.partyId!)}\n                          title=\"View Supplier Ledger\"\n                        >\n                          <ExternalLink className=\"h-3 w-3\" />\n                        </Button>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {purchase.invoiceNumber || (\n                        <span className=\"text-muted-foreground\">No invoice</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleViewDetails(purchase)}\n                        className=\"text-blue-600 hover:text-blue-800\"\n                      >\n                        <Package className=\"h-4 w-4 mr-1\" />\n                        View Items\n                      </Button>\n                    </TableCell>\n                    <TableCell className=\"font-medium\">\n                      {formatCurrencyWithCommas(parseFloat(purchase.totalAmount))}\n                    </TableCell>\n                    <TableCell>\n                      {getStatusBadge(purchase.status)}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleViewDetails(purchase)}\n                          title=\"View Details\"\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(purchase)}\n                          title=\"Edit Purchase\"\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(purchase.id)}\n                          title=\"Delete Purchase\"\n                          className=\"text-red-600 hover:text-red-800\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n\n          {/* Pagination */}\n          <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4 mt-4\">\n            <PaginationInfo\n              currentPage={currentPage}\n              totalPages={totalPages}\n              totalItems={totalItems}\n            />\n            <div className=\"flex items-center gap-4\">\n              <PageSizeSelector\n                pageSize={pageSize}\n                onPageSizeChange={setPageSize}\n              />\n              <Pagination\n                currentPage={currentPage}\n                totalPages={totalPages}\n                onPageChange={goToPage}\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Purchase Details Dialog */}\n      <Dialog open={isDetailDialogOpen} onOpenChange={setIsDetailDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Purchase Details</DialogTitle>\n            <DialogDescription>\n              Complete information for purchase #{selectedPurchase?.id}\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedPurchase && (\n            <div className=\"space-y-6\">\n              {/* Purchase Information */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium\">Supplier</Label>\n                  <p className=\"text-sm\">{selectedPurchase.supplierName}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Purchase Date</Label>\n                  <p className=\"text-sm\">\n                    {format(new Date(selectedPurchase.purchaseDate || selectedPurchase.createdAt), 'PPP')}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Invoice Number</Label>\n                  <p className=\"text-sm\">{selectedPurchase.invoiceNumber || \"Not provided\"}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Payment Method</Label>\n                  <p className=\"text-sm capitalize\">{selectedPurchase.paymentMethod}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <div className=\"mt-1\">{getStatusBadge(selectedPurchase.status)}</div>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Total Amount</Label>\n                  <p className=\"text-lg font-semibold\">\n                    {formatCurrencyWithCommas(parseFloat(selectedPurchase.totalAmount))}\n                  </p>\n                </div>\n              </div>\n\n              {/* Purchase Items */}\n              {selectedPurchase.items && selectedPurchase.items.length > 0 && (\n                <div>\n                  <Label className=\"text-sm font-medium\">Items Purchased</Label>\n                  <div className=\"mt-2 border rounded-lg\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Item</TableHead>\n                          <TableHead>Quantity</TableHead>\n                          <TableHead>Unit Price</TableHead>\n                          <TableHead>Total</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {selectedPurchase.items.map((item) => (\n                          <TableRow key={item.id}>\n                            <TableCell>{item.inventoryItemName}</TableCell>\n                            <TableCell>{item.quantity}</TableCell>\n                            <TableCell>{formatCurrency(parseFloat(item.unitPrice))}</TableCell>\n                            <TableCell className=\"font-medium\">\n                              {formatCurrency(parseFloat(item.totalPrice))}\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                </div>\n              )}\n\n              {/* Notes */}\n              {selectedPurchase.notes && (\n                <div>\n                  <Label className=\"text-sm font-medium\">Notes</Label>\n                  <p className=\"text-sm text-muted-foreground\">{selectedPurchase.notes}</p>\n                </div>\n              )}\n\n              {/* Supplier Ledger Link */}\n              {selectedPurchase.partyId && (\n                <div className=\"border-t pt-4\">\n                  <Button\n                    onClick={() => viewSupplierLedger(selectedPurchase.partyId!)}\n                    className=\"w-full\"\n                  >\n                    <FileText className=\"h-4 w-4 mr-2\" />\n                    View Supplier Ledger & Transaction History\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":23109},"server/test-audit-system.ts":{"content":"\nimport { storage } from \"./lib/storage\";\n\n/**\n * Comprehensive audit system test script\n * Tests all critical audit logging functionality\n */\n\nasync function testAuditSystem() {\n  console.log(\"üîç Starting comprehensive audit system test...\");\n\n  try {\n    // Test 1: Basic audit log creation\n    console.log(\"\\nüìù Test 1: Basic audit log creation\");\n    const testLog = await storage.createAuditLog({\n      userId: 'test_user_123',\n      userEmail: 'test@example.com',\n      userName: 'Test User',\n      action: 'CREATE',\n      resource: 'test_resource',\n      resourceId: 'test_123',\n      details: { test: 'data' },\n      ipAddress: '192.168.1.1',\n      userAgent: 'Test Agent',\n      status: 'success'\n    });\n    console.log(\"‚úÖ Audit log created:\", testLog.id);\n\n    // Test 2: Audit log retrieval with filters\n    console.log(\"\\nüîç Test 2: Audit log retrieval\");\n    const logs = await storage.getAuditLogs({\n      userId: 'test_user_123',\n      limit: 10\n    });\n    console.log(`‚úÖ Retrieved ${logs.length} audit logs`);\n\n    // Test 3: Login event logging\n    console.log(\"\\nüîê Test 3: Login event logging\");\n    await storage.logLogin('test_user_123', 'test@example.com', 'Test User', '192.168.1.1', 'Test Agent', true);\n    console.log(\"‚úÖ Login event logged\");\n\n    // Test 4: Logout event logging\n    console.log(\"\\nüö™ Test 4: Logout event logging\");\n    await storage.logLogout('test_user_123', 'test@example.com', 'Test User', '192.168.1.1');\n    console.log(\"‚úÖ Logout event logged\");\n\n    // Test 5: Failed login logging\n    console.log(\"\\n‚ùå Test 5: Failed login logging\");\n    await storage.logLogin('unknown_user', 'baduser@example.com', 'Unknown User', '192.168.1.1', 'Test Agent', false, 'Invalid credentials');\n    console.log(\"‚úÖ Failed login event logged\");\n\n    // Test 6: Retrieve recent logs\n    console.log(\"\\nüìä Test 6: Recent audit logs\");\n    const recentLogs = await storage.getAuditLogs({\n      startDate: new Date(Date.now() - 24 * 60 * 60 * 1000), // Last 24 hours\n      limit: 50\n    });\n    console.log(`‚úÖ Retrieved ${recentLogs.length} recent logs`);\n\n    // Test 7: Filter by action type\n    console.log(\"\\nüéØ Test 7: Filter by action type\");\n    const loginLogs = await storage.getAuditLogs({\n      action: 'LOGIN',\n      limit: 10\n    });\n    console.log(`‚úÖ Retrieved ${loginLogs.length} login logs`);\n\n    // Test 8: Stress test - multiple concurrent logs\n    console.log(\"\\n‚ö° Test 8: Concurrent logging stress test\");\n    const promises = [];\n    for (let i = 0; i < 10; i++) {\n      promises.push(storage.createAuditLog({\n        userId: `stress_test_${i}`,\n        userEmail: `stress${i}@example.com`,\n        userName: `Stress User ${i}`,\n        action: 'CREATE',\n        resource: 'stress_test',\n        resourceId: `stress_${i}`,\n        details: { iteration: i },\n        ipAddress: '192.168.1.100',\n        userAgent: 'Stress Test Agent',\n        status: 'success'\n      }));\n    }\n    await Promise.all(promises);\n    console.log(\"‚úÖ Concurrent logging test completed\");\n\n    console.log(\"\\nüéâ All audit system tests passed!\");\n    console.log(\"\\nüìã Test Summary:\");\n    console.log(\"   ‚úÖ Basic audit log creation\");\n    console.log(\"   ‚úÖ Audit log retrieval with filters\");\n    console.log(\"   ‚úÖ Login event logging\");\n    console.log(\"   ‚úÖ Logout event logging\");\n    console.log(\"   ‚úÖ Failed login logging\");\n    console.log(\"   ‚úÖ Recent logs retrieval\");\n    console.log(\"   ‚úÖ Action type filtering\");\n    console.log(\"   ‚úÖ Concurrent logging stress test\");\n\n  } catch (error) {\n    console.error(\"‚ùå Audit system test failed:\", error);\n    throw error;\n  }\n}\n\n// Export for use in other files\nexport { testAuditSystem };\n\n// Run if called directly\nif (require.main === module) {\n  testAuditSystem().catch(console.error);\n}\n","size_bytes":3830},"server/verify-audit-compliance.ts":{"content":"\nimport { storage } from \"./lib/storage\";\nimport { db } from \"./db\";\nimport { auditLogs } from \"../shared/schema\";\nimport { sql, desc, count } from \"drizzle-orm\";\n\n/**\n * Comprehensive audit compliance verification script\n * Verifies audit logs are complete, accurate, and compliant\n */\n\ninterface ComplianceReport {\n  totalLogs: number;\n  logsByAction: Record<string, number>;\n  logsByStatus: Record<string, number>;\n  recentActivity: number;\n  criticalEvents: number;\n  dataIntegrity: boolean;\n  retentionCompliance: boolean;\n  tamperEvidence: boolean;\n}\n\nexport async function verifyAuditCompliance(): Promise<ComplianceReport> {\n  console.log(\"üîç Starting audit compliance verification...\");\n\n  try {\n    // 1. Total log count\n    const totalResult = await db.select({ count: count() }).from(auditLogs);\n    const totalLogs = totalResult[0].count;\n    console.log(`üìä Total audit logs: ${totalLogs}`);\n\n    // 2. Logs by action type\n    const actionResults = await db\n      .select({ \n        action: auditLogs.action, \n        count: count() \n      })\n      .from(auditLogs)\n      .groupBy(auditLogs.action);\n    \n    const logsByAction: Record<string, number> = {};\n    actionResults.forEach(result => {\n      logsByAction[result.action] = result.count;\n    });\n    console.log(\"üìà Logs by action:\", logsByAction);\n\n    // 3. Logs by status\n    const statusResults = await db\n      .select({ \n        status: auditLogs.status, \n        count: count() \n      })\n      .from(auditLogs)\n      .groupBy(auditLogs.status);\n    \n    const logsByStatus: Record<string, number> = {};\n    statusResults.forEach(result => {\n      logsByStatus[result.status || 'unknown'] = result.count;\n    });\n    console.log(\"üìä Logs by status:\", logsByStatus);\n\n    // 4. Recent activity (last 24 hours)\n    const last24Hours = new Date(Date.now() - 24 * 60 * 60 * 1000);\n    const recentResult = await db\n      .select({ count: count() })\n      .from(auditLogs)\n      .where(sql`${auditLogs.timestamp} >= ${last24Hours.toISOString()}`);\n    const recentActivity = recentResult[0].count;\n    console.log(`‚è∞ Recent activity (24h): ${recentActivity} logs`);\n\n    // 5. Critical events\n    const criticalResult = await db\n      .select({ count: count() })\n      .from(auditLogs)\n      .where(sql`${auditLogs.action} IN ('DELETE', 'CREATE') AND ${auditLogs.resource} IN ('users', 'settings')`);\n    const criticalEvents = criticalResult[0].count;\n    console.log(`üö® Critical events: ${criticalEvents} logs`);\n\n    // 6. Data integrity check\n    const integrityResult = await db\n      .select({ count: count() })\n      .from(auditLogs)\n      .where(sql`${auditLogs.userId} IS NULL OR ${auditLogs.userEmail} IS NULL OR ${auditLogs.action} IS NULL OR ${auditLogs.resource} IS NULL`);\n    const dataIntegrity = integrityResult[0].count === 0;\n    console.log(`‚úÖ Data integrity: ${dataIntegrity ? 'PASS' : 'FAIL'}`);\n\n    // 7. Retention compliance (check for logs older than 7 years)\n    const sevenYearsAgo = new Date(Date.now() - 7 * 365 * 24 * 60 * 60 * 1000);\n    const oldLogsResult = await db\n      .select({ count: count() })\n      .from(auditLogs)\n      .where(sql`${auditLogs.timestamp} < ${sevenYearsAgo.toISOString()}`);\n    const retentionCompliance = oldLogsResult[0].count === 0; // No logs older than 7 years\n    console.log(`üìÖ Retention compliance: ${retentionCompliance ? 'PASS' : 'REVIEW NEEDED'}`);\n\n    // 8. Tamper evidence (check for gaps in log sequence)\n    const recentLogs = await db\n      .select()\n      .from(auditLogs)\n      .orderBy(desc(auditLogs.timestamp))\n      .limit(100);\n    \n    let tamperEvidence = true;\n    for (let i = 1; i < recentLogs.length; i++) {\n      const current = new Date(recentLogs[i].timestamp);\n      const previous = new Date(recentLogs[i-1].timestamp);\n      \n      // Check for suspicious gaps (more than 1 hour between logs during business hours)\n      const hourDiff = (previous.getTime() - current.getTime()) / (1000 * 60 * 60);\n      if (hourDiff > 4 && current.getHours() >= 9 && current.getHours() <= 17) {\n        console.warn(`‚ö†Ô∏è Suspicious gap detected: ${hourDiff.toFixed(2)} hours between logs`);\n        tamperEvidence = false;\n      }\n    }\n    console.log(`üîí Tamper evidence: ${tamperEvidence ? 'PASS' : 'REVIEW NEEDED'}`);\n\n    const report: ComplianceReport = {\n      totalLogs,\n      logsByAction,\n      logsByStatus,\n      recentActivity,\n      criticalEvents,\n      dataIntegrity,\n      retentionCompliance,\n      tamperEvidence\n    };\n\n    // Generate compliance summary\n    console.log(\"\\nüìã COMPLIANCE SUMMARY:\");\n    console.log(\"========================\");\n    console.log(`Total Audit Logs: ${totalLogs}`);\n    console.log(`Recent Activity: ${recentActivity} (last 24h)`);\n    console.log(`Critical Events: ${criticalEvents}`);\n    console.log(`Data Integrity: ${dataIntegrity ? '‚úÖ PASS' : '‚ùå FAIL'}`);\n    console.log(`Retention Policy: ${retentionCompliance ? '‚úÖ COMPLIANT' : '‚ö†Ô∏è REVIEW'}`);\n    console.log(`Tamper Evidence: ${tamperEvidence ? '‚úÖ SECURE' : '‚ö†Ô∏è REVIEW'}`);\n    \n    const overallCompliance = dataIntegrity && retentionCompliance && tamperEvidence;\n    console.log(`\\nOVERALL COMPLIANCE: ${overallCompliance ? '‚úÖ COMPLIANT' : '‚ö†Ô∏è NEEDS ATTENTION'}`);\n\n    return report;\n\n  } catch (error) {\n    console.error(\"‚ùå Compliance verification failed:\", error);\n    throw error;\n  }\n}\n\n// Export for use in other files\nexport { verifyAuditCompliance as default };\n\n// Run if called directly\nif (require.main === module) {\n  verifyAuditCompliance().catch(console.error);\n}\n","size_bytes":5595},"client/src/components/purchase-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Trash2, Plus } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\n\ninterface PurchaseFormProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface PurchaseItem {\n  id: string;\n  inventoryItemId: string;\n  inventoryItemName: string;\n  quantity: string;\n  unitPrice: string;\n  totalPrice: number;\n  unit: string;\n  currentStock: number;\n  currentRate: number;\n}\n\nexport function PurchaseForm({ isOpen, onClose }: PurchaseFormProps) {\n  const { toast } = useToast();\n  const { symbol } = useCurrency();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const [formData, setFormData] = useState({\n    supplierName: \"\",\n    invoiceNumber: \"\",\n    purchaseDate: new Date().toISOString().split('T')[0],\n    paymentMethod: \"cash\",\n    notes: \"\",\n  });\n\n  const [purchaseItems, setPurchaseItems] = useState<PurchaseItem[]>([\n    {\n      id: \"1\",\n      inventoryItemId: \"\",\n      inventoryItemName: \"\",\n      quantity: \"\",\n      unitPrice: \"\",\n      totalPrice: 0,\n      unit: \"\",\n      currentStock: 0,\n      currentRate: 0,\n    }\n  ]);\n\n  const { data: inventoryItems = [] } = useQuery({\n    queryKey: [\"/api/inventory/all\"],\n    queryFn: () => apiRequest(\"GET\", \"/api/inventory/all\"),\n  });\n\n  const { data: parties = [] } = useQuery({\n    queryKey: [\"/api/parties\"],\n  });\n\n  const calculateTotalAmount = () => {\n    return purchaseItems.reduce((sum, item) => sum + item.totalPrice, 0);\n  };\n\n  const handleItemChange = (index: number, field: keyof PurchaseItem, value: string) => {\n    const updatedItems = [...purchaseItems];\n    const item = updatedItems[index];\n\n    if (field === \"inventoryItemId\") {\n      const selectedInventory = inventoryItems.find((inv: any) => inv.id.toString() === value);\n      if (selectedInventory) {\n        item.inventoryItemName = selectedInventory.name;\n        item.unit = selectedInventory.unit;\n        item.currentStock = parseFloat(selectedInventory.currentStock);\n        item.currentRate = parseFloat(selectedInventory.costPerUnit);\n        item.unitPrice = selectedInventory.costPerUnit; // Default to current rate\n      }\n    }\n\n    item[field] = value as any;\n\n    // Recalculate total price when quantity or unit price changes\n    if (field === \"quantity\" || field === \"unitPrice\") {\n      const quantity = parseFloat(item.quantity) || 0;\n      const unitPrice = parseFloat(item.unitPrice) || 0;\n      item.totalPrice = quantity * unitPrice;\n    }\n\n    updatedItems[index] = item;\n    setPurchaseItems(updatedItems);\n  };\n\n  const addPurchaseItem = () => {\n    setPurchaseItems([\n      ...purchaseItems,\n      {\n        id: Date.now().toString(),\n        inventoryItemId: \"\",\n        inventoryItemName: \"\",\n        quantity: \"\",\n        unitPrice: \"\",\n        totalPrice: 0,\n        unit: \"\",\n        currentStock: 0,\n        currentRate: 0,\n      }\n    ]);\n  };\n\n  const removePurchaseItem = (index: number) => {\n    if (purchaseItems.length > 1) {\n      setPurchaseItems(purchaseItems.filter((_, i) => i !== index));\n    }\n  };\n\n  const purchaseMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/purchases\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchases\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Purchase recorded successfully. Inventory updated with weighted average cost.\",\n      });\n      onClose();\n      // Reset form\n      setFormData({\n        supplierName: \"\",\n        invoiceNumber: \"\",\n        purchaseDate: new Date().toISOString().split('T')[0],\n        paymentMethod: \"cash\",\n        notes: \"\",\n      });\n      setPurchaseItems([{\n        id: \"1\",\n        inventoryItemId: \"\",\n        inventoryItemName: \"\",\n        quantity: \"\",\n        unitPrice: \"\",\n        totalPrice: 0,\n        unit: \"\",\n        currentStock: 0,\n        currentRate: 0,\n      }]);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to record purchase\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    // Validate form data\n    if (!formData.supplierName.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Supplier name is required\",\n        variant: \"destructive\",\n      });\n      setIsSubmitting(false);\n      return;\n    }\n\n    // Validate purchase items\n    const validItems = purchaseItems.filter(item => \n      item.inventoryItemId && \n      parseFloat(item.quantity) > 0 && \n      parseFloat(item.unitPrice) > 0\n    );\n\n    if (validItems.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"At least one valid purchase item is required\",\n        variant: \"destructive\",\n      });\n      setIsSubmitting(false);\n      return;\n    }\n\n    const submitData = {\n      supplierName: formData.supplierName.trim(),\n      invoiceNumber: formData.invoiceNumber.trim() || null,\n      totalAmount: calculateTotalAmount(),\n      paymentMethod: formData.paymentMethod,\n      status: \"completed\",\n      notes: formData.notes.trim() || null,\n      items: validItems.map(item => ({\n        inventoryItemId: parseInt(item.inventoryItemId),\n        quantity: parseFloat(item.quantity),\n        unitPrice: parseFloat(item.unitPrice),\n        totalPrice: item.totalPrice,\n      })),\n    };\n\n    purchaseMutation.mutate(submitData);\n    setIsSubmitting(false);\n  };\n\n  const renderWeightedAveragePreview = (item: PurchaseItem) => {\n    if (!item.quantity || !item.unitPrice || item.currentStock === 0) {\n      return null;\n    }\n\n    const purchaseQty = parseFloat(item.quantity);\n    const purchaseRate = parseFloat(item.unitPrice);\n    const currentValue = item.currentStock * item.currentRate;\n    const purchaseValue = purchaseQty * purchaseRate;\n    const newTotalQty = item.currentStock + purchaseQty;\n    const newTotalValue = currentValue + purchaseValue;\n    const newWeightedRate = newTotalValue / newTotalQty;\n\n    return (\n      <div className=\"text-xs text-blue-600 mt-1 p-2 bg-blue-50 rounded\">\n        <strong>Weighted Average Preview:</strong><br/>\n        Current: {item.currentStock} @ {symbol}{item.currentRate.toFixed(2)} = {symbol}{currentValue.toFixed(2)}<br/>\n        Purchase: {purchaseQty} @ {symbol}{purchaseRate.toFixed(2)} = {symbol}{purchaseValue.toFixed(2)}<br/>\n        New Total: {newTotalQty} @ {symbol}{newWeightedRate.toFixed(2)} = {symbol}{newTotalValue.toFixed(2)}\n      </div>\n    );\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-semibold text-center\">\n            Record Purchase\n          </DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Purchase Details */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base\">Purchase Details</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"supplierName\">Supplier Name *</Label>\n                  <Input\n                    id=\"supplierName\"\n                    value={formData.supplierName}\n                    onChange={(e) => setFormData({...formData, supplierName: e.target.value})}\n                    placeholder=\"Enter supplier name\"\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"invoiceNumber\">Invoice Number</Label>\n                  <Input\n                    id=\"invoiceNumber\"\n                    value={formData.invoiceNumber}\n                    onChange={(e) => setFormData({...formData, invoiceNumber: e.target.value})}\n                    placeholder=\"Enter invoice number\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"purchaseDate\">Purchase Date *</Label>\n                  <Input\n                    id=\"purchaseDate\"\n                    type=\"date\"\n                    value={formData.purchaseDate}\n                    onChange={(e) => setFormData({...formData, purchaseDate: e.target.value})}\n                    required\n                  />\n                </div>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4\">\n                <div>\n                  <Label htmlFor=\"paymentMethod\">Payment Method</Label>\n                  <Select\n                    value={formData.paymentMethod}\n                    onValueChange={(value) => setFormData({...formData, paymentMethod: value})}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"cash\">Cash</SelectItem>\n                      <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                      <SelectItem value=\"cheque\">Cheque</SelectItem>\n                      <SelectItem value=\"credit\">Credit</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"notes\">Notes</Label>\n                  <Input\n                    id=\"notes\"\n                    value={formData.notes}\n                    onChange={(e) => setFormData({...formData, notes: e.target.value})}\n                    placeholder=\"Additional notes\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Purchase Items */}\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle className=\"text-base\">Purchase Items</CardTitle>\n              <Button type=\"button\" onClick={addPurchaseItem} variant=\"outline\" size=\"sm\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Item\n              </Button>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {purchaseItems.map((item, index) => (\n                  <div key={item.id} className=\"border rounded-lg p-4 space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <h4 className=\"text-sm font-medium\">Item {index + 1}</h4>\n                      {purchaseItems.length > 1 && (\n                        <Button\n                          type=\"button\"\n                          onClick={() => removePurchaseItem(index)}\n                          variant=\"outline\"\n                          size=\"sm\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                      <div>\n                        <Label>Inventory Item *</Label>\n                        <Select\n                          value={item.inventoryItemId}\n                          onValueChange={(value) => handleItemChange(index, \"inventoryItemId\", value)}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select item\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {inventoryItems.map((invItem: any) => (\n                              <SelectItem key={invItem.id} value={invItem.id.toString()}>\n                                {invItem.name} ({invItem.unit}) - Stock: {invItem.currentStock}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <Label>Quantity *</Label>\n                        <Input\n                          type=\"number\"\n                          step=\"0.01\"\n                          min=\"0.01\"\n                          value={item.quantity}\n                          onChange={(e) => handleItemChange(index, \"quantity\", e.target.value)}\n                          placeholder=\"0.00\"\n                        />\n                        {item.unit && <span className=\"text-xs text-gray-500\">Unit: {item.unit}</span>}\n                      </div>\n\n                      <div>\n                        <Label>Rate per Unit *</Label>\n                        <div className=\"flex\">\n                          <span className=\"inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm\">\n                            {symbol}\n                          </span>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            min=\"0.01\"\n                            value={item.unitPrice}\n                            onChange={(e) => handleItemChange(index, \"unitPrice\", e.target.value)}\n                            placeholder=\"0.00\"\n                            className=\"rounded-l-none\"\n                          />\n                        </div>\n                        {item.currentRate > 0 && (\n                          <span className=\"text-xs text-gray-500\">\n                            Current: {symbol}{item.currentRate.toFixed(2)}\n                          </span>\n                        )}\n                      </div>\n\n                      <div>\n                        <Label>Total Value</Label>\n                        <div className=\"flex\">\n                          <span className=\"inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm\">\n                            {symbol}\n                          </span>\n                          <Input\n                            value={item.totalPrice.toFixed(2)}\n                            className=\"rounded-l-none bg-gray-50\"\n                            readOnly\n                          />\n                        </div>\n                      </div>\n                    </div>\n\n                    {renderWeightedAveragePreview(item)}\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Total Summary */}\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex justify-between items-center text-lg font-semibold\">\n                <span>Total Purchase Amount:</span>\n                <span>{symbol}{calculateTotalAmount().toFixed(2)}</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-between pt-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting || calculateTotalAmount() === 0}\n              className=\"bg-green-500 hover:bg-green-600 text-white min-w-[120px]\"\n            >\n              {isSubmitting ? \"Recording...\" : \"Record Purchase\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":16233},"client/src/components/recipe.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport {\n  Form,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\nimport { useUnits } from \"@/hooks/useUnits\";\nimport { Trash2, Plus, Calculator, Save, Package } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\nconst recipeSchema = z.object({\n  productName: z.string().min(1, \"Product name is required\"),\n  categoryId: z.string().optional(),\n  unitId: z.string().min(1, \"Unit is required\"),\n  batchSize: z.string().min(1, \"Batch size is required\").default(\"1\"),\n  finishedGoodRequired: z\n    .string()\n    .min(1, \"FG required is required\")\n    .default(\"1\"),\n  productionQuantity: z\n    .string()\n    .min(1, \"Production quantity is required\")\n    .default(\"1\"),\n  normalLossMfg: z.string().default(\"5\"),\n  normalLossOnSold: z.string().default(\"0\"),\n  mfgAndPackagingCost: z.string().default(\"45\"),\n  overheadCost: z.string().default(\"5\"),\n  ingredients: z\n    .array(\n      z.object({\n        inventoryItemId: z.string().min(1, \"Ingredient is required\"),\n        quantity: z.string().min(1, \"Quantity is required\"),\n        unitId: z.string().min(1, \"Unit is required\"),\n      }),\n    )\n    .min(1, \"At least one ingredient is required\"),\n});\n\ninterface RecipeProps {\n  product?: any;\n  onSave?: (productData: any) => void;\n}\n\nexport default function Recipe({ product, onSave }: RecipeProps) {\n  const [calculations, setCalculations] = useState({\n    ingredientDetails: [] as any[],\n    subTotalForBatch: 0,\n    totalForProduction: 0,\n    totalForProductionGm: 0,\n    effectiveUnits: 0,\n    rmCostPerUnit: 0,\n    noOfFgToBeProduced: 0,\n    normalLossDuringMFG: 0,\n    normalLossOnSoldValue: 0,\n    effectiveUnitsProduced: 0,\n    estimatedCostPerUnit: 0,\n    mfgCostPerUnit: 0,\n    overheadCostPerUnit: 0,\n    finalCostPerUnit: 0,\n  });\n\n  const { formatCurrency } = useCurrency();\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n    retry: (failureCount, error) => {\n      if (isUnauthorizedError(error)) return false;\n      return failureCount < 3;\n    },\n  });\n\n  const { data: inventoryItems = [] } = useQuery({\n    queryKey: [\"/api/inventory\"],\n    retry: (failureCount, error) => {\n      if (isUnauthorizedError(error)) return false;\n      return failureCount < 3;\n    },\n  });\n\n  const { data: units = [] } = useUnits();\n\n  const form = useForm({\n    resolver: zodResolver(recipeSchema),\n    defaultValues: {\n      productName: product?.name || \"\",\n      categoryId: product?.categoryId?.toString() || \"\",\n      unitId: product?.unitId?.toString() || \"\",\n      batchSize: product?.batchSize?.toString() || \"1\",\n      finishedGoodRequired: \"1\",\n      productionQuantity: \"1\",\n      normalLossMfg: \"5\",\n      normalLossOnSold: \"0\",\n      mfgAndPackagingCost: \"45\",\n      overheadCost: \"5\",\n      ingredients: product?.ingredients?.length > 0 \n        ? product.ingredients.map((ing: any) => ({\n            inventoryItemId: ing.inventoryItemId?.toString() || \"\",\n            quantity: ing.quantity?.toString() || \"\",\n            unitId: ing.unitId?.toString() || \"\"\n          }))\n        : [{ inventoryItemId: \"\", quantity: \"\", unitId: \"\" }],\n    },\n  });\n\n  // Filter items that are suitable as ingredients\n  const ingredients = Array.isArray(inventoryItems) ? (inventoryItems as any[]).filter(\n    (item: any) =>\n      item?.name &&\n      (item.group === \"raw-materials\" ||\n        item.group === \"ingredients\" ||\n        item.group === \"flour\" ||\n        item.group === \"dairy\" ||\n        item.group === \"sweeteners\" ||\n        item.group === \"spices\" ||\n        item.group === \"leavening\" ||\n        item.group === \"extracts\" ||\n        item.group === \"chocolate\" ||\n        item.group === \"nuts\" ||\n        item.group === \"fruits\" ||\n        !item.group ||\n        item.name.toLowerCase().includes(\"flour\") ||\n        item.name.toLowerCase().includes(\"sugar\") ||\n        item.name.toLowerCase().includes(\"butter\") ||\n        item.name.toLowerCase().includes(\"milk\") ||\n        item.name.toLowerCase().includes(\"egg\") ||\n        item.name.toLowerCase().includes(\"chocolate\") ||\n        item.name.toLowerCase().includes(\"vanilla\") ||\n        item.name.toLowerCase().includes(\"salt\") ||\n        item.name.toLowerCase().includes(\"baking\")),\n  ) : [];\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"ingredients\",\n  });\n\n  const calculateCosts = () => {\n    try {\n      const formIngredients = form.getValues(\"ingredients\");\n      const batchSize = parseFloat(form.getValues(\"batchSize\") || \"1\");\n      const finishedGoodRequired = parseFloat(\n        form.getValues(\"finishedGoodRequired\") || \"1\",\n      );\n      const productionQuantity = parseFloat(\n        form.getValues(\"productionQuantity\") || \"1\",\n      );\n      const normalLossMfg = parseFloat(form.getValues(\"normalLossMfg\") || \"5\");\n      const normalLossOnSold = parseFloat(\n        form.getValues(\"normalLossOnSold\") || \"0\",\n      );\n      const mfgAndPackagingCost = parseFloat(\n        form.getValues(\"mfgAndPackagingCost\") || \"45\",\n      );\n      const overheadCost = parseFloat(form.getValues(\"overheadCost\") || \"5\");\n\n      // Calculate ingredient details with improved error handling\n      const ingredientDetails = formIngredients\n        .map((ingredient, index) => {\n          try {\n            const item = ingredients.find(\n              (inv: any) => inv.id?.toString() === ingredient.inventoryItemId,\n            );\n            if (item && ingredient.quantity && ingredient.unitId) {\n              const quantity = parseFloat(ingredient.quantity);\n              const selectedUnit = Array.isArray(units) ? units.find((u: any) => u.id?.toString() === ingredient.unitId) : null;\n              const unitAbbr = selectedUnit?.abbreviation || item.unit || \"unit\";\n              \n              // Get the inventory item's storage unit details\n              const inventoryUnit = Array.isArray(units) ? units.find((u: any) => u.id === item.unitId) : null;\n              const inventoryUnitAbbr = inventoryUnit?.abbreviation || item.unit || \"unit\";\n              \n              // Calculate proper price per selected unit with improved conversion\n              let pricePerSelectedUnit = parseFloat(item.costPerUnit || \"0\");\n              let amount = quantity * pricePerSelectedUnit;\n              \n              // Handle unit conversion for cost calculation\n              if (inventoryUnitAbbr.toLowerCase() === 'bag' && unitAbbr.toLowerCase() !== 'bag') {\n                const bagToKgConversion = item.conversionRate ? parseFloat(item.conversionRate) : 50;\n                const pricePerKg = pricePerSelectedUnit / bagToKgConversion;\n                \n                if (unitAbbr.toLowerCase() === 'kg') {\n                  pricePerSelectedUnit = pricePerKg;\n                  amount = quantity * pricePerSelectedUnit;\n                } else if (unitAbbr.toLowerCase() === 'g' || unitAbbr.toLowerCase() === 'gm') {\n                  pricePerSelectedUnit = pricePerKg / 1000;\n                  amount = quantity * pricePerSelectedUnit;\n                }\n              } else if (inventoryUnitAbbr.toLowerCase() === 'kg' && unitAbbr.toLowerCase() === 'g') {\n                pricePerSelectedUnit = pricePerSelectedUnit / 1000;\n                amount = quantity * pricePerSelectedUnit;\n              } else if (inventoryUnitAbbr.toLowerCase() === 'g' && unitAbbr.toLowerCase() === 'kg') {\n                pricePerSelectedUnit = pricePerSelectedUnit * 1000;\n                amount = quantity * pricePerSelectedUnit;\n              }\n\n              return {\n                sn: index + 1,\n                particular: item.name,\n                qty: quantity,\n                unit: unitAbbr,\n                price: pricePerSelectedUnit,\n                unitType: `Per ${unitAbbr}`,\n                amount: amount,\n              };\n            }\n            return null;\n          } catch (error) {\n            console.error(\"Error calculating ingredient:\", error);\n            return null;\n          }\n        })\n        .filter(Boolean);\n\n      // Sub-total for batch\n      const subTotalForBatch = ingredientDetails.reduce(\n        (sum, item) => sum + (item?.amount || 0),\n        0,\n      );\n\n      // Scale factor for production\n      const scaleFactor = productionQuantity / batchSize;\n      const totalForProduction = subTotalForBatch * scaleFactor;\n\n      // Total weight in grams with improved conversion\n      const totalForProductionGm = ingredientDetails.reduce((sum, item) => {\n        if (!item) return sum;\n        \n        let qtyInGrams = item.qty;\n\n        switch(item.unit.toLowerCase()) {\n          case 'kg':\n            qtyInGrams = item.qty * 1000;\n            break;\n          case 'g':\n          case 'gm':\n          case 'grams':\n            qtyInGrams = item.qty;\n            break;\n          case 'ml':\n          case 'milliliters':\n            qtyInGrams = item.qty;\n            break;\n          case 'l':\n          case 'ltr':\n          case 'liters':\n            qtyInGrams = item.qty * 1000;\n            break;\n          case 'bag':\n            qtyInGrams = item.qty * 50000;\n            break;\n          default:\n            qtyInGrams = item.qty;\n        }\n\n        return sum + qtyInGrams * scaleFactor;\n      }, 0);\n\n      // No. of FG to be produced\n      const noOfFgToBeProduced =\n        finishedGoodRequired > 0\n          ? totalForProductionGm / finishedGoodRequired\n          : 0;\n\n      // Loss values in units\n      const normalLossDuringMFG = noOfFgToBeProduced * (normalLossMfg / 100);\n      const normalLossOnSoldValue = noOfFgToBeProduced * (normalLossOnSold / 100);\n\n      // Effective units produced after losses\n      const effectiveUnitsProduced =\n        noOfFgToBeProduced - normalLossDuringMFG - normalLossOnSoldValue;\n\n      // Cost per unit calculations\n      const estimatedCostPerUnit =\n        effectiveUnitsProduced > 0\n          ? subTotalForBatch / effectiveUnitsProduced\n          : 0;\n      const mfgCostPerUnit = estimatedCostPerUnit * (mfgAndPackagingCost / 100);\n      const overheadCostPerUnit = estimatedCostPerUnit * (overheadCost / 100);\n      const finalCostPerUnit =\n        estimatedCostPerUnit + mfgCostPerUnit + overheadCostPerUnit;\n\n      setCalculations({\n        ingredientDetails,\n        subTotalForBatch,\n        totalForProduction,\n        totalForProductionGm,\n        effectiveUnits: totalForProductionGm,\n        rmCostPerUnit: finishedGoodRequired * 350,\n        noOfFgToBeProduced,\n        normalLossDuringMFG,\n        normalLossOnSoldValue,\n        effectiveUnitsProduced,\n        estimatedCostPerUnit,\n        mfgCostPerUnit,\n        overheadCostPerUnit,\n        finalCostPerUnit,\n      });\n    } catch (error) {\n      console.error(\"Error in cost calculation:\", error);\n    }\n  };\n\n  // Reset form when product changes\n  useEffect(() => {\n    if (product) {\n      form.reset({\n        productName: product.name || \"\",\n        categoryId: product.categoryId?.toString() || \"\",\n        unitId: product.unitId?.toString() || \"\",\n        batchSize: product.batchSize?.toString() || \"1\",\n        finishedGoodRequired: \"1\",\n        productionQuantity: \"1\",\n        normalLossMfg: \"5\",\n        normalLossOnSold: \"0\",\n        mfgAndPackagingCost: \"45\",\n        overheadCost: \"5\",\n        ingredients: product.ingredients?.length > 0 \n          ? product.ingredients.map((ing: any) => ({\n              inventoryItemId: ing.inventoryItemId?.toString() || \"\",\n              quantity: ing.quantity?.toString() || \"\",\n              unitId: ing.unitId?.toString() || \"\"\n            }))\n          : [{ inventoryItemId: \"\", quantity: \"\", unitId: \"\" }],\n      });\n    }\n  }, [product, form]);\n\n  useEffect(() => {\n    calculateCosts();\n  }, [form.watch()]);\n\n  const handleSaveProduct = () => {\n    try {\n      const formData = form.getValues();\n      const productData = {\n        name: formData.productName,\n        categoryId: formData.categoryId ? parseInt(formData.categoryId) : null,\n        price: calculations.finalCostPerUnit,\n        cost: calculations.estimatedCostPerUnit,\n        batchSize: parseFloat(formData.batchSize),\n        ingredients: formData.ingredients.map((ing) => ({\n          inventoryItemId: parseInt(ing.inventoryItemId),\n          quantity: parseFloat(ing.quantity),\n          unitId: parseInt(ing.unitId),\n        })),\n      };\n\n      onSave?.(productData);\n    } catch (error) {\n      console.error(\"Error saving product:\", error);\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <Form {...form}>\n        <form className=\"space-y-8\">\n          {/* Product Information */}\n          <Card className=\"border-l-4 border-l-blue-500\">\n            <CardHeader className=\"bg-gradient-to-r from-blue-50 to-indigo-50\">\n              <CardTitle className=\"flex items-center gap-2\">\n                <Package className=\"h-5 w-5 text-blue-600\" />\n                Recipe Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-6 space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"productName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-semibold\">Product Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g., Artisan Bread\" className=\"h-11\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"categoryId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-semibold\">Category</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger className=\"h-11\">\n                            <SelectValue placeholder=\"Select category\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {Array.isArray(categories) && categories.map((category: any) => (\n                            <SelectItem\n                              key={category.id}\n                              value={category.id.toString()}\n                            >\n                              {category.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"unitId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-semibold\">Product Unit</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger className=\"h-11\">\n                            <SelectValue placeholder=\"Select unit\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {Array.isArray(units) && units\n                            .filter((unit: any) => unit.isActive)\n                            .map((unit: any) => (\n                              <SelectItem\n                                key={unit.id}\n                                value={unit.id.toString()}\n                              >\n                                {unit.name} ({unit.abbreviation})\n                              </SelectItem>\n                            ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Ingredients - Enhanced Table */}\n          <Card className=\"border-l-4 border-l-green-500\">\n            <CardHeader className=\"bg-gradient-to-r from-green-50 to-emerald-50\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Package className=\"h-5 w-5 text-green-600\" />\n                  Recipe Ingredients\n                </CardTitle>\n                <Badge variant=\"outline\" className=\"bg-white\">\n                  {fields.length} ingredient{fields.length !== 1 ? 's' : ''}\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <div className=\"overflow-x-auto\">\n                <div className=\"min-w-full bg-white rounded-lg\">\n                  {/* Table Header */}\n                  <div className=\"grid grid-cols-12 gap-4 p-4 bg-gray-50 border-b font-semibold text-sm text-gray-700\">\n                    <div className=\"col-span-1 text-center\">S.N</div>\n                    <div className=\"col-span-4\">Ingredient Name</div>\n                    <div className=\"col-span-2\">Quantity</div>\n                    <div className=\"col-span-3\">Unit</div>\n                    <div className=\"col-span-2 text-center\">Actions</div>\n                  </div>\n\n                  {/* Table Body */}\n                  <div className=\"divide-y divide-gray-100\">\n                    {fields.map((field, index) => (\n                      <div key={field.id} className=\"grid grid-cols-12 gap-4 p-4 hover:bg-gray-50 transition-colors\">\n                        {/* Serial Number */}\n                        <div className=\"col-span-1 flex items-center justify-center\">\n                          <Badge variant=\"secondary\" className=\"w-8 h-8 rounded-full flex items-center justify-center\">\n                            {index + 1}\n                          </Badge>\n                        </div>\n\n                        {/* Ingredient Select */}\n                        <div className=\"col-span-4\">\n                          <FormField\n                            control={form.control}\n                            name={`ingredients.${index}.inventoryItemId`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <Select\n                                  onValueChange={field.onChange}\n                                  value={field.value}\n                                >\n                                  <FormControl>\n                                    <SelectTrigger className=\"h-11\">\n                                      <SelectValue placeholder=\"Select ingredient\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    {ingredients.map((item: any) => (\n                                      <SelectItem\n                                        key={item.id}\n                                        value={item.id.toString()}\n                                      >\n                                        <div className=\"flex flex-col\">\n                                          <span className=\"font-medium\">{item.name}</span>\n                                          <span className=\"text-xs text-gray-500\">\n                                            {formatCurrency(item.costPerUnit)}/{item.unit}\n                                          </span>\n                                        </div>\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage className=\"text-xs\" />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        {/* Quantity Input */}\n                        <div className=\"col-span-2\">\n                          <FormField\n                            control={form.control}\n                            name={`ingredients.${index}.quantity`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormControl>\n                                  <Input\n                                    type=\"number\"\n                                    step=\"0.01\"\n                                    placeholder=\"0.00\"\n                                    className=\"h-11\"\n                                    {...field}\n                                  />\n                                </FormControl>\n                                <FormMessage className=\"text-xs\" />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        {/* Unit Select */}\n                        <div className=\"col-span-3\">\n                          <FormField\n                            control={form.control}\n                            name={`ingredients.${index}.unitId`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <Select\n                                  onValueChange={field.onChange}\n                                  value={field.value}\n                                >\n                                  <FormControl>\n                                    <SelectTrigger className=\"h-11\">\n                                      <SelectValue placeholder=\"Unit\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    {Array.isArray(units) && units\n                                      .filter((unit: any) => unit.isActive)\n                                      .map((unit: any) => (\n                                        <SelectItem\n                                          key={unit.id}\n                                          value={unit.id.toString()}\n                                        >\n                                          {unit.name} ({unit.abbreviation})\n                                        </SelectItem>\n                                      ))}\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage className=\"text-xs\" />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        {/* Actions */}\n                        <div className=\"col-span-2 flex items-center justify-center\">\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => remove(index)}\n                            disabled={fields.length === 1}\n                            className=\"h-9 w-9 p-0 text-red-600 hover:text-red-700 hover:bg-red-50\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n\n                  {/* Add Ingredient Button */}\n                  <div className=\"p-4 border-t bg-gray-50/50\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() =>\n                        append({\n                          inventoryItemId: \"\",\n                          quantity: \"\",\n                          unitId: \"\",\n                        })\n                      }\n                      className=\"w-full h-11 border-dashed border-2 hover:bg-green-50\"\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Ingredient\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Production Parameters */}\n          <Card className=\"border-l-4 border-l-purple-500\">\n            <CardHeader className=\"bg-gradient-to-r from-purple-50 to-violet-50\">\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calculator className=\"h-5 w-5 text-purple-600\" />\n                Production Parameters\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"batchSize\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-semibold\">Batch Size (kg)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" step=\"0.01\" className=\"h-11\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"finishedGoodRequired\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-semibold\">1 unit FG required (Gm RM)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" step=\"0.01\" className=\"h-11\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"normalLossMfg\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-semibold\">Normal Loss during mfg. (%)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" step=\"0.1\" className=\"h-11\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"normalLossOnSold\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-semibold\">Normal Loss on sold FG (%)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" step=\"0.1\" className=\"h-11\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"mfgAndPackagingCost\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-semibold\">Mfg. and packaging cost (%)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" step=\"0.1\" className=\"h-11\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"overheadCost\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-semibold\">Overhead cost (%)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" step=\"0.1\" className=\"h-11\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </form>\n      </Form>\n\n      {/* Enhanced Cost Breakdown */}\n      <Card className=\"border-l-4 border-l-orange-500\">\n        <CardHeader className=\"bg-gradient-to-r from-orange-50 to-amber-50\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calculator className=\"h-5 w-5 text-orange-600\" />\n            {product ? \"Edit Recipe\" : \"Recipe\"}: {form.getValues(\"productName\") || \"Untitled Recipe\"}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"pt-6\">\n          {/* Computation of Total Cost */}\n          <div className=\"mb-8\">\n            <h3 className=\"text-lg font-semibold mb-4 text-gray-800\">Computation of Total Cost</h3>\n            <div className=\"overflow-x-auto rounded-lg border\">\n              <table className=\"w-full bg-white\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">S.N</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">Particulars</th>\n                    <th className=\"px-4 py-3 text-right text-xs font-semibold text-gray-600 uppercase tracking-wider\">Qty.</th>\n                    <th className=\"px-4 py-3 text-center text-xs font-semibold text-gray-600 uppercase tracking-wider\">Unit</th>\n                    <th className=\"px-4 py-3 text-right text-xs font-semibold text-gray-600 uppercase tracking-wider\">Price</th>\n                    <th className=\"px-4 py-3 text-center text-xs font-semibold text-gray-600 uppercase tracking-wider\">Unit</th>\n                    <th className=\"px-4 py-3 text-right text-xs font-semibold text-gray-600 uppercase tracking-wider\">Amount</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-gray-200\">\n                  {calculations.ingredientDetails.map((item, index) => (\n                    <tr key={index} className=\"hover:bg-gray-50\">\n                      <td className=\"px-4 py-3 text-sm text-center\">{item.sn}</td>\n                      <td className=\"px-4 py-3 text-sm font-medium text-gray-900\">{item.particular}</td>\n                      <td className=\"px-4 py-3 text-sm text-right\">{item.qty?.toFixed(2)}</td>\n                      <td className=\"px-4 py-3 text-sm text-center\">\n                        <Badge variant=\"outline\">{item.unit}</Badge>\n                      </td>\n                      <td className=\"px-4 py-3 text-sm text-right\">{formatCurrency(item.price)}</td>\n                      <td className=\"px-4 py-3 text-sm text-center text-gray-600\">{item.unitType}</td>\n                      <td className=\"px-4 py-3 text-sm text-right font-medium\">{formatCurrency(item.amount)}</td>\n                    </tr>\n                  ))}\n                  <tr className=\"bg-yellow-50 border-t-2 border-yellow-200\">\n                    <td className=\"px-4 py-3 text-sm font-bold text-center\">A.</td>\n                    <td className=\"px-4 py-3 text-sm font-bold\">\n                      Total for {form.getValues(\"batchSize\")} kg\n                    </td>\n                    <td className=\"px-4 py-3 text-sm text-right font-medium\">\n                      {calculations.totalForProductionGm.toFixed(1)}\n                    </td>\n                    <td className=\"px-4 py-3 text-sm text-center\">\n                      <Badge variant=\"secondary\">gm</Badge>\n                    </td>\n                    <td className=\"px-4 py-3\"></td>\n                    <td className=\"px-4 py-3\"></td>\n                    <td className=\"px-4 py-3 text-sm text-right font-bold text-green-700\">\n                      {formatCurrency(calculations.subTotalForBatch ?? 0)}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          {/* Computation of Effective Unit */}\n          <div className=\"mb-8\">\n            <h3 className=\"text-lg font-semibold mb-4 text-gray-800\">Computation of Effective Unit</h3>\n            <div className=\"overflow-x-auto rounded-lg border\">\n              <table className=\"w-full bg-white\">\n                <tbody className=\"divide-y divide-gray-200\">\n                  <tr className=\"hover:bg-gray-50\">\n                    <td className=\"px-4 py-3 text-sm w-12\">1</td>\n                    <td className=\"px-4 py-3 text-sm\">Total for {form.getValues(\"batchSize\")} kg</td>\n                    <td className=\"px-4 py-3 text-sm text-right font-medium\" colSpan={4}>\n                      {calculations.totalForProductionGm.toFixed(1)} gm\n                    </td>\n                  </tr>\n                  <tr className=\"hover:bg-gray-50\">\n                    <td className=\"px-4 py-3 text-sm\">2</td>\n                    <td className=\"px-4 py-3 text-sm\">1 unit FG required ..... Gm RM</td>\n                    <td className=\"px-4 py-3 text-sm text-right font-medium\" colSpan={4}>\n                      {form.getValues(\"finishedGoodRequired\")} gm\n                    </td>\n                  </tr>\n                  <tr className=\"hover:bg-gray-50\">\n                    <td className=\"px-4 py-3 text-sm\">3</td>\n                    <td className=\"px-4 py-3 text-sm\">No. of FG to be Produced</td>\n                    <td className=\"px-4 py-3 text-sm text-right font-medium\" colSpan={4}>\n                      {calculations.noOfFgToBeProduced.toFixed(2)} pcs\n                    </td>\n                  </tr>\n                  <tr className=\"hover:bg-gray-50\">\n                    <td className=\"px-4 py-3 text-sm\">4</td>\n                    <td className=\"px-4 py-3 text-sm\">Less: Normal Loss during mfg.</td>\n                    <td className=\"px-4 py-3 text-sm text-right\">{form.getValues(\"normalLossMfg\")}%</td>\n                    <td className=\"px-4 py-3 text-sm text-right font-medium\" colSpan={3}>\n                      {calculations.normalLossDuringMFG.toFixed(2)} pcs\n                    </td>\n                  </tr>\n                  <tr className=\"hover:bg-gray-50\">\n                    <td className=\"px-4 py-3 text-sm\">5</td>\n                    <td className=\"px-4 py-3 text-sm\">Less: Normal Loss on sold FG</td>\n                    <td className=\"px-4 py-3 text-sm text-right\">{form.getValues(\"normalLossOnSold\")}%</td>\n                    <td className=\"px-4 py-3 text-sm text-right font-medium\" colSpan={3}>\n                      {calculations.normalLossOnSoldValue.toFixed(2)} pcs\n                    </td>\n                  </tr>\n                  <tr className=\"bg-yellow-50 border-t-2 border-yellow-200\">\n                    <td className=\"px-4 py-3 text-sm font-bold\">B.</td>\n                    <td className=\"px-4 py-3 text-sm font-bold\">Effective No. of FG produced</td>\n                    <td className=\"px-4 py-3 text-sm text-right font-bold text-green-700\" colSpan={4}>\n                      {calculations.effectiveUnitsProduced.toFixed(2)} pcs\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          {/* Cost per unit And selling price per unit */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4 text-gray-800\">Cost per unit And selling price per unit</h3>\n            <div className=\"overflow-x-auto rounded-lg border\">\n              <table className=\"w-full bg-white\">\n                <tbody className=\"divide-y divide-gray-200\">\n                  <tr className=\"hover:bg-gray-50\">\n                    <td className=\"px-4 py-3 text-sm w-12\">I</td>\n                    <td className=\"px-4 py-3 text-sm\">Estimated Cost per unit</td>\n                    <td className=\"px-4 py-3 text-sm text-center\">A / B</td>\n                    <td className=\"px-4 py-3 text-sm text-right font-medium\">\n                      {formatCurrency(calculations.estimatedCostPerUnit)}\n                    </td>\n                  </tr>\n                  <tr className=\"hover:bg-gray-50\">\n                    <td className=\"px-4 py-3 text-sm\">II</td>\n                    <td className=\"px-4 py-3 text-sm\">Mfg. and packaging cost per unit</td>\n                    <td className=\"px-4 py-3 text-sm text-right\">{form.getValues(\"mfgAndPackagingCost\")}%</td>\n                    <td className=\"px-4 py-3 text-sm text-right font-medium\">\n                      {formatCurrency(calculations.mfgCostPerUnit)}\n                    </td>\n                  </tr>\n                  <tr className=\"hover:bg-gray-50\">\n                    <td className=\"px-4 py-3 text-sm\">III</td>\n                    <td className=\"px-4 py-3 text-sm\">Overhead cost per unit</td>\n                    <td className=\"px-4 py-3 text-sm text-right\">{form.getValues(\"overheadCost\")}%</td>\n                    <td className=\"px-4 py-3 text-sm text-right font-medium\">\n                      {formatCurrency(calculations.overheadCostPerUnit)}\n                    </td>\n                  </tr>\n                  <tr className=\"bg-green-50 border-t-2 border-green-200\">\n                    <td className=\"px-4 py-3 text-sm font-bold\"></td>\n                    <td className=\"px-4 py-3 text-sm font-bold\">Cost per unit</td>\n                    <td className=\"px-4 py-3 text-sm text-center font-medium\">I + II + III</td>\n                    <td className=\"px-4 py-3 text-sm text-right font-bold text-2xl text-green-700\">\n                      {formatCurrency(calculations.finalCostPerUnit)}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Actions */}\n      <div className=\"flex justify-end space-x-4\">\n        <Button variant=\"outline\" onClick={calculateCosts} className=\"h-11\">\n          <Calculator className=\"h-4 w-4 mr-2\" />\n          Recalculate\n        </Button>\n        <Button\n          onClick={handleSaveProduct}\n          disabled={!form.getValues(\"productName\")}\n          className=\"h-11\"\n        >\n          <Save className=\"h-4 w-4 mr-2\" />\n          {product ? \"Update Recipe\" : \"Save as Product\"}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":39464},"client/src/pages/recipes.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { SearchBar } from \"@/components/search-bar\";\nimport Recipe from \"@/components/recipe\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCurrency } from \"@/hooks/useCurrency\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useTableSort } from \"@/hooks/useTableSort\";\nimport { SortableTableHeader } from \"@/components/ui/sortable-table-header\";\nimport {\n  Pagination,\n  PaginationInfo,\n  PageSizeSelector,\n  usePagination,\n} from \"@/components/ui/pagination\";\nimport {\n  Plus,\n  Edit,\n  Trash2,\n  Package,\n  Calculator,\n  ChefHat,\n  Eye\n} from \"lucide-react\";\n\nexport default function Recipes() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingRecipe, setEditingRecipe] = useState<any>(null);\n  const [viewingRecipe, setViewingRecipe] = useState<any>(null);\n  const { toast } = useToast();\n  const { formatCurrency } = useCurrency();\n  const queryClient = useQueryClient();\n\n  // Fetch recipes (products with recipe data)\n  const { data: recipes = [], isLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n    retry: (failureCount, error) => {\n      if (isUnauthorizedError(error)) return false;\n      return failureCount < 3;\n    },\n  });\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n    retry: (failureCount, error) => {\n      if (isUnauthorizedError(error)) return false;\n      return failureCount < 3;\n    },\n  });\n\n  // Filter recipes based on search\n  const filteredProducts = recipes.filter((recipe: any) => {\n    const matchesSearch = recipe.name\n      .toLowerCase()\n      .includes(searchQuery.toLowerCase());\n    return matchesSearch;\n  });\n\n  // Add sorting functionality\n  const { sortedData, sortConfig, requestSort } = useTableSort(\n    filteredProducts,\n    \"name\",\n  );\n\n  // Add pagination functionality\n  const {\n    currentItems,\n    currentPage,\n    totalPages,\n    pageSize,\n    setPageSize,\n    goToPage,\n    totalItems,\n  } = usePagination(sortedData, 6);\n\n  const handleSaveProduct = (productData: any) => {\n    saveMutation.mutate(productData);\n  };\n\n  const handleEdit = (recipe: any) => {\n    setEditingRecipe(recipe);\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (recipe: any) => {\n    if (window.confirm(`Are you sure you want to delete the recipe \"${recipe.name}\"?`)) {\n      deleteMutation.mutate(recipe.id);\n    }\n  };\n\n  const handleAddNew = () => {\n    setEditingRecipe(null);\n    setIsDialogOpen(true);\n  };\n\n  const getCategoryName = (categoryId: number) => {\n    const category = categories.find((c: any) => c.id === categoryId);\n    return category?.name || \"Uncategorized\";\n  };\n\n  const getStatusBadge = (recipe: any) => {\n    if (recipe.cost && recipe.price) {\n      const margin = ((recipe.price - recipe.cost) / recipe.price) * 100;\n      if (margin > 30) {\n        return <Badge className=\"bg-green-100 text-green-800\">Profitable</Badge>;\n      } else if (margin > 10) {\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Moderate</Badge>;\n      } else {\n        return <Badge className=\"bg-red-100 text-red-800\">Low Margin</Badge>;\n      }\n    }\n    return <Badge variant=\"outline\">No Costing</Badge>;\n  };\n\n  // Create/Update mutation\n  const saveMutation = useMutation({\n    mutationFn: async (productData: any) => {\n      const url = editingRecipe\n        ? `/api/products/${editingRecipe.id}`\n        : \"/api/products\";\n\n      const response = await fetch(url, {\n        method: editingRecipe ? \"PUT\" : \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(productData),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to ${editingRecipe ? 'update' : 'create'} recipe`);\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setIsDialogOpen(false);\n      setEditingRecipe(null);\n      toast({\n        title: \"Success\",\n        description: `Recipe ${editingRecipe ? 'updated' : 'created'} successfully`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || `Failed to ${editingRecipe ? 'update' : 'create'} recipe`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/products/${id}`, {\n        method: \"DELETE\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to delete recipe\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Success\",\n        description: \"Recipe deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete recipe\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight flex items-center gap-2\">\n            <ChefHat className=\"h-8 w-8 text-orange-600\" />\n            Recipe Management\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Create and manage product recipes with automatic cost calculations\n          </p>\n        </div>\n\n        <Dialog\n          open={isDialogOpen}\n          onOpenChange={(open) => {\n            setIsDialogOpen(open);\n            if (!open) {\n              setEditingRecipe(null);\n            }\n          }}\n        >\n          <DialogTrigger asChild>\n            <Button onClick={handleAddNew} className=\"w-full sm:w-auto\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Recipe\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-7xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <Package className=\"h-5 w-5\" />\n                {editingRecipe ? \"Edit Recipe\" : \"Create New Recipe\"}\n              </DialogTitle>\n            </DialogHeader>\n            <Recipe\n              product={editingRecipe}\n              onSave={handleSaveProduct}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Recipes List */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Package className=\"h-5 w-5\" />\n              Recipes ({totalItems})\n            </CardTitle>\n            <div className=\"w-full sm:w-64\">\n              <SearchBar\n                placeholder=\"Search recipes...\"\n                value={searchQuery}\n                onChange={setSearchQuery}\n                className=\"w-full\"\n              />\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex justify-center py-12\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : recipes.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-muted-foreground mb-2\">\n                No recipes found\n              </h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {searchQuery\n                  ? \"Try adjusting your search criteria\"\n                  : \"Start by creating your first recipe\"}\n              </p>\n              <Button onClick={handleAddNew}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Recipe\n              </Button>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <SortableTableHeader sortConfig={sortConfig} requestSort={() => requestSort(\"name\")}>Recipe Name</SortableTableHeader>\n                    <SortableTableHeader sortConfig={sortConfig} requestSort={() => requestSort(\"categoryId\")}>Category</SortableTableHeader>\n                    <TableHead>Cost per Unit</TableHead>\n                    <TableHead>Selling Price</TableHead>\n                    <TableHead>Margin</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Ingredients</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {currentItems.map((recipe: any) => {\n                    const margin = recipe.cost && recipe.price\n                      ? ((recipe.price - recipe.cost) / recipe.price) * 100\n                      : 0;\n\n                    return (\n                      <TableRow key={recipe.id}>\n                        <TableCell>\n                          <div className=\"flex flex-col\">\n                            <span className=\"font-medium\">{recipe.name}</span>\n                            {recipe.description && (\n                              <span className=\"text-sm text-gray-500 truncate max-w-[200px]\">\n                                {recipe.description}\n                              </span>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">\n                            {getCategoryName(recipe.categoryId)}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          {recipe.cost ? formatCurrency(recipe.cost) : \"-\"}\n                        </TableCell>\n                        <TableCell>\n                          {recipe.price ? formatCurrency(recipe.price) : \"-\"}\n                        </TableCell>\n                        <TableCell>\n                          {margin > 0 ? (\n                            <span className={`font-medium ${\n                              margin > 30 ? 'text-green-600' :\n                              margin > 10 ? 'text-yellow-600' : 'text-red-600'\n                            }`}>\n                              {margin.toFixed(1)}%\n                            </span>\n                          ) : (\n                            \"-\"\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          {getStatusBadge(recipe)}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-1\">\n                            <Calculator className=\"h-4 w-4 text-gray-400\" />\n                            <span className=\"text-sm text-gray-600\">\n                              {recipe.ingredients?.length || 0} items\n                            </span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-1\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => setViewingRecipe(recipe)}\n                              className=\"text-blue-600 hover:text-blue-800\"\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEdit(recipe)}\n                              className=\"text-blue-600 hover:text-blue-800\"\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDelete(recipe)}\n                              className=\"text-red-600 hover:text-red-800\"\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Pagination Controls */}\n      {filteredProducts.length > 0 && (\n        <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 mt-6\">\n          <PaginationInfo\n            currentPage={currentPage}\n            totalPages={totalPages}\n            totalItems={totalItems}\n          />\n          <div className=\"flex items-center gap-4\">\n            <PageSizeSelector\n              pageSize={pageSize}\n              onPageSizeChange={setPageSize}\n              options={[6, 12, 18, 24]}\n            />\n            <Pagination\n              currentPage={currentPage}\n              totalPages={totalPages}\n              onPageChange={goToPage}\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Recipe View Dialog */}\n      <Dialog\n        open={!!viewingRecipe}\n        onOpenChange={(open) => !open && setViewingRecipe(null)}\n      >\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Eye className=\"h-5 w-5\" />\n              Recipe Details: {viewingRecipe?.name}\n            </DialogTitle>\n          </DialogHeader>\n          {viewingRecipe && (\n            <div className=\"space-y-6\">\n              {/* Basic Info */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-600\">Category</label>\n                  <p className=\"text-sm\">{getCategoryName(viewingRecipe.categoryId)}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-600\">Status</label>\n                  <div className=\"mt-1\">{getStatusBadge(viewingRecipe)}</div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-600\">Cost per Unit</label>\n                  <p className=\"text-sm font-medium\">\n                    {viewingRecipe.cost ? formatCurrency(viewingRecipe.cost) : \"Not calculated\"}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-600\">Selling Price</label>\n                  <p className=\"text-sm font-medium\">\n                    {viewingRecipe.price ? formatCurrency(viewingRecipe.price) : \"Not set\"}\n                  </p>\n                </div>\n              </div>\n\n              {/* Description */}\n              {viewingRecipe.description && (\n                <div>\n                  <label className=\"text-sm font-medium text-gray-600\">Description</label>\n                  <p className=\"text-sm mt-1\">{viewingRecipe.description}</p>\n                </div>\n              )}\n\n              {/* Ingredients */}\n              {viewingRecipe.ingredients && viewingRecipe.ingredients.length > 0 && (\n                <div>\n                  <label className=\"text-sm font-medium text-gray-600 mb-3 block\">\n                    Ingredients ({viewingRecipe.ingredients.length})\n                  </label>\n                  <div className=\"border rounded-lg overflow-hidden\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Ingredient</TableHead>\n                          <TableHead>Quantity</TableHead>\n                          <TableHead>Unit</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {viewingRecipe.ingredients.map((ingredient: any, index: number) => (\n                          <TableRow key={index}>\n                            <TableCell>{ingredient.name || \"Unknown\"}</TableCell>\n                            <TableCell>{ingredient.quantity}</TableCell>\n                            <TableCell>{ingredient.unit || \"unit\"}</TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"flex justify-end gap-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setViewingRecipe(null)}\n                >\n                  Close\n                </Button>\n                <Button\n                  onClick={() => {\n                    setViewingRecipe(null);\n                    handleEdit(viewingRecipe);\n                  }}\n                >\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Edit Recipe\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":18171},"client/src/components/ui/unit-selector.tsx":{"content":"import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { FormControl } from \"@/components/ui/form\";\nimport { useUnits } from \"@/hooks/useUnits\";\n\nexport interface UnitSelectorProps {\n  value?: string;\n  onValueChange: (value: string) => void;\n  placeholder?: string;\n  filterByType?: string; // weight, volume, count\n  required?: boolean;\n  disabled?: boolean;\n  className?: string;\n}\n\nexport function UnitSelector({\n  value,\n  onValueChange,\n  placeholder = \"Select unit\",\n  filterByType,\n  required = false,\n  disabled = false,\n  className\n}: UnitSelectorProps) {\n  const { data: units = [], isLoading } = useUnits();\n\n  const filteredUnits = filterByType \n    ? units.filter((unit: any) => unit.type === filterByType)\n    : units;\n\n  const activeUnits = filteredUnits.filter((unit: any) => unit.isActive !== false);\n\n  return (\n    <Select\n      value={value}\n      onValueChange={onValueChange}\n      disabled={disabled || isLoading}\n      required={required}\n    >\n      <FormControl>\n        <SelectTrigger className={className}>\n          <SelectValue placeholder={placeholder} />\n        </SelectTrigger>\n      </FormControl>\n      <SelectContent>\n        {isLoading ? (\n          <SelectItem value=\"loading\" disabled>\n            Loading units...\n          </SelectItem>\n        ) : activeUnits.length === 0 ? (\n          <SelectItem value=\"none\" disabled>\n            No units available\n          </SelectItem>\n        ) : (\n          activeUnits.map((unit: any) => (\n            <SelectItem key={unit.id} value={unit.id.toString()}>\n              {unit.name} ({unit.abbreviation})\n            </SelectItem>\n          ))\n        )}\n      </SelectContent>\n    </Select>\n  );\n}\n\nexport function UnitDisplay({ unitId, units, showAbbreviation = true }: {\n  unitId?: number | string;\n  units?: any[];\n  showAbbreviation?: boolean;\n}) {\n  const { data: allUnits = [] } = useUnits();\n  const unitsToUse = units || allUnits;\n  \n  if (!unitId) return <span className=\"text-gray-400\">No unit</span>;\n  \n  const unit = unitsToUse.find((u: any) => u.id.toString() === unitId.toString());\n  \n  if (!unit) return <span className=\"text-gray-400\">Unknown unit</span>;\n  \n  return (\n    <span className=\"text-gray-600\">\n      {showAbbreviation ? unit.abbreviation : unit.name}\n    </span>\n  );\n}","size_bytes":2344},"server/alertService.ts":{"content":"import { SecurityAlert } from \"./securityMonitor\";\n\nexport interface AlertChannel {\n  name: string;\n  enabled: boolean;\n  config: any;\n}\n\nexport interface EmailConfig {\n  enabled: boolean;\n  smtpHost?: string;\n  smtpPort?: number;\n  smtpUser?: string;\n  smtpPassword?: string;\n  fromEmail?: string;\n  adminEmails: string[];\n}\n\nexport interface SlackConfig {\n  enabled: boolean;\n  webhookUrl?: string;\n  channel?: string;\n}\n\nexport interface DashboardConfig {\n  enabled: boolean;\n  showInUI: boolean;\n  maxAlerts: number;\n}\n\nclass AlertService {\n  private emailConfig: EmailConfig = {\n    enabled: false,\n    adminEmails: ['admin@bakesewa.com'],\n  };\n\n  private slackConfig: SlackConfig = {\n    enabled: false,\n  };\n\n  private dashboardConfig: DashboardConfig = {\n    enabled: true,\n    showInUI: true,\n    maxAlerts: 50,\n  };\n\n  private dashboardAlerts: SecurityAlert[] = [];\n\n  constructor() {\n    console.log(\"üì¢ Alert Service initialized\");\n  }\n\n  public async sendAlert(alert: SecurityAlert): Promise<void> {\n    console.log(`üì¢ Processing alert: ${alert.title}`);\n\n    const promises: Promise<void>[] = [];\n\n    // Send email alerts\n    if (this.emailConfig.enabled) {\n      promises.push(this.sendEmailAlert(alert));\n    }\n\n    // Send Slack alerts\n    if (this.slackConfig.enabled) {\n      promises.push(this.sendSlackAlert(alert));\n    }\n\n    // Add to dashboard\n    if (this.dashboardConfig.enabled) {\n      promises.push(this.addToDashboard(alert));\n    }\n\n    try {\n      await Promise.allSettled(promises);\n    } catch (error) {\n      console.error(\"Error sending alerts:\", error);\n    }\n  }\n\n  private async sendEmailAlert(alert: SecurityAlert): Promise<void> {\n    try {\n      // In production, this would use a real email service like SendGrid, SES, etc.\n      console.log(`üìß EMAIL ALERT [${alert.severity}]: ${alert.title}`);\n      console.log(`   To: ${this.emailConfig.adminEmails.join(', ')}`);\n      console.log(`   Description: ${alert.description}`);\n      console.log(`   User: ${alert.userEmail}`);\n      console.log(`   IP: ${alert.ipAddress}`);\n      console.log(`   Time: ${alert.timestamp.toISOString()}`);\n      \n      // Mock implementation - In production, replace with actual email sending\n      const emailBody = this.generateEmailBody(alert);\n      \n      // Here you would integrate with your email service:\n      // await emailService.send({\n      //   to: this.emailConfig.adminEmails,\n      //   subject: `[SECURITY ALERT] ${alert.title}`,\n      //   html: emailBody\n      // });\n\n    } catch (error) {\n      console.error(\"Failed to send email alert:\", error);\n    }\n  }\n\n  private async sendSlackAlert(alert: SecurityAlert): Promise<void> {\n    try {\n      if (!this.slackConfig.webhookUrl) {\n        console.warn(\"Slack webhook URL not configured\");\n        return;\n      }\n\n      const slackMessage = {\n        text: `üö® Security Alert: ${alert.title}`,\n        attachments: [\n          {\n            color: this.getAlertColor(alert.severity),\n            fields: [\n              {\n                title: \"Severity\",\n                value: alert.severity,\n                short: true\n              },\n              {\n                title: \"User\",\n                value: alert.userEmail,\n                short: true\n              },\n              {\n                title: \"IP Address\",\n                value: alert.ipAddress,\n                short: true\n              },\n              {\n                title: \"Time\",\n                value: alert.timestamp.toISOString(),\n                short: true\n              },\n              {\n                title: \"Description\",\n                value: alert.description,\n                short: false\n              }\n            ],\n            footer: \"Bakery Security Monitor\",\n            ts: Math.floor(alert.timestamp.getTime() / 1000)\n          }\n        ]\n      };\n\n      // In production, send to Slack webhook\n      console.log(`üì± SLACK ALERT [${alert.severity}]: ${alert.title}`);\n      console.log(`   Channel: ${this.slackConfig.channel || 'default'}`);\n      console.log(`   Message:`, JSON.stringify(slackMessage, null, 2));\n\n      // Mock implementation - In production, replace with actual Slack API call\n      // const response = await fetch(this.slackConfig.webhookUrl, {\n      //   method: 'POST',\n      //   headers: { 'Content-Type': 'application/json' },\n      //   body: JSON.stringify(slackMessage)\n      // });\n\n    } catch (error) {\n      console.error(\"Failed to send Slack alert:\", error);\n    }\n  }\n\n  private async addToDashboard(alert: SecurityAlert): Promise<void> {\n    try {\n      this.dashboardAlerts.unshift(alert);\n      \n      // Keep only the most recent alerts\n      if (this.dashboardAlerts.length > this.dashboardConfig.maxAlerts) {\n        this.dashboardAlerts = this.dashboardAlerts.slice(0, this.dashboardConfig.maxAlerts);\n      }\n\n      console.log(`üìä Dashboard alert added: ${alert.title}`);\n    } catch (error) {\n      console.error(\"Failed to add alert to dashboard:\", error);\n    }\n  }\n\n  private generateEmailBody(alert: SecurityAlert): string {\n    return `\n      <html>\n        <head>\n          <style>\n            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }\n            .container { background-color: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n            .header { color: ${this.getAlertColorHex(alert.severity)}; font-size: 24px; font-weight: bold; margin-bottom: 20px; }\n            .severity { display: inline-block; padding: 8px 16px; border-radius: 4px; color: white; font-weight: bold; background-color: ${this.getAlertColorHex(alert.severity)}; }\n            .details { margin: 20px 0; }\n            .detail-row { margin: 10px 0; }\n            .label { font-weight: bold; color: #333; }\n            .value { color: #666; }\n            .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #999; font-size: 14px; }\n          </style>\n        </head>\n        <body>\n          <div class=\"container\">\n            <div class=\"header\">üö® Security Alert</div>\n            <div class=\"severity\">${alert.severity}</div>\n            <h2>${alert.title}</h2>\n            <p>${alert.description}</p>\n            \n            <div class=\"details\">\n              <div class=\"detail-row\">\n                <span class=\"label\">User:</span>\n                <span class=\"value\">${alert.userEmail} (${alert.userId})</span>\n              </div>\n              <div class=\"detail-row\">\n                <span class=\"label\">IP Address:</span>\n                <span class=\"value\">${alert.ipAddress}</span>\n              </div>\n              <div class=\"detail-row\">\n                <span class=\"label\">Time:</span>\n                <span class=\"value\">${alert.timestamp.toISOString()}</span>\n              </div>\n              ${alert.metadata ? `\n                <div class=\"detail-row\">\n                  <span class=\"label\">Additional Details:</span>\n                  <span class=\"value\">${JSON.stringify(alert.metadata, null, 2)}</span>\n                </div>\n              ` : ''}\n            </div>\n            \n            <div class=\"footer\">\n              This alert was generated by the Bakery Management System Security Monitor.\n              Please investigate this incident immediately.\n            </div>\n          </div>\n        </body>\n      </html>\n    `;\n  }\n\n  private getAlertColor(severity: string): string {\n    switch (severity) {\n      case 'CRITICAL': return 'danger';\n      case 'HIGH': return 'warning';\n      case 'MEDIUM': return '#ff9500';\n      case 'LOW': return 'good';\n      default: return '#cccccc';\n    }\n  }\n\n  private getAlertColorHex(severity: string): string {\n    switch (severity) {\n      case 'CRITICAL': return '#dc3545';\n      case 'HIGH': return '#fd7e14';\n      case 'MEDIUM': return '#ffc107';\n      case 'LOW': return '#28a745';\n      default: return '#6c757d';\n    }\n  }\n\n  // Configuration methods\n  public configureEmail(config: EmailConfig) {\n    this.emailConfig = { ...this.emailConfig, ...config };\n    console.log(`üìß Email alerts ${config.enabled ? 'enabled' : 'disabled'}`);\n  }\n\n  public configureSlack(config: SlackConfig) {\n    this.slackConfig = { ...this.slackConfig, ...config };\n    console.log(`üì± Slack alerts ${config.enabled ? 'enabled' : 'disabled'}`);\n  }\n\n  public configureDashboard(config: DashboardConfig) {\n    this.dashboardConfig = { ...this.dashboardConfig, ...config };\n    console.log(`üìä Dashboard alerts ${config.enabled ? 'enabled' : 'disabled'}`);\n  }\n\n  // Get dashboard alerts for UI\n  public getDashboardAlerts(): SecurityAlert[] {\n    return [...this.dashboardAlerts];\n  }\n\n  // Clear dashboard alerts\n  public clearDashboardAlerts() {\n    this.dashboardAlerts = [];\n    console.log(\"üìä Dashboard alerts cleared\");\n  }\n\n  // Test alert functionality\n  public async sendTestAlert(): Promise<void> {\n    const testAlert: SecurityAlert = {\n      id: 'test_' + Date.now(),\n      type: 'API_ABUSE',\n      severity: 'MEDIUM',\n      title: 'Test Alert',\n      description: 'This is a test alert to verify the alert system is working correctly.',\n      userId: 'test_user',\n      userEmail: 'test@example.com',\n      ipAddress: '192.168.1.100',\n      timestamp: new Date(),\n      metadata: {\n        test: true,\n        component: 'Alert Service'\n      }\n    };\n\n    await this.sendAlert(testAlert);\n    console.log(\"‚úÖ Test alert sent successfully\");\n  }\n}\n\nexport const alertService = new AlertService();","size_bytes":9553},"server/securityMonitor.ts":{"content":"import { storage } from \"./lib/storage\";\nimport { db } from \"./db\";\nimport { loginLogs, auditLogs } from \"../shared/schema\";\nimport { eq, gte, count, desc, sql } from \"drizzle-orm\";\n\nexport interface SecurityAlert {\n  id: string;\n  type: 'BRUTE_FORCE' | 'SUSPICIOUS_LOGIN' | 'ROLE_ESCALATION' | 'BULK_OPERATION' | 'API_ABUSE';\n  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  title: string;\n  description: string;\n  userId: string;\n  userEmail: string;\n  ipAddress: string;\n  timestamp: Date;\n  metadata: any;\n}\n\nexport interface SecurityMetrics {\n  failedLogins24h: number;\n  suspiciousActivities24h: number;\n  activeThreats: SecurityAlert[];\n  riskScore: number;\n  recentAlerts: SecurityAlert[];\n}\n\nclass SecurityMonitorService {\n  private alerts: SecurityAlert[] = [];\n  private monitoringEnabled = true;\n  private alertCallbacks: ((alert: SecurityAlert) => void)[] = [];\n\n  // Configure alert thresholds\n  private readonly config = {\n    BRUTE_FORCE_THRESHOLD: 5, // Failed logins from same IP\n    BRUTE_FORCE_WINDOW: 15 * 60 * 1000, // 15 minutes\n    SUSPICIOUS_LOGIN_THRESHOLD: 3, // Logins from different locations\n    BULK_OPERATION_THRESHOLD: 20, // Operations in short time\n    API_ABUSE_THRESHOLD: 100, // API calls per minute\n    RISK_CALCULATION_WINDOW: 24 * 60 * 60 * 1000, // 24 hours\n  };\n\n  constructor() {\n    // Start monitoring\n    this.startMonitoring();\n  }\n\n  private startMonitoring() {\n    console.log(\"üõ°Ô∏è Security Monitor started\");\n    \n    // Check for threats every minute\n    setInterval(() => {\n      this.checkForThreats();\n    }, 60 * 1000);\n\n    // Clean old alerts every hour\n    setInterval(() => {\n      this.cleanOldAlerts();\n    }, 60 * 60 * 1000);\n  }\n\n  private async checkForThreats() {\n    if (!this.monitoringEnabled) return;\n\n    try {\n      await Promise.all([\n        this.detectBruteForceAttacks(),\n        this.detectSuspiciousLogins(),\n        this.detectBulkOperations(),\n        this.detectAPIAbuse(),\n        this.detectRoleEscalationAttempts(),\n      ]);\n    } catch (error) {\n      console.error(\"Security monitoring error:\", error);\n    }\n  }\n\n  // Detect brute force attacks\n  private async detectBruteForceAttacks() {\n    const threshold = new Date(Date.now() - this.config.BRUTE_FORCE_WINDOW);\n    \n    const suspiciousIPs = await db\n      .select({\n        ipAddress: loginLogs.ipAddress,\n        failedCount: count(),\n      })\n      .from(loginLogs)\n      .where(\n        sql`${loginLogs.status} = 'failed' AND ${loginLogs.loginTime} >= ${threshold.toISOString()}`\n      )\n      .groupBy(loginLogs.ipAddress)\n      .having(sql`COUNT(*) >= ${this.config.BRUTE_FORCE_THRESHOLD}`);\n\n    for (const suspiciousIP of suspiciousIPs) {\n      await this.createAlert({\n        type: 'BRUTE_FORCE',\n        severity: 'HIGH',\n        title: 'Brute Force Attack Detected',\n        description: `${suspiciousIP.failedCount} failed login attempts from IP ${suspiciousIP.ipAddress} in the last 15 minutes`,\n        userId: 'system',\n        userEmail: 'system',\n        ipAddress: suspiciousIP.ipAddress,\n        metadata: {\n          attemptCount: suspiciousIP.failedCount,\n          timeWindow: '15 minutes',\n        },\n      });\n    }\n  }\n\n  // Detect suspicious login patterns\n  private async detectSuspiciousLogins() {\n    const last24Hours = new Date(Date.now() - 24 * 60 * 60 * 1000);\n\n    const suspiciousUsers = await db\n      .select({\n        userId: loginLogs.userId,\n        email: loginLogs.email,\n        locationCount: sql<number>`COUNT(DISTINCT ${loginLogs.location})`,\n        ipCount: sql<number>`COUNT(DISTINCT ${loginLogs.ipAddress})`,\n      })\n      .from(loginLogs)\n      .where(\n        sql`${loginLogs.status} = 'success' AND ${loginLogs.loginTime} >= ${last24Hours.toISOString()}`\n      )\n      .groupBy(loginLogs.userId, loginLogs.email)\n      .having(sql`COUNT(DISTINCT ${loginLogs.location}) >= ${this.config.SUSPICIOUS_LOGIN_THRESHOLD}`);\n\n    for (const suspiciousUser of suspiciousUsers) {\n      await this.createAlert({\n        type: 'SUSPICIOUS_LOGIN',\n        severity: 'MEDIUM',\n        title: 'Suspicious Login Pattern',\n        description: `User ${suspiciousUser.email} logged in from ${suspiciousUser.locationCount} different locations in 24 hours`,\n        userId: suspiciousUser.userId,\n        userEmail: suspiciousUser.email,\n        ipAddress: 'multiple',\n        metadata: {\n          locationCount: suspiciousUser.locationCount,\n          ipCount: suspiciousUser.ipCount,\n        },\n      });\n    }\n  }\n\n  // Detect bulk operations\n  private async detectBulkOperations() {\n    const last10Minutes = new Date(Date.now() - 10 * 60 * 1000);\n\n    const bulkOperators = await db\n      .select({\n        userId: auditLogs.userId,\n        userEmail: auditLogs.userEmail,\n        operationCount: count(),\n      })\n      .from(auditLogs)\n      .where(\n        sql`${auditLogs.timestamp} >= ${last10Minutes.toISOString()} AND ${auditLogs.action} IN ('CREATE', 'UPDATE', 'DELETE')`\n      )\n      .groupBy(auditLogs.userId, auditLogs.userEmail)\n      .having(sql`COUNT(*) >= ${this.config.BULK_OPERATION_THRESHOLD}`);\n\n    for (const operator of bulkOperators) {\n      await this.createAlert({\n        type: 'BULK_OPERATION',\n        severity: 'MEDIUM',\n        title: 'Bulk Operations Detected',\n        description: `User ${operator.userEmail} performed ${operator.operationCount} operations in 10 minutes`,\n        userId: operator.userId,\n        userEmail: operator.userEmail,\n        ipAddress: 'unknown',\n        metadata: {\n          operationCount: operator.operationCount,\n          timeWindow: '10 minutes',\n        },\n      });\n    }\n  }\n\n  // Detect API abuse\n  private async detectAPIAbuse() {\n    const lastMinute = new Date(Date.now() - 60 * 1000);\n\n    const apiAbusers = await db\n      .select({\n        ipAddress: auditLogs.ipAddress,\n        requestCount: count(),\n      })\n      .from(auditLogs)\n      .where(sql`${auditLogs.timestamp} >= ${lastMinute.toISOString()}`)\n      .groupBy(auditLogs.ipAddress)\n      .having(sql`COUNT(*) >= ${this.config.API_ABUSE_THRESHOLD}`);\n\n    for (const abuser of apiAbusers) {\n      await this.createAlert({\n        type: 'API_ABUSE',\n        severity: 'HIGH',\n        title: 'API Abuse Detected',\n        description: `Excessive API requests (${abuser.requestCount}) from IP ${abuser.ipAddress} in 1 minute`,\n        userId: 'system',\n        userEmail: 'system',\n        ipAddress: abuser.ipAddress,\n        metadata: {\n          requestCount: abuser.requestCount,\n          timeWindow: '1 minute',\n        },\n      });\n    }\n  }\n\n  // Detect role escalation attempts\n  private async detectRoleEscalationAttempts() {\n    const last30Minutes = new Date(Date.now() - 30 * 60 * 1000);\n\n    const roleChanges = await db\n      .select()\n      .from(auditLogs)\n      .where(\n        sql`${auditLogs.timestamp} >= ${last30Minutes.toISOString()} AND ${auditLogs.resource} = 'users' AND ${auditLogs.action} = 'UPDATE' AND ${auditLogs.newValues}::text LIKE '%\"role\":%'`\n      )\n      .orderBy(desc(auditLogs.timestamp));\n\n    for (const roleChange of roleChanges) {\n      const oldRole = (roleChange.oldValues as any)?.role;\n      const newRole = (roleChange.newValues as any)?.role;\n      \n      if (oldRole && newRole && this.isRoleEscalation(oldRole, newRole)) {\n        await this.createAlert({\n          type: 'ROLE_ESCALATION',\n          severity: 'CRITICAL',\n          title: 'Unauthorized Role Escalation',\n          description: `User ${roleChange.userEmail} changed user role from ${oldRole} to ${newRole}`,\n          userId: roleChange.userId,\n          userEmail: roleChange.userEmail,\n          ipAddress: roleChange.ipAddress,\n          metadata: {\n            oldRole,\n            newRole,\n            targetUser: roleChange.resourceId,\n          },\n        });\n      }\n    }\n  }\n\n  private isRoleEscalation(oldRole: string, newRole: string): boolean {\n    const roleHierarchy = ['staff', 'supervisor', 'marketer', 'manager', 'admin', 'super_admin'];\n    const oldIndex = roleHierarchy.indexOf(oldRole);\n    const newIndex = roleHierarchy.indexOf(newRole);\n    return newIndex > oldIndex;\n  }\n\n  private async createAlert(alertData: Omit<SecurityAlert, 'id' | 'timestamp'>) {\n    const alert: SecurityAlert = {\n      ...alertData,\n      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date(),\n    };\n\n    this.alerts.push(alert);\n\n    // Trigger alert callbacks\n    this.alertCallbacks.forEach(callback => {\n      try {\n        callback(alert);\n      } catch (error) {\n        console.error(\"Alert callback error:\", error);\n      }\n    });\n\n    console.warn(`üö® SECURITY ALERT [${alert.severity}]: ${alert.title}`);\n    console.warn(`   Description: ${alert.description}`);\n    console.warn(`   User: ${alert.userEmail} (${alert.userId})`);\n    console.warn(`   IP: ${alert.ipAddress}`);\n    console.warn(`   Time: ${alert.timestamp.toISOString()}`);\n\n    return alert;\n  }\n\n  private cleanOldAlerts() {\n    const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n    this.alerts = this.alerts.filter(alert => alert.timestamp > oneDayAgo);\n  }\n\n  public async getSecurityMetrics(): Promise<SecurityMetrics> {\n    const last24Hours = new Date(Date.now() - 24 * 60 * 60 * 1000);\n\n    const [failedLoginsResult, suspiciousActivitiesResult] = await Promise.all([\n      db.select({ count: count() }).from(loginLogs)\n        .where(sql`${loginLogs.status} = 'failed' AND ${loginLogs.loginTime} >= ${last24Hours.toISOString()}`),\n      db.select({ count: count() }).from(auditLogs)\n        .where(sql`${auditLogs.status} = 'failed' AND ${auditLogs.timestamp} >= ${last24Hours.toISOString()}`)\n    ]);\n\n    const failedLogins24h = failedLoginsResult[0]?.count || 0;\n    const suspiciousActivities24h = suspiciousActivitiesResult[0]?.count || 0;\n    const activeThreats = this.alerts.filter(alert => \n      alert.timestamp > new Date(Date.now() - 60 * 60 * 1000) && \n      ['HIGH', 'CRITICAL'].includes(alert.severity)\n    );\n    const recentAlerts = this.alerts\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n      .slice(0, 10);\n\n    // Calculate risk score based on various factors\n    const riskScore = this.calculateRiskScore(failedLogins24h, suspiciousActivities24h, activeThreats.length);\n\n    return {\n      failedLogins24h,\n      suspiciousActivities24h,\n      activeThreats,\n      riskScore,\n      recentAlerts,\n    };\n  }\n\n  private calculateRiskScore(failedLogins: number, suspiciousActivities: number, activeThreats: number): number {\n    let score = 0;\n\n    // Failed logins contribute to risk\n    score += Math.min(failedLogins * 2, 30);\n\n    // Suspicious activities contribute to risk\n    score += Math.min(suspiciousActivities * 3, 40);\n\n    // Active threats significantly increase risk\n    score += activeThreats * 10;\n\n    return Math.min(score, 100);\n  }\n\n  public onAlert(callback: (alert: SecurityAlert) => void) {\n    this.alertCallbacks.push(callback);\n  }\n\n  public getActiveAlerts(): SecurityAlert[] {\n    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n    return this.alerts.filter(alert => alert.timestamp > oneHourAgo);\n  }\n\n  public getAllAlerts(): SecurityAlert[] {\n    return [...this.alerts];\n  }\n\n  public enableMonitoring() {\n    this.monitoringEnabled = true;\n    console.log(\"üõ°Ô∏è Security monitoring enabled\");\n  }\n\n  public disableMonitoring() {\n    this.monitoringEnabled = false;\n    console.log(\"üõ°Ô∏è Security monitoring disabled\");\n  }\n}\n\nexport const securityMonitor = new SecurityMonitorService();","size_bytes":11579},"server/create-sample-inventory.ts":{"content":"\nimport { db } from \"./db\";\nimport { inventoryItems, units } from \"../shared/schema\";\n\nasync function createSampleInventory() {\n  try {\n    console.log(\"üèóÔ∏è Creating sample inventory items...\");\n\n    // Get some units first\n    const allUnits = await db.select().from(units).limit(10);\n    const kgUnit = allUnits.find(u => u.abbreviation === 'kg') || allUnits[0];\n    const pieceUnit = allUnits.find(u => u.abbreviation === 'pcs') || allUnits[1];\n    const literUnit = allUnits.find(u => u.abbreviation === 'L') || allUnits[2];\n\n    const sampleItems = [\n      {\n        invCode: \"INV001\",\n        name: \"All Purpose Flour\",\n        currentStock: \"50.00\",\n        openingStock: \"50.00\",\n        purchasedQuantity: \"0.00\",\n        consumedQuantity: \"0.00\",\n        closingStock: \"50.00\",\n        minLevel: \"10.00\",\n        unit: kgUnit?.abbreviation || \"kg\",\n        unitId: kgUnit?.id || 1,\n        costPerUnit: \"2.50\",\n        supplier: \"Local Mill\",\n        isIngredient: true,\n        notes: \"High quality baking flour\",\n        lastRestocked: new Date(),\n      },\n      {\n        invCode: \"INV002\",\n        name: \"White Sugar\",\n        currentStock: \"25.00\",\n        openingStock: \"25.00\",\n        purchasedQuantity: \"0.00\",\n        consumedQuantity: \"0.00\",\n        closingStock: \"25.00\",\n        minLevel: \"5.00\",\n        unit: kgUnit?.abbreviation || \"kg\",\n        unitId: kgUnit?.id || 1,\n        costPerUnit: \"1.80\",\n        supplier: \"Sugar Co.\",\n        isIngredient: true,\n        notes: \"Refined white sugar\",\n        lastRestocked: new Date(),\n      },\n      {\n        invCode: \"INV003\",\n        name: \"Butter\",\n        currentStock: \"15.00\",\n        openingStock: \"15.00\",\n        purchasedQuantity: \"0.00\",\n        consumedQuantity: \"0.00\",\n        closingStock: \"15.00\",\n        minLevel: \"3.00\",\n        unit: kgUnit?.abbreviation || \"kg\",\n        unitId: kgUnit?.id || 1,\n        costPerUnit: \"8.50\",\n        supplier: \"Dairy Farm\",\n        isIngredient: true,\n        notes: \"Fresh unsalted butter\",\n        lastRestocked: new Date(),\n      },\n      {\n        invCode: \"INV004\",\n        name: \"Whole Milk\",\n        currentStock: \"10.00\",\n        openingStock: \"10.00\",\n        purchasedQuantity: \"0.00\",\n        consumedQuantity: \"0.00\",\n        closingStock: \"10.00\",\n        minLevel: \"2.00\",\n        unit: literUnit?.abbreviation || \"L\",\n        unitId: literUnit?.id || 3,\n        costPerUnit: \"1.20\",\n        supplier: \"Dairy Farm\",\n        isIngredient: true,\n        notes: \"Fresh whole milk\",\n        lastRestocked: new Date(),\n      },\n      {\n        invCode: \"INV005\",\n        name: \"Chicken Eggs\",\n        currentStock: \"100.00\",\n        openingStock: \"100.00\",\n        purchasedQuantity: \"0.00\",\n        consumedQuantity: \"0.00\",\n        closingStock: \"100.00\",\n        minLevel: \"20.00\",\n        unit: pieceUnit?.abbreviation || \"pcs\",\n        unitId: pieceUnit?.id || 2,\n        costPerUnit: \"0.25\",\n        supplier: \"Poultry Farm\",\n        isIngredient: true,\n        notes: \"Large fresh eggs\",\n        lastRestocked: new Date(),\n      },\n    ];\n\n    // Check if items already exist\n    const existingItems = await db.select().from(inventoryItems).limit(1);\n    \n    if (existingItems.length === 0) {\n      console.log(\"üîß No existing items found, creating sample data...\");\n      const insertedItems = await db.insert(inventoryItems).values(sampleItems).returning();\n      console.log(`‚úÖ Created ${insertedItems.length} sample inventory items`);\n      \n      insertedItems.forEach((item, index) => {\n        console.log(`${index + 1}. ${item.name} - ${item.currentStock} ${item.unit}`);\n      });\n    } else {\n      console.log(`‚úÖ Found ${existingItems.length} existing inventory items, skipping sample data creation`);\n    }\n\n  } catch (error) {\n    console.error(\"‚ùå Error creating sample inventory:\", error);\n    throw error;\n  }\n}\n\n// Run if this file is executed directly\nif (require.main === module) {\n  createSampleInventory()\n    .then(() => {\n      console.log(\"üéâ Sample inventory creation completed!\");\n      process.exit(0);\n    })\n    .catch((error) => {\n      console.error(\"üí• Failed to create sample inventory:\", error);\n      process.exit(1);\n    });\n}\n\nexport { createSampleInventory };\n","size_bytes":4259},"server/create-user.ts":{"content":"\nimport { db } from \"./db\";\nimport { users } from \"../shared/schema\";\nimport bcrypt from \"bcrypt\";\n\nasync function createUser() {\n  try {\n    console.log(\"üë§ Creating new user...\");\n    \n    const userEmail = \"test@bakesewa.com\";\n    const userPassword = \"test123\";\n    const hashedPassword = await bcrypt.hash(userPassword, 10);\n    \n    const newUser = {\n      id: `user_${Date.now()}`,\n      email: userEmail,\n      password: hashedPassword,\n      firstName: \"Test\",\n      lastName: \"User\",\n      role: \"admin\"\n    };\n\n    await db.insert(users).values(newUser);\n    \n    console.log(\"\\n‚úÖ User created successfully!\");\n    console.log(\"\\n=== LOGIN CREDENTIALS ===\");\n    console.log(\"Email:\", userEmail);\n    console.log(\"Password:\", userPassword);\n    console.log(\"Role: admin\");\n    console.log(\"=========================\");\n    console.log(\"\\nüöÄ You can now login with these credentials!\");\n    \n  } catch (error) {\n    console.error(\"‚ùå Error creating user:\", error);\n    \n    if (error.message?.includes('relation \"users\" does not exist')) {\n      console.log(\"\\nüí° It looks like the database tables don't exist yet.\");\n      console.log(\"Please run the migration script first:\");\n      console.log(\"npx tsx server/migrate-and-seed.ts\");\n    }\n  }\n}\n\n// Run if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  createUser().then(() => {\n    console.log(\"Process completed\");\n    process.exit(0);\n  }).catch((error) => {\n    console.error(\"Process failed:\", error);\n    process.exit(1);\n  });\n}\n\nexport { createUser };\n","size_bytes":1573},"server/insert-comprehensive-data.ts":{"content":"\nimport { db } from \"./db\";\nimport {\n  categories,\n  inventoryCategories,\n  inventoryItems,\n  products,\n  productIngredients,\n  customers,\n  parties,\n  orders,\n  orderItems,\n  purchases,\n  purchaseItems,\n  expenses,\n  assets,\n  productionSchedule,\n  settings,\n  users,\n  units,\n  bills,\n  billItems,\n  inventoryTransactions,\n  auditLogs,\n  permissions,\n  userPermissions\n} from \"../shared/schema\";\nimport bcrypt from \"bcrypt\";\n\nexport async function insertComprehensiveData() {\n  console.log(\"üå± Inserting comprehensive data into all tables...\");\n  \n  try {\n    // Clear existing data in reverse order to handle foreign key constraints\n    console.log(\"üßπ Clearing existing data...\");\n    await db.delete(billItems);\n    await db.delete(bills);\n    await db.delete(orderItems);\n    await db.delete(orders);\n    await db.delete(productIngredients);\n    await db.delete(products);\n    await db.delete(categories);\n    await db.delete(purchaseItems);\n    await db.delete(purchases);\n    await db.delete(inventoryTransactions);\n    await db.delete(inventoryItems);\n    await db.delete(inventoryCategories);\n    await db.delete(customers);\n    await db.delete(parties);\n    await db.delete(expenses);\n    await db.delete(assets);\n    await db.delete(productionSchedule);\n    await db.delete(settings);\n    await db.delete(userPermissions);\n    await db.delete(permissions);\n    await db.delete(auditLogs);\n    await db.delete(users);\n    await db.delete(units);\n\n    // 1. Insert Units\n    console.log(\"üìè Inserting units...\");\n    const unitData = [\n      { name: \"Kilogram\", abbreviation: \"kg\", type: \"weight\", isActive: true },\n      { name: \"Gram\", abbreviation: \"g\", type: \"weight\", isActive: true },\n      { name: \"Liter\", abbreviation: \"l\", type: \"volume\", isActive: true },\n      { name: \"Milliliter\", abbreviation: \"ml\", type: \"volume\", isActive: true },\n      { name: \"Piece\", abbreviation: \"pcs\", type: \"count\", isActive: true },\n      { name: \"Dozen\", abbreviation: \"dz\", type: \"count\", isActive: true },\n      { name: \"Box\", abbreviation: \"box\", type: \"count\", isActive: true },\n      { name: \"Pack\", abbreviation: \"pack\", type: \"count\", isActive: true },\n      { name: \"Bottle\", abbreviation: \"btl\", type: \"count\", isActive: true },\n      { name: \"Bag\", abbreviation: \"bag\", type: \"count\", isActive: true }\n    ];\n    const insertedUnits = await db.insert(units).values(unitData).returning();\n\n    // 2. Insert Users\n    console.log(\"üë• Inserting users...\");\n    const userData = [\n      {\n        id: `super_admin_${Date.now()}`,\n        email: \"superadmin@bakesewa.com\",\n        password: await bcrypt.hash(\"superadmin123\", 10),\n        firstName: \"Super\",\n        lastName: \"Admin\",\n        role: \"super_admin\"\n      },\n      {\n        id: `admin_${Date.now()}`,\n        email: \"admin@bakesewa.com\",\n        password: await bcrypt.hash(\"admin123\", 10),\n        firstName: \"Admin\",\n        lastName: \"User\",\n        role: \"admin\"\n      },\n      {\n        id: `manager_${Date.now()}`,\n        email: \"manager@bakesewa.com\",\n        password: await bcrypt.hash(\"manager123\", 10),\n        firstName: \"Manager\",\n        lastName: \"User\",\n        role: \"manager\"\n      },\n      {\n        id: `staff_${Date.now()}`,\n        email: \"staff@bakesewa.com\",\n        password: await bcrypt.hash(\"staff123\", 10),\n        firstName: \"Staff\",\n        lastName: \"User\",\n        role: \"staff\"\n      }\n    ];\n    const insertedUsers = await db.insert(users).values(userData).returning();\n\n    // 3. Insert Permissions\n    console.log(\"üîê Inserting permissions...\");\n    const permissionData = [\n      { name: \"view_dashboard\", description: \"View dashboard\" },\n      { name: \"manage_users\", description: \"Manage users\" },\n      { name: \"manage_products\", description: \"Manage products\" },\n      { name: \"manage_inventory\", description: \"Manage inventory\" },\n      { name: \"manage_orders\", description: \"Manage orders\" },\n      { name: \"manage_purchases\", description: \"Manage purchases\" },\n      { name: \"view_reports\", description: \"View reports\" },\n      { name: \"manage_settings\", description: \"Manage settings\" }\n    ];\n    const insertedPermissions = await db.insert(permissions).values(permissionData).returning();\n\n    // 4. Insert Categories\n    console.log(\"üìÇ Inserting product categories...\");\n    const categoryData = [\n      { name: \"Cakes & Pastries\", description: \"All types of cakes, cupcakes, and pastries\" },\n      { name: \"Breads & Rolls\", description: \"Fresh baked breads and dinner rolls\" },\n      { name: \"Cookies & Biscuits\", description: \"Various cookies and biscuits\" },\n      { name: \"Seasonal Items\", description: \"Holiday and seasonal specialty items\" },\n      { name: \"Custom Orders\", description: \"Custom made items for special occasions\" }\n    ];\n    const insertedCategories = await db.insert(categories).values(categoryData).returning();\n\n    // 5. Insert Inventory Categories\n    console.log(\"üì¶ Inserting inventory categories...\");\n    const invCategoryData = [\n      { name: \"Baking Ingredients\", description: \"Flour, sugar, eggs, etc.\" },\n      { name: \"Dairy Products\", description: \"Milk, butter, cream, cheese\" },\n      { name: \"Flavorings\", description: \"Vanilla, chocolate, spices\" },\n      { name: \"Packaging\", description: \"Boxes, bags, containers\" },\n      { name: \"Equipment\", description: \"Baking tools and equipment\" }\n    ];\n    const insertedInvCategories = await db.insert(inventoryCategories).values(invCategoryData).returning();\n\n    // 6. Insert Inventory Items\n    console.log(\"üìã Inserting inventory items...\");\n    const inventoryData = [\n      {\n        name: \"All-Purpose Flour\",\n        currentStock: \"50.00\",\n        minLevel: \"10.00\",\n        unit: \"kg\",\n        costPerUnit: \"2.50\",\n        supplier: \"Premium Flour Co.\",\n        categoryId: insertedInvCategories[0].id,\n        lastRestocked: new Date()\n      },\n      {\n        name: \"Granulated Sugar\",\n        currentStock: \"25.00\",\n        minLevel: \"5.00\",\n        unit: \"kg\",\n        costPerUnit: \"1.80\",\n        supplier: \"Sweet Supply Inc.\",\n        categoryId: insertedInvCategories[0].id,\n        lastRestocked: new Date()\n      },\n      {\n        name: \"Fresh Eggs\",\n        currentStock: \"120.00\",\n        minLevel: \"24.00\",\n        unit: \"pieces\",\n        costPerUnit: \"0.25\",\n        supplier: \"Farm Fresh Eggs\",\n        categoryId: insertedInvCategories[1].id,\n        lastRestocked: new Date()\n      },\n      {\n        name: \"Unsalted Butter\",\n        currentStock: \"15.00\",\n        minLevel: \"3.00\",\n        unit: \"kg\",\n        costPerUnit: \"8.50\",\n        supplier: \"Dairy Best Ltd.\",\n        categoryId: insertedInvCategories[1].id,\n        lastRestocked: new Date()\n      },\n      {\n        name: \"Vanilla Extract\",\n        currentStock: \"2.00\",\n        minLevel: \"0.50\",\n        unit: \"liters\",\n        costPerUnit: \"45.00\",\n        supplier: \"Flavor Masters\",\n        categoryId: insertedInvCategories[2].id,\n        lastRestocked: new Date()\n      }\n    ];\n    const insertedInventory = await db.insert(inventoryItems).values(inventoryData).returning();\n\n    // 7. Insert Products\n    console.log(\"üç∞ Inserting products...\");\n    const productData = [\n      {\n        name: \"Chocolate Birthday Cake\",\n        description: \"Rich chocolate cake with chocolate frosting\",\n        categoryId: insertedCategories[0].id,\n        price: \"35.00\",\n        cost: \"18.50\",\n        margin: \"47.14\",\n        sku: \"CHOC-CAKE-001\",\n        isActive: true\n      },\n      {\n        name: \"Vanilla Cupcakes (6-pack)\",\n        description: \"Fluffy vanilla cupcakes with buttercream frosting\",\n        categoryId: insertedCategories[0].id,\n        price: \"12.00\",\n        cost: \"6.25\",\n        margin: \"47.92\",\n        sku: \"VAN-CUP-006\",\n        isActive: true\n      },\n      {\n        name: \"Fresh Croissants\",\n        description: \"Buttery, flaky French croissants\",\n        categoryId: insertedCategories[1].id,\n        price: \"3.50\",\n        cost: \"1.75\",\n        margin: \"50.00\",\n        sku: \"CROIS-001\",\n        isActive: true\n      }\n    ];\n    const insertedProducts = await db.insert(products).values(productData).returning();\n\n    // 8. Insert Product Ingredients\n    console.log(\"ü•Ñ Inserting product ingredients...\");\n    const ingredientData = [\n      { productId: insertedProducts[0].id, inventoryItemId: insertedInventory[0].id, quantity: \"0.50\", unit: \"kg\" },\n      { productId: insertedProducts[0].id, inventoryItemId: insertedInventory[1].id, quantity: \"0.40\", unit: \"kg\" },\n      { productId: insertedProducts[1].id, inventoryItemId: insertedInventory[0].id, quantity: \"0.30\", unit: \"kg\" },\n      { productId: insertedProducts[1].id, inventoryItemId: insertedInventory[1].id, quantity: \"0.20\", unit: \"kg\" }\n    ];\n    await db.insert(productIngredients).values(ingredientData);\n\n    // 9. Insert Customers\n    console.log(\"üë• Inserting customers...\");\n    const customerData = [\n      {\n        name: \"Sarah Johnson\",\n        email: \"sarah.johnson@email.com\",\n        phone: \"+1-555-0123\",\n        address: \"123 Main Street, Cityville, ST 12345\",\n        remainingBalance: \"0.00\",\n        isActive: true\n      },\n      {\n        name: \"Michael Chen\",\n        email: \"michael.chen@email.com\",\n        phone: \"+1-555-0456\",\n        address: \"456 Oak Avenue, Townsburg, ST 67890\",\n        remainingBalance: \"25.50\",\n        isActive: true\n      },\n      {\n        name: \"Emily Davis\",\n        email: \"emily.davis@email.com\",\n        phone: \"+1-555-0789\",\n        address: \"789 Pine Road, Villageton, ST 13579\",\n        remainingBalance: \"0.00\",\n        isActive: true\n      }\n    ];\n    const insertedCustomers = await db.insert(customers).values(customerData).returning();\n\n    // 10. Insert Parties (Suppliers)\n    console.log(\"üè¢ Inserting suppliers/parties...\");\n    const partyData = [\n      {\n        name: \"Premium Flour Co.\",\n        type: \"supplier\",\n        contactPerson: \"John Smith\",\n        email: \"orders@premiumflour.com\",\n        phone: \"+1-555-1111\",\n        address: \"100 Industrial Way, Flour City, ST 11111\",\n        balance: \"1250.00\",\n        isActive: true\n      },\n      {\n        name: \"Dairy Best Ltd.\",\n        type: \"supplier\",\n        contactPerson: \"Maria Rodriguez\",\n        email: \"supply@dairybest.com\",\n        phone: \"+1-555-2222\",\n        address: \"200 Farm Road, Dairy Valley, ST 22222\",\n        balance: \"850.50\",\n        isActive: true\n      }\n    ];\n    const insertedParties = await db.insert(parties).values(partyData).returning();\n\n    // 11. Insert Orders\n    console.log(\"üìù Inserting orders...\");\n    const orderData = [\n      {\n        customerName: \"Sarah Johnson\",\n        customerId: insertedCustomers[0].id,\n        customerEmail: \"sarah.johnson@email.com\",\n        customerPhone: \"+1-555-0123\",\n        totalAmount: \"47.00\",\n        status: \"completed\",\n        paymentMethod: \"credit_card\",\n        deliveryDate: new Date(Date.now() + 24 * 60 * 60 * 1000),\n        notes: \"Birthday party order\"\n      },\n      {\n        customerName: \"Michael Chen\",\n        customerId: insertedCustomers[1].id,\n        customerEmail: \"michael.chen@email.com\",\n        customerPhone: \"+1-555-0456\",\n        totalAmount: \"24.00\",\n        status: \"pending\",\n        paymentMethod: \"cash\",\n        deliveryDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000),\n        notes: \"Office meeting order\"\n      }\n    ];\n    const insertedOrders = await db.insert(orders).values(orderData).returning();\n\n    // 12. Insert Order Items\n    console.log(\"üõí Inserting order items...\");\n    const orderItemData = [\n      { orderId: insertedOrders[0].id, productId: insertedProducts[0].id, quantity: 1, unitPrice: \"35.00\", totalPrice: \"35.00\" },\n      { orderId: insertedOrders[0].id, productId: insertedProducts[1].id, quantity: 1, unitPrice: \"12.00\", totalPrice: \"12.00\" },\n      { orderId: insertedOrders[1].id, productId: insertedProducts[1].id, quantity: 2, unitPrice: \"12.00\", totalPrice: \"24.00\" }\n    ];\n    await db.insert(orderItems).values(orderItemData);\n\n    // 13. Insert Purchases\n    console.log(\"üí∞ Inserting purchases...\");\n    const purchaseData = [\n      {\n        supplierName: \"Premium Flour Co.\",\n        partyId: insertedParties[0].id,\n        totalAmount: \"125.00\",\n        paymentMethod: \"bank_transfer\",\n        status: \"completed\",\n        purchaseDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),\n        invoiceNumber: \"PFC-2024-001\",\n        notes: \"Monthly flour order\"\n      }\n    ];\n    const insertedPurchases = await db.insert(purchases).values(purchaseData).returning();\n\n    // 14. Insert Purchase Items\n    console.log(\"üì¶ Inserting purchase items...\");\n    const purchaseItemData = [\n      { purchaseId: insertedPurchases[0].id, inventoryItemId: insertedInventory[0].id, quantity: \"50.00\", unitPrice: \"2.50\", totalPrice: \"125.00\" }\n    ];\n    await db.insert(purchaseItems).values(purchaseItemData);\n\n    // 15. Insert Bills\n    console.log(\"üßæ Inserting bills...\");\n    const billData = [\n      {\n        billNumber: \"BILL-2024-001\",\n        customerId: insertedCustomers[0].id,\n        customerName: \"Sarah Johnson\",\n        billDate: new Date(),\n        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n        totalAmount: \"47.00\",\n        discount: \"0.00\",\n        tax: \"3.76\",\n        status: \"pending\",\n        notes: \"Birthday cake order\"\n      }\n    ];\n    const insertedBills = await db.insert(bills).values(billData).returning();\n\n    // 16. Insert Bill Items\n    console.log(\"üìã Inserting bill items...\");\n    const billItemData = [\n      {\n        billId: insertedBills[0].id,\n        productId: insertedProducts[0].id,\n        productName: \"Chocolate Birthday Cake\",\n        quantity: 1,\n        unitPrice: \"35.00\",\n        totalPrice: \"35.00\"\n      }\n    ];\n    await db.insert(billItems).values(billItemData);\n\n    // 17. Insert Expenses\n    console.log(\"üí∏ Inserting expenses...\");\n    const expenseData = [\n      {\n        title: \"Monthly rent for bakery\",\n        amount: \"2500.00\",\n        category: \"rent\",\n        date: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n        description: \"Monthly bakery space rental\",\n        createdBy: insertedUsers[0].id\n      },\n      {\n        title: \"Electricity bill\",\n        amount: \"180.50\",\n        category: \"utilities\",\n        date: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000),\n        description: \"Monthly electricity charges\",\n        createdBy: insertedUsers[1].id\n      }\n    ];\n    await db.insert(expenses).values(expenseData);\n\n    // 18. Insert Assets\n    console.log(\"üè≠ Inserting assets...\");\n    const assetData = [\n      {\n        name: \"Commercial Stand Mixer\",\n        category: \"equipment\",\n        purchasePrice: \"1250.00\",\n        currentValue: \"950.00\",\n        purchaseDate: new Date(Date.now() - 365 * 24 * 60 * 60 * 1000),\n        location: \"Main kitchen\",\n        condition: \"good\",\n        description: \"20-quart capacity, serviced annually\"\n      },\n      {\n        name: \"Convection Oven\",\n        category: \"equipment\",\n        purchasePrice: \"3500.00\",\n        currentValue: \"2800.00\",\n        purchaseDate: new Date(Date.now() - 2 * 365 * 24 * 60 * 60 * 1000),\n        location: \"Main kitchen\",\n        condition: \"excellent\",\n        description: \"Double rack, energy efficient\"\n      }\n    ];\n    await db.insert(assets).values(assetData);\n\n    // 19. Insert Production Schedule\n    console.log(\"‚è∞ Inserting production schedule...\");\n    const scheduleData = [\n      {\n        productId: insertedProducts[0].id,\n        quantity: 5,\n        scheduledDate: new Date(Date.now() + 24 * 60 * 60 * 1000),\n        startTime: new Date(Date.now() + 24 * 60 * 60 * 1000 + 8 * 60 * 60 * 1000),\n        endTime: new Date(Date.now() + 24 * 60 * 60 * 1000 + 12 * 60 * 60 * 1000),\n        assignedTo: \"Baker Team A\",\n        notes: \"Weekend orders - chocolate cakes\",\n        status: \"scheduled\"\n      }\n    ];\n    await db.insert(productionSchedule).values(scheduleData);\n\n    // 20. Insert Inventory Transactions\n    console.log(\"üìä Inserting inventory transactions...\");\n    const transactionData = [\n      {\n        inventoryItemId: insertedInventory[0].id,\n        type: \"purchase\",\n        quantity: \"50.00\",\n        reason: \"Monthly stock replenishment\",\n        reference: \"PFC-2024-001\",\n        createdBy: insertedUsers[0].id\n      },\n      {\n        inventoryItemId: insertedInventory[0].id,\n        type: \"usage\",\n        quantity: \"-5.00\",\n        reason: \"Production consumption\",\n        reference: \"PROD-001\",\n        createdBy: insertedUsers[2].id\n      }\n    ];\n    await db.insert(inventoryTransactions).values(transactionData);\n\n    // 21. Insert Settings\n    console.log(\"‚öôÔ∏è Inserting settings...\");\n    const settingsData = [\n      { key: \"business_name\", value: \"Sweet Treats Bakery\" },\n      { key: \"business_address\", value: \"123 Baker Street, Sweet City, ST 12345\" },\n      { key: \"business_phone\", value: \"+1-555-BAKERY\" },\n      { key: \"business_email\", value: \"orders@sweettreats.com\" },\n      { key: \"tax_rate\", value: \"8.5\" },\n      { key: \"currency\", value: \"USD\" },\n      { key: \"labor_cost_per_hour\", value: \"25.00\" },\n      { key: \"overhead_percentage\", value: \"15.0\" }\n    ];\n    await db.insert(settings).values(settingsData);\n\n    // 22. Insert Audit Logs\n    console.log(\"üìù Inserting audit logs...\");\n    const auditData = [\n      {\n        userId: insertedUsers[0].id,\n        action: \"CREATE\",\n        tableName: \"products\",\n        recordId: insertedProducts[0].id.toString(),\n        oldValues: null,\n        newValues: JSON.stringify({ name: \"Chocolate Birthday Cake\", price: \"35.00\" }),\n        ipAddress: \"192.168.1.1\",\n        userAgent: \"System Setup\"\n      },\n      {\n        userId: insertedUsers[1].id,\n        action: \"CREATE\",\n        tableName: \"orders\",\n        recordId: insertedOrders[0].id.toString(),\n        oldValues: null,\n        newValues: JSON.stringify({ customerName: \"Sarah Johnson\", totalAmount: \"47.00\" }),\n        ipAddress: \"192.168.1.2\",\n        userAgent: \"System Setup\"\n      }\n    ];\n    await db.insert(auditLogs).values(auditData);\n\n    console.log(\"üéâ Comprehensive data insertion completed successfully!\");\n    console.log(\"\\n=== SUMMARY ===\");\n    console.log(`‚úÖ Units: ${insertedUnits.length}`);\n    console.log(`‚úÖ Users: ${insertedUsers.length}`);\n    console.log(`‚úÖ Permissions: ${insertedPermissions.length}`);\n    console.log(`‚úÖ Categories: ${insertedCategories.length}`);\n    console.log(`‚úÖ Inventory Categories: ${insertedInvCategories.length}`);\n    console.log(`‚úÖ Inventory Items: ${insertedInventory.length}`);\n    console.log(`‚úÖ Products: ${insertedProducts.length}`);\n    console.log(`‚úÖ Customers: ${insertedCustomers.length}`);\n    console.log(`‚úÖ Suppliers: ${insertedParties.length}`);\n    console.log(`‚úÖ Orders: ${insertedOrders.length}`);\n    console.log(`‚úÖ Purchases: ${insertedPurchases.length}`);\n    console.log(`‚úÖ Bills: ${insertedBills.length}`);\n    \n    console.log(\"\\n=== LOGIN CREDENTIALS ===\");\n    console.log(\"üìß Super Admin: superadmin@bakesewa.com | üîê Password: superadmin123\");\n    console.log(\"üìß Admin: admin@bakesewa.com | üîê Password: admin123\");\n    console.log(\"üìß Manager: manager@bakesewa.com | üîê Password: manager123\");\n    console.log(\"üìß Staff: staff@bakesewa.com | üîê Password: staff123\");\n    console.log(\"=========================\");\n\n    return {\n      success: true,\n      message: \"All tables populated with comprehensive sample data\",\n      counts: {\n        units: insertedUnits.length,\n        users: insertedUsers.length,\n        permissions: insertedPermissions.length,\n        categories: insertedCategories.length,\n        inventoryCategories: insertedInvCategories.length,\n        inventoryItems: insertedInventory.length,\n        products: insertedProducts.length,\n        customers: insertedCustomers.length,\n        suppliers: insertedParties.length,\n        orders: insertedOrders.length,\n        purchases: insertedPurchases.length,\n        bills: insertedBills.length\n      }\n    };\n    \n  } catch (error) {\n    console.error(\"‚ùå Error inserting comprehensive data:\", error);\n    throw error;\n  }\n}\n\n// Run if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  insertComprehensiveData().then((result) => {\n    console.log(\"‚úÖ Process completed:\", result.message);\n    process.exit(0);\n  }).catch((error) => {\n    console.error(\"‚ùå Process failed:\", error);\n    process.exit(1);\n  });\n}\n","size_bytes":20557},"server/migrate-and-seed.ts":{"content":"\nimport { drizzle } from \"drizzle-orm/postgres-js\";\nimport { migrate } from \"drizzle-orm/postgres-js/migrator\";\nimport postgres from \"postgres\";\nimport bcrypt from \"bcrypt\";\nimport { users } from \"../shared/schema\";\n\nconst connectionString = process.env.DATABASE_URL;\n\nif (!connectionString) {\n  throw new Error(\"DATABASE_URL environment variable is required\");\n}\n\nconst sql = postgres(connectionString, { max: 1 });\nconst db = drizzle(sql);\n\nasync function migrateAndSeed() {\n  try {\n    console.log(\"üîÑ Running database migrations...\");\n    \n    // Run migrations\n    await migrate(db, { migrationsFolder: \"./migrations\" });\n    console.log(\"‚úÖ Database migrations completed\");\n\n    // Create test users\n    console.log(\"üë§ Creating test users...\");\n    \n    const testUsers = [\n      {\n        id: `user_${Date.now()}_1`,\n        email: \"admin@bakesewa.com\",\n        password: await bcrypt.hash(\"admin123\", 10),\n        firstName: \"Admin\",\n        lastName: \"User\",\n        role: \"admin\"\n      },\n      {\n        id: `user_${Date.now()}_2`,\n        email: \"superadmin@bakesewa.com\",\n        password: await bcrypt.hash(\"superadmin123\", 10),\n        firstName: \"Super\",\n        lastName: \"Admin\",\n        role: \"super_admin\"\n      },\n      {\n        id: `user_${Date.now()}_3`,\n        email: \"manager@bakesewa.com\",\n        password: await bcrypt.hash(\"manager123\", 10),\n        firstName: \"Manager\",\n        lastName: \"User\",\n        role: \"manager\"\n      },\n      {\n        id: `user_${Date.now()}_4`,\n        email: \"staff@bakesewa.com\",\n        password: await bcrypt.hash(\"staff123\", 10),\n        firstName: \"Staff\",\n        lastName: \"User\",\n        role: \"staff\"\n      }\n    ];\n\n    // Insert users\n    await db.insert(users).values(testUsers).onConflictDoNothing();\n    \n    console.log(\"\\nüéâ Database setup completed!\");\n    console.log(\"\\n=== LOGIN CREDENTIALS ===\");\n    console.log(\"You can use any of these accounts to login:\");\n    console.log(\"\\n1. Super Admin Account:\");\n    console.log(\"   Email: superadmin@bakesewa.com\");\n    console.log(\"   Password: superadmin123\");\n    console.log(\"   Role: super_admin\");\n    \n    console.log(\"\\n2. Admin Account:\");\n    console.log(\"   Email: admin@bakesewa.com\");\n    console.log(\"   Password: admin123\");\n    console.log(\"   Role: admin\");\n    \n    console.log(\"\\n3. Manager Account:\");\n    console.log(\"   Email: manager@bakesewa.com\");\n    console.log(\"   Password: manager123\");\n    console.log(\"   Role: manager\");\n    \n    console.log(\"\\n4. Staff Account:\");\n    console.log(\"   Email: staff@bakesewa.com\");\n    console.log(\"   Password: staff123\");\n    console.log(\"   Role: staff\");\n    \n    console.log(\"\\n=========================\");\n    console.log(\"üöÄ You can now start the application and login with any of the above credentials!\");\n    \n  } catch (error) {\n    console.error(\"‚ùå Migration and seeding failed:\", error);\n    throw error;\n  } finally {\n    await sql.end();\n  }\n}\n\n// Run if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  migrateAndSeed().then(() => {\n    console.log(\"‚úÖ Process completed\");\n    process.exit(0);\n  }).catch((error) => {\n    console.error(\"‚ùå Process failed:\", error);\n    process.exit(1);\n  });\n}\n\nexport { migrateAndSeed };\n","size_bytes":3286}},"version":1}